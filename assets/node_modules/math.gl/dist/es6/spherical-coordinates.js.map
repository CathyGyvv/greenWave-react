{"version":3,"sources":["../../src/spherical-coordinates.js"],"names":["formatValue","equals","config","degrees","radians","clamp","Vector3","vec3_length","EPSILON","EARTH_RADIUS_METERS","SphericalCoordinates","constructor","phi","theta","radius","bearing","pitch","altitude","radiusScale","arguments","length","Number","isFinite","check","toString","formatString","printTypes","printDegrees","f","other","exactEquals","v","Math","PI","longitude","latitude","lng","lat","z","set","clone","copy","fromLngLatZ","fromVector3","atan2","acos","toVector3","rotateX","rotateZ","makeSafe","max","min","Error"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Adaptation of THREE.js Spherical class, under MIT license\nimport {formatValue, equals, config} from './lib/common';\nimport {degrees, radians, clamp} from './lib/common';\nimport Vector3 from './vector3';\n\n/* eslint-disable camelcase */\nimport vec3_length from 'gl-vec3/length';\n// import assert from 'assert';\n\n// TODO - import epsilon\nconst EPSILON = 0.000001;\n\nconst EARTH_RADIUS_METERS = 6.371e6;\n\n// Todo [rho, theta, phi] ?\nexport default class SphericalCoordinates {\n  /**\n   * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n   * The poles (phi) are at the positive and negative y axis.\n   * The equator starts at positive z.\n   * @class\n   * @param {Number} phi=0 - rotation around X (latitude)\n   * @param {Number} theta=0 - rotation around Y (longitude)\n   * @param {Number} radius=1 - Distance from center\n   */\n  /* eslint-disable complexity */\n  constructor({\n    phi,\n    theta,\n    radius,\n    bearing,\n    pitch,\n    altitude,\n    radiusScale = EARTH_RADIUS_METERS\n  } = {}) {\n    if (arguments.length === 0) {\n      this.phi = 0;\n      this.theta = 0;\n      this.radius = 1;\n    } else if (Number.isFinite(phi) || Number.isFinite(theta)) {\n      this.phi = phi || 0; // up / down towards top and bottom pole\n      this.theta = theta || 0; // around the equator of the sphere\n    } else if (Number.isFinite(bearing) || Number.isFinite(pitch)) {\n      this.bearing = bearing || 0; // up / down towards top and bottom pole\n      this.pitch = pitch || 0; // around the equator of the sphere\n    }\n    this.radius = radius || 1; // radial distance from center\n    this.radiusScale = radiusScale || 1; // Used by lngLatZ\n    this.check();\n  }\n  /* eslint-enable complexity */\n\n  toString() {\n    return this.formatString(config);\n  }\n\n  formatString({printTypes, printDegrees}) {\n    const f = formatValue;\n    return `${printTypes ? 'Spherical' : ''}\\\n[rho:${f(this.radius)},theta:${f(this.theta)},phi:${f(this.phi)}]`;\n  }\n\n  equals(other) {\n    return (\n      equals(this.radius, other.radius) &&\n      equals(this.theta, other.theta) &&\n      equals(this.phi, other.phi)\n    );\n  }\n\n  exactEquals(other) {\n    return this.radius === other.radius && this.theta === other.theta && this.phi === other.phi;\n  }\n\n  /* eslint-disable brace-style */\n  // Cartographic (bearing 0 north, pitch 0 look from above)\n  get bearing() {\n    return 180 - degrees(this.phi);\n  }\n  set bearing(v) {\n    this.phi = Math.PI - radians(v);\n  }\n  get pitch() {\n    return degrees(this.theta);\n  }\n  set pitch(v) {\n    this.theta = radians(v);\n  }\n  // get pitch() { return 90 - degrees(this.phi); }\n  // set pitch(v) { this.phi = radians(v) + Math.PI / 2; }\n  // get altitude() { return this.radius - 1; } // relative altitude\n\n  // lnglatZ coordinates\n  get longitude() {\n    return degrees(this.phi);\n  }\n  get latitude() {\n    return degrees(this.theta);\n  }\n  get lng() {\n    return degrees(this.phi);\n  }\n  get lat() {\n    return degrees(this.theta);\n  }\n  get z() {\n    return (this.radius - 1) * this.radiusScale;\n  }\n  /* eslint-enable brace-style */\n\n  set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this.check();\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  copy(other) {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    return this.check();\n  }\n\n  fromLngLatZ([lng, lat, z]) {\n    this.radius = 1 + z / this.radiusScale;\n    this.phi = radians(lat);\n    this.theta = radians(lng);\n  }\n\n  fromVector3(v) {\n    this.radius = vec3_length(v);\n    if (this.radius === 0) {\n      this.theta = 0;\n      this.phi = 0;\n    } else {\n      this.theta = Math.atan2(v[0], v[1]); // equator angle around y-up axis\n      this.phi = Math.acos(clamp(v[2] / this.radius, -1, 1)); // polar angle\n    }\n    return this.check();\n  }\n\n  toVector3() {\n    return new Vector3(0, 0, this.radius)\n      .rotateX({radians: this.theta})\n      .rotateZ({radians: this.phi});\n  }\n\n  // restrict phi to be betwee EPS and PI-EPS\n  makeSafe() {\n    this.phi = Math.max(EPSILON, Math.min(Math.PI - EPSILON, this.phi));\n  }\n\n  check() {\n    // this.makeSafe();\n    if (!Number.isFinite(this.phi) || !Number.isFinite(this.theta) || !(this.radius > 0)) {\n      throw new Error('SphericalCoordinates: some fields set to invalid numbers');\n    }\n    return this;\n  }\n}\n"],"file":"spherical-coordinates.js"}