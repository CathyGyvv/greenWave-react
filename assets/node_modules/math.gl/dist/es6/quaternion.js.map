{"version":3,"sources":["../../src/quaternion.js"],"names":["MathArray","checkNumber","quat_fromMat3","quat_identity","quat_length","quat_squaredLength","quat_dot","quat_rotationTo","quat_add","quat_calculateW","quat_conjugate","quat_invert","quat_lerp","quat_multiply","quat_normalize","quat_rotateX","quat_rotateY","quat_rotateZ","quat_scale","quat_set","quat_setAxisAngle","quat_slerp","IDENTITY_QUATERNION","validateQuaternion","q","length","Number","isFinite","Quaternion","constructor","x","y","z","w","Array","isArray","arguments","copy","set","fromMatrix3","m","check","fromValues","identity","ELEMENTS","value","squaredLength","a","dot","b","undefined","Error","rotationTo","vectorA","vectorB","add","calculateW","conjugate","invert","lerp","t","multiply","normalize","rotateX","rad","rotateY","rotateZ","scale","i","j","k","l","setAxisAngle","axis","slerp","start","target","ratio"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport MathArray from './lib/math-array';\nimport {checkNumber} from './lib/common';\n\n// gl-matrix is too big. Cherry-pick individual imports from stack.gl version\n/* eslint-disable camelcase */\nimport quat_fromMat3 from 'gl-quat/fromMat3';\nimport quat_identity from 'gl-quat/identity';\nimport quat_length from 'gl-quat/length';\nimport quat_squaredLength from 'gl-quat/squaredLength';\nimport quat_dot from 'gl-quat/dot';\n// import quat_getAxisAngle from 'gl-quat/getAxisAngle';\nimport quat_rotationTo from 'gl-quat/rotationTo';\nimport quat_add from 'gl-quat/add';\nimport quat_calculateW from 'gl-quat/calculateW';\nimport quat_conjugate from 'gl-quat/conjugate';\nimport quat_invert from 'gl-quat/invert';\nimport quat_lerp from 'gl-quat/lerp';\nimport quat_multiply from 'gl-quat/multiply';\nimport quat_normalize from 'gl-quat/normalize';\nimport quat_rotateX from 'gl-quat/rotateX';\nimport quat_rotateY from 'gl-quat/rotateY';\nimport quat_rotateZ from 'gl-quat/rotateZ';\nimport quat_scale from 'gl-quat/scale';\nimport quat_set from 'gl-quat/set';\nimport quat_setAxisAngle from 'gl-quat/setAxisAngle';\nimport quat_slerp from 'gl-quat/slerp';\n\nconst IDENTITY_QUATERNION = [0, 0, 0, 1];\n\nexport function validateQuaternion(q) {\n  return (\n    q.length === 4 &&\n    Number.isFinite(q[0]) &&\n    Number.isFinite(q[1]) &&\n    Number.isFinite(q[2]) &&\n    Number.isFinite(q[3])\n  );\n}\n\nexport default class Quaternion extends MathArray {\n  // Creates a new identity quat\n  constructor(x = 0, y = 0, z = 0, w = 1) {\n    super();\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x, y, z, w);\n    }\n  }\n\n  // Creates a quaternion from the given 3x3 rotation matrix.\n  // NOTE: The resultant quaternion is not normalized, so you should\n  // be sure to renormalize the quaternion yourself where necessary.\n  fromMatrix3(m) {\n    quat_fromMat3(this, m);\n    return this.check();\n  }\n\n  // Creates a new quat initialized with the given values\n  fromValues(x, y, z, w) {\n    return this.set(x, y, z, w);\n  }\n\n  // Set a quat to the identity quaternion\n  identity() {\n    quat_identity(this);\n    return this.check();\n  }\n\n  // Getters/setters\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  get ELEMENTS() {\n    return 4;\n  }\n  get x() {\n    return this[0];\n  }\n  set x(value) {\n    return (this[0] = checkNumber(value));\n  }\n  get y() {\n    return this[1];\n  }\n  set y(value) {\n    return (this[1] = checkNumber(value));\n  }\n  get z() {\n    return this[2];\n  }\n  set z(value) {\n    return (this[2] = checkNumber(value));\n  }\n  get w() {\n    return this[3];\n  }\n  set w(value) {\n    return (this[3] = checkNumber(value));\n  }\n  /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n\n  // Calculates the length of a quat\n  length() {\n    return quat_length(this);\n  }\n\n  // Calculates the squared length of a quat\n  squaredLength(a) {\n    return quat_squaredLength(this);\n  }\n\n  // Calculates the dot product of two quat's\n  // @return {Number}\n  dot(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.dot only takes one argument');\n    }\n    return quat_dot(this, a);\n  }\n\n  // Gets the rotation axis and angle for a given quaternion.\n  // If a quaternion is created with setAxisAngle, this method will\n  // return the same values as providied in the original parameter\n  // list OR functionally equivalent values.\n  // Example: The quaternion formed by axis [0, 0, 1] and angle -90\n  // is the same as the quaternion formed by [0, 0, 1] and 270.\n  // This method favors the latter.\n  // @return {{[x,y,z], Number}}\n  // getAxisAngle() {\n  //   const axis = [];\n  //   const angle = quat_getAxisAngle(axis, this);\n  //   return {axis, angle};\n  // }\n\n  // MODIFIERS\n\n  // Sets a quaternion to represent the shortest rotation from one vector\n  // to another. Both vectors are assumed to be unit length.\n  rotationTo(vectorA, vectorB) {\n    quat_rotationTo(this, vectorA, vectorB);\n    return this.check();\n  }\n\n  // Sets the specified quaternion with values corresponding to the given axes.\n  // Each axis is a vec3 and is expected to be unit length and perpendicular\n  // to all other specified axes.\n  // setAxes() {\n  //   Number\n  // }\n\n  // Performs a spherical linear interpolation with two control points\n  // sqlerp() {\n  //   Number;\n  // }\n\n  // Adds two quat's\n  add(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.add only takes one argument');\n    }\n    quat_add(this, a);\n    return this.check();\n  }\n\n  // Calculates the W component of a quat from the X, Y, and Z components.\n  // Any existing W component will be ignored.\n  calculateW() {\n    quat_calculateW(this, this);\n    return this.check();\n  }\n\n  // Calculates the conjugate of a quat If the quaternion is normalized,\n  // this function is faster than quat_inverse and produces the same result.\n  conjugate() {\n    quat_conjugate(this, this);\n    return this.check();\n  }\n\n  // Calculates the inverse of a quat\n  invert() {\n    quat_invert(this, this);\n    return this.check();\n  }\n\n  // Performs a linear interpolation between two quat's\n  lerp(a, b, t) {\n    quat_lerp(this, a, b, t);\n    return this.check();\n  }\n\n  // Multiplies two quat's\n  multiply(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.multiply only takes one argument');\n    }\n    quat_multiply(this, this, b);\n    return this.check();\n  }\n\n  // Normalize a quat\n  normalize() {\n    quat_normalize(this, this);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the X axis\n  rotateX(rad) {\n    quat_rotateX(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Y axis\n  rotateY(rad) {\n    quat_rotateY(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Z axis\n  rotateZ(rad) {\n    quat_rotateZ(this, this, rad);\n    return this.check();\n  }\n\n  // Scales a quat by a scalar number\n  scale(b) {\n    quat_scale(this, this, b);\n    return this.check();\n  }\n\n  // Set the components of a quat to the given values\n  set(i, j, k, l) {\n    quat_set(this, i, j, k, l);\n    return this.check();\n  }\n\n  // Sets a quat from the given angle and rotation axis, then returns it.\n  setAxisAngle(axis, rad) {\n    quat_setAxisAngle(this, axis, rad);\n    return this.check();\n  }\n\n  // Performs a spherical linear interpolation between two quat\n  slerp({start = IDENTITY_QUATERNION, target, ratio}) {\n    quat_slerp(this, start, target, ratio);\n    return this.check();\n  }\n}\n"],"file":"quaternion.js"}