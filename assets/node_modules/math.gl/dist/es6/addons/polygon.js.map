{"version":3,"sources":["../../../src/addons/polygon.js"],"names":["equals","Polygon","constructor","points","isClosed","length","Object","freeze","getSignedArea","area","forEachSegment","p1","p2","getArea","Math","abs","getWindingDirection","sign","visitor","i","isPolygon"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,eAArB;AAEA,eAAe,MAAMC,OAAN,CAAc;AAC3BC,cAAYC,MAAZ,EAAoB;AAClB,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgBJ,OAAO,KAAKG,MAAL,CAAY,KAAKA,MAAL,CAAYE,MAAZ,GAAqB,CAAjC,CAAP,EAA4C,KAAKF,MAAL,CAAY,CAAZ,CAA5C,CAAhB;AACAG,WAAOC,MAAP,CAAc,IAAd;AACD,GAL0B,CAO3B;;;AACAC,kBAAgB;AACd,QAAIC,OAAO,CAAX;AACA,SAAKC,cAAL,CAAoB,CAACC,EAAD,EAAKC,EAAL,KAAY;AAC9B;AACAH,cAAQ,CAACE,GAAG,CAAH,IAAQC,GAAG,CAAH,CAAT,KAAmBD,GAAG,CAAH,IAAQC,GAAG,CAAH,CAA3B,CAAR;AACD,KAHD;AAIA,WAAOH,OAAO,CAAd;AACD;;AAEDI,YAAU;AACR,WAAOC,KAAKC,GAAL,CAAS,KAAKP,aAAL,EAAT,CAAP;AACD;;AAEDQ,wBAAsB;AACpB,WAAOF,KAAKG,IAAL,CAAU,KAAKT,aAAL,EAAV,CAAP;AACD;;AAEDE,iBAAeQ,OAAf,EAAwB;AACtB,UAAMb,SAAS,KAAKF,MAAL,CAAYE,MAA3B;;AACA,SAAK,IAAIc,IAAI,CAAb,EAAgBA,IAAId,SAAS,CAA7B,EAAgCc,GAAhC,EAAqC;AACnCD,cAAQ,KAAKf,MAAL,CAAYgB,CAAZ,CAAR,EAAwB,KAAKhB,MAAL,CAAYgB,IAAI,CAAhB,CAAxB,EAA4CA,CAA5C,EAA+CA,IAAI,CAAnD;AAED;;AACD,QAAI,KAAKC,SAAL,IAAkB,CAAC,KAAKhB,QAAL,EAAvB,EAAwC;AACtC;AACAc,cAAQ,KAAKf,MAAL,CAAYE,SAAS,CAArB,CAAR,EAAiC,KAAKF,MAAL,CAAY,CAAZ,CAAjC,EAAiDE,SAAS,CAA1D,EAA6D,CAA7D;AACD;AACF;;AAnC0B","sourcesContent":["import {equals} from '../lib/common';\n\nexport default class Polygon {\n  constructor(points) {\n    this.points = points;\n    this.isClosed = equals(this.points[this.points.length - 1], this.points[0]);\n    Object.freeze(this);\n  }\n\n  // https://en.wikipedia.org/wiki/Shoelace_formula\n  getSignedArea() {\n    let area = 0;\n    this.forEachSegment((p1, p2) => {\n      // the \"cancelling\" cross-products: (p1.x + p2.x) * (p1.y - p2.y)\n      area += (p1[0] + p2[0]) * (p1[1] - p2[1]);\n    });\n    return area / 2;\n  }\n\n  getArea() {\n    return Math.abs(this.getSignedArea());\n  }\n\n  getWindingDirection() {\n    return Math.sign(this.getSignedArea());\n  }\n\n  forEachSegment(visitor) {\n    const length = this.points.length;\n    for (let i = 0; i < length - 1; i++) {\n      visitor(this.points[i], this.points[i + 1], i, i + 1)\n\n    }\n    if (this.isPolygon && !this.isClosed()) {\n      // Call function with points and indices\n      visitor(this.points[length - 1], this.points[0], length - 1, 0);\n    }\n  }\n}\n"],"file":"polygon.js"}