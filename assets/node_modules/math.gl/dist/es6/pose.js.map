{"version":3,"sources":["../../src/pose.js"],"names":["Matrix4","Vector3","Euler","Pose","constructor","x","y","z","roll","pitch","yaw","position","orientation","RollPitchYaw","value","getPosition","getOrientation","getTransformationMatrix","sr","Math","sin","sp","sw","cr","cos","cp","cw","matrix","setRowMajor","getTransformationMatrixFromPose","pose","multiplyRight","invert","getTransformationMatrixToPose"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Matrix4 from './matrix4';\nimport Vector3 from './vector3';\nimport Euler from './euler';\n\nexport default class Pose {\n\n  /**\n   * A pose contains both rotation and rotations.\n   * Note that every single pose defines its own coordinate system\n   * (with the position of the pose in the origin, and zero rotations).\n   * These \"pose relative\" coordinate will be centered on the defining\n   * pose's position and with with the defining pose's orientation\n   * aligned with axis.\n   */\n  constructor({x = 0, y = 0, z = 0, roll = 0, pitch = 0, yaw = 0}) {\n    this.position = new Vector3(x, y, z);\n    this.orientation = new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n  }\n\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  get x()      { return this.position.x; }\n  set x(value) { return this.position.x = value; }\n  get y()      { return this.position.y; }\n  set y(value) { return this.position.y = value; }\n  get z()      { return this.position.z; }\n  set z(value) { return this.position.z = value; }\n  get roll()       { return this.orientation.roll; }\n  set roll(value)  { return this.orientation.roll = value; }\n  get pitch()      { return this.orientation.pitch; }\n  set pitch(value) { return this.orientation.pitch = value; }\n  get yaw()        { return this.orientation.yaw; }\n  set yaw(value)   { return this.orientation.yaw = value; }\n  /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n\n  getPosition() {\n    return this.position;\n  }\n\n  getOrientation() {\n    return this.orientation;\n  }\n\n  /*\n   * Returns a 4x4 matrix that transforms a coordinates (in the same\n   * coordinate system as this pose) into the \"pose-relative\" coordinate\n   * system defined by this pose.\n   * The pose relative coordinates with have origin in the position of this\n   * pose, and axis will be aligned with the rotation of this pose.\n   */\n  getTransformationMatrix() {\n    // setup precomputations for the sin/cos of the angles\n    const sr = Math.sin(this.roll);\n    const sp = Math.sin(this.pitch);\n    const sw = Math.sin(this.yaw);\n\n    const cr = Math.cos(this.roll);\n    const cp = Math.cos(this.pitch);\n    const cw = Math.cos(this.yaw);\n\n    const matrix = new Matrix4().setRowMajor(\n      cw * cp,                  // 0,0\n      -sw * cr + cw * sp * sr,  // 0,1\n      sw * sr + cw * sp * cr,   // 0,2\n      this.x,                   // 0,3\n\n      sw * cp,                  // 1,0\n      cw * cr + sw * sp * sr,   // 1,1\n      -cw * sr + sw * sp * cr,  // 1,2\n      this.y,                   // 1,3\n\n      -sp,                      // 2,0\n      cp * sr,                  // 2,1\n      cp * cr,                  // 2,2\n      this.z,                   // 2,3\n\n      0,\n      0,\n      0,\n      1\n    );\n\n    return matrix;\n  }\n\n  /*\n   * Given a second pose that represent the same object in a second coordinate\n   * system, this method returns a 4x4 matrix that transforms coordinates in the\n   * second coordinate system into the coordinate system of this pose.\n   */\n  getTransformationMatrixFromPose(pose) {\n    return new Matrix4()\n      .multiplyRight(this.getTransformationMatrix())\n      .multiplyRight(pose.getTransformationMatrix().invert());\n  }\n\n  /*\n   * Given a second pose that represent the same object in a second coordinate\n   * system, this method returns a 4x4 matrix that transforms coordinates in the\n   * coordinate system of this pose into the coordinate system of the second pose.\n   *\n   * Note: This method returns the inverse of that returned by\n   * this.getTransformationMatrixFromPose(pose)\n   */\n  getTransformationMatrixToPose(pose) {\n    return new Matrix4()\n      .multiplyRight(pose.getTransformationMatrix())\n      .multiplyRight(this.getTransformationMatrix().invert());\n  }\n\n}\n"],"file":"pose.js"}