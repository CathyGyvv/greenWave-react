{"version":3,"sources":["../../src/pose.js"],"names":["Pose","x","y","z","roll","pitch","yaw","position","Vector3","orientation","Euler","RollPitchYaw","sr","Math","sin","sp","sw","cr","cos","cp","cw","matrix","Matrix4","setRowMajor","pose","multiplyRight","getTransformationMatrix","invert","value"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Matrix4 from './matrix4';\nimport Vector3 from './vector3';\nimport Euler from './euler';\n\nexport default class Pose {\n\n  /**\n   * A pose contains both rotation and rotations.\n   * Note that every single pose defines its own coordinate system\n   * (with the position of the pose in the origin, and zero rotations).\n   * These \"pose relative\" coordinate will be centered on the defining\n   * pose's position and with with the defining pose's orientation\n   * aligned with axis.\n   */\n  constructor({x = 0, y = 0, z = 0, roll = 0, pitch = 0, yaw = 0}) {\n    this.position = new Vector3(x, y, z);\n    this.orientation = new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n  }\n\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  get x()      { return this.position.x; }\n  set x(value) { return this.position.x = value; }\n  get y()      { return this.position.y; }\n  set y(value) { return this.position.y = value; }\n  get z()      { return this.position.z; }\n  set z(value) { return this.position.z = value; }\n  get roll()       { return this.orientation.roll; }\n  set roll(value)  { return this.orientation.roll = value; }\n  get pitch()      { return this.orientation.pitch; }\n  set pitch(value) { return this.orientation.pitch = value; }\n  get yaw()        { return this.orientation.yaw; }\n  set yaw(value)   { return this.orientation.yaw = value; }\n  /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n\n  getPosition() {\n    return this.position;\n  }\n\n  getOrientation() {\n    return this.orientation;\n  }\n\n  /*\n   * Returns a 4x4 matrix that transforms a coordinates (in the same\n   * coordinate system as this pose) into the \"pose-relative\" coordinate\n   * system defined by this pose.\n   * The pose relative coordinates with have origin in the position of this\n   * pose, and axis will be aligned with the rotation of this pose.\n   */\n  getTransformationMatrix() {\n    // setup precomputations for the sin/cos of the angles\n    const sr = Math.sin(this.roll);\n    const sp = Math.sin(this.pitch);\n    const sw = Math.sin(this.yaw);\n\n    const cr = Math.cos(this.roll);\n    const cp = Math.cos(this.pitch);\n    const cw = Math.cos(this.yaw);\n\n    const matrix = new Matrix4().setRowMajor(\n      cw * cp,                  // 0,0\n      -sw * cr + cw * sp * sr,  // 0,1\n      sw * sr + cw * sp * cr,   // 0,2\n      this.x,                   // 0,3\n\n      sw * cp,                  // 1,0\n      cw * cr + sw * sp * sr,   // 1,1\n      -cw * sr + sw * sp * cr,  // 1,2\n      this.y,                   // 1,3\n\n      -sp,                      // 2,0\n      cp * sr,                  // 2,1\n      cp * cr,                  // 2,2\n      this.z,                   // 2,3\n\n      0,\n      0,\n      0,\n      1\n    );\n\n    return matrix;\n  }\n\n  /*\n   * Given a second pose that represent the same object in a second coordinate\n   * system, this method returns a 4x4 matrix that transforms coordinates in the\n   * second coordinate system into the coordinate system of this pose.\n   */\n  getTransformationMatrixFromPose(pose) {\n    return new Matrix4()\n      .multiplyRight(this.getTransformationMatrix())\n      .multiplyRight(pose.getTransformationMatrix().invert());\n  }\n\n  /*\n   * Given a second pose that represent the same object in a second coordinate\n   * system, this method returns a 4x4 matrix that transforms coordinates in the\n   * coordinate system of this pose into the coordinate system of the second pose.\n   *\n   * Note: This method returns the inverse of that returned by\n   * this.getTransformationMatrixFromPose(pose)\n   */\n  getTransformationMatrixToPose(pose) {\n    return new Matrix4()\n      .multiplyRight(pose.getTransformationMatrix())\n      .multiplyRight(this.getTransformationMatrix().invert());\n  }\n\n}\n"],"file":"pose.js"}