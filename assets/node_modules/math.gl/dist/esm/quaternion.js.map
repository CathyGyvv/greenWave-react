{"version":3,"sources":["../../src/quaternion.js"],"names":["MathArray","checkNumber","quat_fromMat3","quat_identity","quat_length","quat_squaredLength","quat_dot","quat_rotationTo","quat_add","quat_calculateW","quat_conjugate","quat_invert","quat_lerp","quat_multiply","quat_normalize","quat_rotateX","quat_rotateY","quat_rotateZ","quat_scale","quat_set","quat_setAxisAngle","quat_slerp","IDENTITY_QUATERNION","validateQuaternion","q","length","Number","isFinite","Quaternion","x","y","z","w","Array","isArray","arguments","copy","set","m","check","a","b","undefined","Error","vectorA","vectorB","t","rad","i","j","k","l","axis","start","target","ratio","value"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport MathArray from './lib/math-array';\nimport {checkNumber} from './lib/common';\n\n// gl-matrix is too big. Cherry-pick individual imports from stack.gl version\n/* eslint-disable camelcase */\nimport quat_fromMat3 from 'gl-quat/fromMat3';\nimport quat_identity from 'gl-quat/identity';\nimport quat_length from 'gl-quat/length';\nimport quat_squaredLength from 'gl-quat/squaredLength';\nimport quat_dot from 'gl-quat/dot';\n// import quat_getAxisAngle from 'gl-quat/getAxisAngle';\nimport quat_rotationTo from 'gl-quat/rotationTo';\nimport quat_add from 'gl-quat/add';\nimport quat_calculateW from 'gl-quat/calculateW';\nimport quat_conjugate from 'gl-quat/conjugate';\nimport quat_invert from 'gl-quat/invert';\nimport quat_lerp from 'gl-quat/lerp';\nimport quat_multiply from 'gl-quat/multiply';\nimport quat_normalize from 'gl-quat/normalize';\nimport quat_rotateX from 'gl-quat/rotateX';\nimport quat_rotateY from 'gl-quat/rotateY';\nimport quat_rotateZ from 'gl-quat/rotateZ';\nimport quat_scale from 'gl-quat/scale';\nimport quat_set from 'gl-quat/set';\nimport quat_setAxisAngle from 'gl-quat/setAxisAngle';\nimport quat_slerp from 'gl-quat/slerp';\n\nconst IDENTITY_QUATERNION = [0, 0, 0, 1];\n\nexport function validateQuaternion(q) {\n  return (\n    q.length === 4 &&\n    Number.isFinite(q[0]) &&\n    Number.isFinite(q[1]) &&\n    Number.isFinite(q[2]) &&\n    Number.isFinite(q[3])\n  );\n}\n\nexport default class Quaternion extends MathArray {\n  // Creates a new identity quat\n  constructor(x = 0, y = 0, z = 0, w = 1) {\n    super();\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x, y, z, w);\n    }\n  }\n\n  // Creates a quaternion from the given 3x3 rotation matrix.\n  // NOTE: The resultant quaternion is not normalized, so you should\n  // be sure to renormalize the quaternion yourself where necessary.\n  fromMatrix3(m) {\n    quat_fromMat3(this, m);\n    return this.check();\n  }\n\n  // Creates a new quat initialized with the given values\n  fromValues(x, y, z, w) {\n    return this.set(x, y, z, w);\n  }\n\n  // Set a quat to the identity quaternion\n  identity() {\n    quat_identity(this);\n    return this.check();\n  }\n\n  // Getters/setters\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  get ELEMENTS() {\n    return 4;\n  }\n  get x() {\n    return this[0];\n  }\n  set x(value) {\n    return (this[0] = checkNumber(value));\n  }\n  get y() {\n    return this[1];\n  }\n  set y(value) {\n    return (this[1] = checkNumber(value));\n  }\n  get z() {\n    return this[2];\n  }\n  set z(value) {\n    return (this[2] = checkNumber(value));\n  }\n  get w() {\n    return this[3];\n  }\n  set w(value) {\n    return (this[3] = checkNumber(value));\n  }\n  /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n\n  // Calculates the length of a quat\n  length() {\n    return quat_length(this);\n  }\n\n  // Calculates the squared length of a quat\n  squaredLength(a) {\n    return quat_squaredLength(this);\n  }\n\n  // Calculates the dot product of two quat's\n  // @return {Number}\n  dot(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.dot only takes one argument');\n    }\n    return quat_dot(this, a);\n  }\n\n  // Gets the rotation axis and angle for a given quaternion.\n  // If a quaternion is created with setAxisAngle, this method will\n  // return the same values as providied in the original parameter\n  // list OR functionally equivalent values.\n  // Example: The quaternion formed by axis [0, 0, 1] and angle -90\n  // is the same as the quaternion formed by [0, 0, 1] and 270.\n  // This method favors the latter.\n  // @return {{[x,y,z], Number}}\n  // getAxisAngle() {\n  //   const axis = [];\n  //   const angle = quat_getAxisAngle(axis, this);\n  //   return {axis, angle};\n  // }\n\n  // MODIFIERS\n\n  // Sets a quaternion to represent the shortest rotation from one vector\n  // to another. Both vectors are assumed to be unit length.\n  rotationTo(vectorA, vectorB) {\n    quat_rotationTo(this, vectorA, vectorB);\n    return this.check();\n  }\n\n  // Sets the specified quaternion with values corresponding to the given axes.\n  // Each axis is a vec3 and is expected to be unit length and perpendicular\n  // to all other specified axes.\n  // setAxes() {\n  //   Number\n  // }\n\n  // Performs a spherical linear interpolation with two control points\n  // sqlerp() {\n  //   Number;\n  // }\n\n  // Adds two quat's\n  add(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.add only takes one argument');\n    }\n    quat_add(this, a);\n    return this.check();\n  }\n\n  // Calculates the W component of a quat from the X, Y, and Z components.\n  // Any existing W component will be ignored.\n  calculateW() {\n    quat_calculateW(this, this);\n    return this.check();\n  }\n\n  // Calculates the conjugate of a quat If the quaternion is normalized,\n  // this function is faster than quat_inverse and produces the same result.\n  conjugate() {\n    quat_conjugate(this, this);\n    return this.check();\n  }\n\n  // Calculates the inverse of a quat\n  invert() {\n    quat_invert(this, this);\n    return this.check();\n  }\n\n  // Performs a linear interpolation between two quat's\n  lerp(a, b, t) {\n    quat_lerp(this, a, b, t);\n    return this.check();\n  }\n\n  // Multiplies two quat's\n  multiply(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.multiply only takes one argument');\n    }\n    quat_multiply(this, this, b);\n    return this.check();\n  }\n\n  // Normalize a quat\n  normalize() {\n    quat_normalize(this, this);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the X axis\n  rotateX(rad) {\n    quat_rotateX(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Y axis\n  rotateY(rad) {\n    quat_rotateY(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Z axis\n  rotateZ(rad) {\n    quat_rotateZ(this, this, rad);\n    return this.check();\n  }\n\n  // Scales a quat by a scalar number\n  scale(b) {\n    quat_scale(this, this, b);\n    return this.check();\n  }\n\n  // Set the components of a quat to the given values\n  set(i, j, k, l) {\n    quat_set(this, i, j, k, l);\n    return this.check();\n  }\n\n  // Sets a quat from the given angle and rotation axis, then returns it.\n  setAxisAngle(axis, rad) {\n    quat_setAxisAngle(this, axis, rad);\n    return this.check();\n  }\n\n  // Performs a spherical linear interpolation between two quat\n  slerp({start = IDENTITY_QUATERNION, target, ratio}) {\n    quat_slerp(this, start, target, ratio);\n    return this.check();\n  }\n}\n"],"file":"quaternion.js"}