{"version":3,"sources":["../../../src/addons/polygon.js"],"names":["equals","Polygon","points","isClosed","length","Object","freeze","area","forEachSegment","p1","p2","Math","abs","getSignedArea","sign","visitor","i","isPolygon"],"mappings":";;;;;;;;AAAA,SAAQA,MAAR,QAAqB,eAArB;;IAEqBC,O;;;AACnB,mBAAYC,MAAZ,EAAoB;AAAA;;AAClB,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgBH,OAAO,KAAKE,MAAL,CAAY,KAAKA,MAAL,CAAYE,MAAZ,GAAqB,CAAjC,CAAP,EAA4C,KAAKF,MAAL,CAAY,CAAZ,CAA5C,CAAhB;AACAG,WAAOC,MAAP,CAAc,IAAd;AACD,G,CAED;;;;;oCACgB;AACd,UAAIC,OAAO,CAAX;AACA,WAAKC,cAAL,CAAoB,UAACC,EAAD,EAAKC,EAAL,EAAY;AAC9B;AACAH,gBAAQ,CAACE,GAAG,CAAH,IAAQC,GAAG,CAAH,CAAT,KAAmBD,GAAG,CAAH,IAAQC,GAAG,CAAH,CAA3B,CAAR;AACD,OAHD;AAIA,aAAOH,OAAO,CAAd;AACD;;;8BAES;AACR,aAAOI,KAAKC,GAAL,CAAS,KAAKC,aAAL,EAAT,CAAP;AACD;;;0CAEqB;AACpB,aAAOF,KAAKG,IAAL,CAAU,KAAKD,aAAL,EAAV,CAAP;AACD;;;mCAEcE,O,EAAS;AACtB,UAAMX,SAAS,KAAKF,MAAL,CAAYE,MAA3B;;AACA,WAAK,IAAIY,IAAI,CAAb,EAAgBA,IAAIZ,SAAS,CAA7B,EAAgCY,GAAhC,EAAqC;AACnCD,gBAAQ,KAAKb,MAAL,CAAYc,CAAZ,CAAR,EAAwB,KAAKd,MAAL,CAAYc,IAAI,CAAhB,CAAxB,EAA4CA,CAA5C,EAA+CA,IAAI,CAAnD;AAED;;AACD,UAAI,KAAKC,SAAL,IAAkB,CAAC,KAAKd,QAAL,EAAvB,EAAwC;AACtC;AACAY,gBAAQ,KAAKb,MAAL,CAAYE,SAAS,CAArB,CAAR,EAAiC,KAAKF,MAAL,CAAY,CAAZ,CAAjC,EAAiDE,SAAS,CAA1D,EAA6D,CAA7D;AACD;AACF;;;;;;SAnCkBH,O","sourcesContent":["import {equals} from '../lib/common';\n\nexport default class Polygon {\n  constructor(points) {\n    this.points = points;\n    this.isClosed = equals(this.points[this.points.length - 1], this.points[0]);\n    Object.freeze(this);\n  }\n\n  // https://en.wikipedia.org/wiki/Shoelace_formula\n  getSignedArea() {\n    let area = 0;\n    this.forEachSegment((p1, p2) => {\n      // the \"cancelling\" cross-products: (p1.x + p2.x) * (p1.y - p2.y)\n      area += (p1[0] + p2[0]) * (p1[1] - p2[1]);\n    });\n    return area / 2;\n  }\n\n  getArea() {\n    return Math.abs(this.getSignedArea());\n  }\n\n  getWindingDirection() {\n    return Math.sign(this.getSignedArea());\n  }\n\n  forEachSegment(visitor) {\n    const length = this.points.length;\n    for (let i = 0; i < length - 1; i++) {\n      visitor(this.points[i], this.points[i + 1], i, i + 1)\n\n    }\n    if (this.isPolygon && !this.isClosed()) {\n      // Call function with points and indices\n      visitor(this.points[length - 1], this.points[0], length - 1, 0);\n    }\n  }\n}\n"],"file":"polygon.js"}