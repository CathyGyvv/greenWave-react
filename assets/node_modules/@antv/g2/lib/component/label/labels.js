function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/**
 * @fileOverview The Label class
 * @author sima.zhang
 */
var Util = require('../../util');

var Group = require('../../renderer').Group;

var DomUtil = Util.DomUtil;

var Labels =
/*#__PURE__*/
function (_Group) {
  _inheritsLoose(Labels, _Group);

  function Labels() {
    return _Group.apply(this, arguments) || this;
  }

  var _proto = Labels.prototype;

  _proto.getDefaultCfg = function getDefaultCfg() {
    return {
      zIndex: 6,

      /**
       * 显示的文本集合
       * @type {Array}
       */
      items: null,

      /**
       * 文本样式
       * @type {(Object|Function)}
       */
      textStyle: null,

      /**
       * 文本显示格式化回调函数
       * @type {Function}
       */
      formatter: null,

      /**
       * 使用 html 渲染文本
       * @type {(String|Function)}
      */
      htmlTemplate: null,

      /**
       * html 渲染时用的容器的模板，必须存在 class = "g-labels"
       * @type {String}
       */
      _containerTpl: '<div class="g-labels" style="position:absolute;top:0;left:0;"></div>',

      /**
       * html 渲染时单个 label 的模板，必须存在 class = "g-label"，如果 htmlTemplate 为字符串，则使用 htmlTemplate
       * @type {String}
       */
      _itemTpl: '<div class="g-label" style="position:absolute;">{text}</div>'
    };
  };

  _proto._renderUI = function _renderUI() {
    this._drawLabels();
  };

  _proto._drawLabels = function _drawLabels() {
    var self = this;
    var items = self.get('items');
    Util.each(items, function (item, index) {
      self._addLabel(item, index);
    });
  };

  _proto._addLabel = function _addLabel(item, index) {
    var cfg = this._getLabelCfg(item, index);

    return this._createText(cfg);
  };

  _proto._getLabelCfg = function _getLabelCfg(item, index) {
    var textStyle = this.get('textStyle') || {};
    var formatter = this.get('formatter');
    var htmlTemplate = this.get('htmlTemplate');

    if (!Util.isObject(item)) {
      var tmp = item;
      item = {};
      item.text = tmp;
    }

    if (Util.isFunction(textStyle)) {
      textStyle = textStyle(item.text, item, index);
    }

    if (formatter) {
      item.text = formatter(item.text, item, index);
    }

    if (Util.isFunction(htmlTemplate)) {
      item.text = htmlTemplate(item.text, item, index);
    }

    if (Util.isNil(item.text)) {
      item.text = '';
    }

    item.text = item.text + ''; // ? 为什么转换为字符串

    var cfg = Util.mix({}, item, textStyle, {
      x: item.x || 0,
      y: item.y || 0
    });
    return cfg;
  };

  _proto._createText = function _createText(cfg) {
    var htmlTemplate = this.get('htmlTemplate');
    var customDiv = this.get('customDiv');
    var labelShape;

    if (htmlTemplate) {
      if (!customDiv) {
        var containerTpl = this.get('_containerTpl');
        var wrapper = this.get('canvas').get('el').parentNode;
        customDiv = DomUtil.createDom(containerTpl);
        wrapper.style.position = 'relative';
        wrapper.appendChild(customDiv);
        this.set('customDiv', customDiv);
      }

      var node = this._createDom(cfg);

      customDiv.appendChild(node);

      this._setCustomPosition(cfg, node);
    } else {
      var origin = cfg.point;
      labelShape = this.addShape('text');

      this._setLabelAttrs(labelShape, cfg);

      labelShape.setSilent('origin', origin);
      labelShape.name = 'label'; // 用于事件标注

      this.get('appendInfo') && labelShape.setSilent('appendInfo', this.get('appendInfo'));
      return labelShape;
    }
  };

  _proto._setLabelAttrs = function _setLabelAttrs(shape, cfg) {
    var rotate = cfg.rotate; // 防止rotate和point影响文本动画效果

    delete cfg.rotate;
    delete cfg.point;
    shape.attr(cfg);

    if (rotate) {
      shape.transform([['t', -cfg.x, -cfg.y], ['r', rotate], ['t', cfg.x, cfg.y]]);
    }
  };

  _proto._setCustomPosition = function _setCustomPosition(cfg, htmlDom) {
    var textAlign = cfg.textAlign || 'left';
    var top = cfg.y;
    var left = cfg.x;
    var width = DomUtil.getOuterWidth(htmlDom);
    var height = DomUtil.getOuterHeight(htmlDom);
    top = top - height / 2;

    if (textAlign === 'center') {
      left = left - width / 2;
    } else if (textAlign === 'right') {
      left = left - width;
    }

    htmlDom.style.top = parseInt(top, 10) + 'px';
    htmlDom.style.left = parseInt(left, 10) + 'px';
  };

  _proto._createDom = function _createDom(cfg) {
    var itemTpl = this.get('_itemTpl');
    var htmlTemplate = this.get('htmlTemplate');

    if (Util.isString(htmlTemplate)) {
      cfg.text = Util.substitute(htmlTemplate, {
        text: cfg.text
      });
    }

    var str = Util.substitute(itemTpl, {
      text: cfg.text
    });
    return DomUtil.createDom(str);
  };

  _proto.getLabels = function getLabels() {
    var customDiv = this.get('customDiv');

    if (customDiv) {
      return Util.toArray(customDiv.childNodes);
    }

    return this.get('children');
  };

  _proto.addLabel = function addLabel(item) {
    var items = this.get('items');
    var count = items.length;
    items.push(item);
    return this._addLabel(item, count);
  };

  _proto.changeLabel = function changeLabel(oldLabel, newLabel) {
    if (!oldLabel) {
      return;
    }

    var htmlTemplate = this.get('htmlTemplate');
    var index = Util.indexOf(this.getLabels(), oldLabel);

    var cfg = this._getLabelCfg(newLabel, index);

    if (htmlTemplate) {
      var node = this._createDom(cfg);

      oldLabel.innerHTML = node.innerHTML;

      this._setCustomPosition(cfg, oldLabel);
    } else {
      oldLabel._id = newLabel._id;
      oldLabel.resetMatrix();

      this._setLabelAttrs(oldLabel, cfg);
    }
  };

  _proto.clear = function clear() {
    var customDiv = this.get('customDiv');

    if (customDiv) {
      customDiv.innerHTML = '';
    }

    _Group.prototype.clear.call(this);
  };

  _proto.setItems = function setItems(items) {
    this.clear();
    this.set('items', items);

    this._drawLabels();
  };

  _proto.remove = function remove() {
    var customDiv = this.get('customDiv');

    if (customDiv) {
      customDiv.parentNode.removeChild(customDiv);
    }

    _Group.prototype.remove.call(this);
  };

  return Labels;
}(Group);

module.exports = Labels;