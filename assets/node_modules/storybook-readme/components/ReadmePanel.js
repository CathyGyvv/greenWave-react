'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _constants = require('../constants');

var _docsManager = require('../services/docsManager');

var _highlite = require('../services/highlite');

var _highlite2 = _interopRequireDefault(_highlite);

require('../styles/github-markdown-css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var markdownContainerStyle = {
  margin: '16px'
};

var ReadmePanel = function (_React$Component) {
  _inherits(ReadmePanel, _React$Component);

  function ReadmePanel() {
    var _ref;

    _classCallCheck(this, ReadmePanel);

    for (var _len = arguments.length, props = Array(_len), _key = 0; _key < _len; _key++) {
      props[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = ReadmePanel.__proto__ || Object.getPrototypeOf(ReadmePanel)).call.apply(_ref, [this].concat(props)));

    _this.state = {
      docs: {}
    };
    _this.waitForDocs = null;
    _this.ref = null;

    _this.handleRef = function (ref) {
      _this.ref = ref;

      if (_this.ref) {
        _this.ref.parentNode.style.minWidth = '0';

        (0, _highlite2.default)(_this.ref, {
          withJSX: true
        });
      }
    };

    _this.props.channel.on(_constants.ADD_DOC_EVENT, function (_ref2) {
      var kind = _ref2.kind,
          storyName = _ref2.storyName,
          docs = _ref2.docs;

      (0, _docsManager.setDocs)(kind, storyName, docs);

      if (_this.waitForDocs && _this.waitForDocs[0] == kind && _this.waitForDocs[1] == storyName) {
        _this.showDocs(kind, storyName);
        _this.waitForDocs = null;
      }
    });
    return _this;
  }

  _createClass(ReadmePanel, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var onStory = this.props.onStory;

      this.stopListeningOnStory = onStory(function (kind, storyName) {
        _this2.showDocs(kind, storyName);
      });
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this.ref) {
        (0, _highlite2.default)(this.ref, {
          withJSX: true
        });
      }
    }
  }, {
    key: 'showDocs',
    value: function showDocs(kind, storyName) {
      var docs = (0, _docsManager.getDocs)(kind, storyName);

      if (!docs.length) {
        this.waitForDocs = [kind, storyName];
      }

      this.setState({
        docs: docs
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.stopListeningOnStory) {
        this.stopListeningOnStory();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _state$docs = this.state.docs,
          docsAfterPreview = _state$docs.docsAfterPreview,
          docsBeforePreview = _state$docs.docsBeforePreview;


      if (!docsAfterPreview && !docsBeforePreview) {
        return _react2.default.createElement(
          'div',
          { style: { padding: '10px' } },
          _react2.default.createElement(
            'div',
            { className: 'markdown-body' },
            _react2.default.createElement(
              'p',
              null,
              'README.md was not added'
            )
          )
        );
      }

      return _react2.default.createElement(
        'div',
        { style: { padding: '10px', minWidth: '0' }, ref: this.handleRef },
        docsBeforePreview && docsBeforePreview.map(function (doc, index) {
          return _react2.default.createElement('div', {
            key: index,
            className: 'markdown-body',
            dangerouslySetInnerHTML: { __html: doc }
          });
        }),
        docsAfterPreview && docsAfterPreview.map(function (doc, index) {
          return _react2.default.createElement('div', {
            key: index,
            className: 'markdown-body',
            dangerouslySetInnerHTML: { __html: doc }
          });
        })
      );
    }
  }]);

  return ReadmePanel;
}(_react2.default.Component);

exports.default = ReadmePanel;