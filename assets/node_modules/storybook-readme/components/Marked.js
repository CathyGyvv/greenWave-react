'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _marked = require('marked');

var _marked2 = _interopRequireDefault(_marked);

var _highlite = require('../services/highlite');

var _highlite2 = _interopRequireDefault(_highlite);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Marked = function (_React$Component) {
  _inherits(Marked, _React$Component);

  function Marked() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Marked);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Marked.__proto__ || Object.getPrototypeOf(Marked)).call.apply(_ref, [this].concat(args))), _this), _this.ref = null, _this.handleRef = function (ref) {
      _this.ref = ref;

      if (_this.ref) {
        (0, _highlite2.default)(_this.ref, {
          withJSX: true
        });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Marked, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this.ref) {
        (0, _highlite2.default)(this.ref, {
          withJSX: true
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var md = this.props.md;


      return _react2.default.createElement('div', {
        ref: this.handleRef,
        className: 'markdown-body',
        dangerouslySetInnerHTML: { __html: (0, _marked2.default)(md) }
      });
    }
  }]);

  return Marked;
}(_react2.default.Component);

exports.default = Marked;