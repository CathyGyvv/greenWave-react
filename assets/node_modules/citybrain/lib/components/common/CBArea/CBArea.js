'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _dropdown = require('antd/es/dropdown');

var _dropdown2 = _interopRequireDefault(_dropdown);

var _menu = require('antd/es/menu');

var _menu2 = _interopRequireDefault(_menu);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require('antd/es/dropdown/style');

require('antd/es/menu/style');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

require('antd/lib/dropdown/style');

var _CBArea = require('./CBArea.less');

var _CBArea2 = _interopRequireDefault(_CBArea);

var _iconfont = require('../../../public/css/iconfont.css');

var _iconfont2 = _interopRequireDefault(_iconfont);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_CBArea2.default);
var cx2 = _bind2.default.bind(_iconfont2.default);

var CBArea = function (_React$Component) {
  _inherits(CBArea, _React$Component);

  function CBArea(props) {
    _classCallCheck(this, CBArea);

    var _this = _possibleConstructorReturn(this, (CBArea.__proto__ || Object.getPrototypeOf(CBArea)).call(this, props));

    _this.selectArea = function (_ref) {
      var item = _ref.item,
          key = _ref.key;
      var onChange = _this.props.onChange;

      if (onChange && key !== _this.state.selectArea) {
        _this.setState({ selectArea: key });
        onChange(key, item.props.index);
      }
    };

    _this.state = {
      selectArea: _this.props.selectArea
    };
    return _this;
  }

  _createClass(CBArea, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!nextProps.selectArea) {
        if (nextProps.areaList && nextProps.areaList.length > 0) {
          this.setState({ selectArea: nextProps.areaList[0] });
        }
      } else {
        this.setState({ selectArea: nextProps.selectArea });
      }
    }
  }, {
    key: 'renderTrigger',
    value: function renderTrigger() {
      var style1 = cx2({ 'ET-BRAIN': true });
      var style2 = cx('arrow');
      return _react2.default.createElement(
        'div',
        { className: cx('et-area-select') },
        _react2.default.createElement(
          'span',
          null,
          this.state.selectArea
        ),
        _react2.default.createElement(
          'i',
          { className: style1 + '  ' + style2 },
          '\uE645'
        )
      );
    }
  }, {
    key: 'renderMenu',
    value: function renderMenu() {
      var areaList = this.props.areaList;

      var menu = _react2.default.createElement(
        _menu2.default,
        { onClick: this.selectArea, className: cx('et-area-menu') },
        areaList && areaList.length && areaList.map(function (item, index) {
          return _react2.default.createElement(
            _menu2.default.Item,
            { key: item, index: index },
            item
          );
        })
      );
      return menu;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          classname = _props.classname,
          style = _props.style,
          parentId = _props.parentId,
          placement = _props.placement;

      return _react2.default.createElement(
        'div',
        { className: cx(_defineProperty({ 'et-area-list': true }, classname, classname)), style: style },
        _react2.default.createElement(
          _dropdown2.default,
          {
            overlay: this.renderMenu(),
            trigger: ['click'],
            getPopupContainer: function getPopupContainer() {
              return document.getElementById(parentId) || document.body;
            },
            placement: placement || 'bottomLeft'
          },
          this.renderTrigger()
        )
      );
    }
  }]);

  return CBArea;
}(_react2.default.Component);

CBArea.propTypes = {
  areaList: _propTypes.array.isRequired,
  selectArea: _propTypes.string,
  style: _propTypes.object,
  onChange: _propTypes.func,
  classname: _propTypes.string,
  parentId: _propTypes.string,
  placement: _propTypes.string
};
exports.default = CBArea;