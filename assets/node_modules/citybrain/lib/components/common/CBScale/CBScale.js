'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _CBScale = require('./CBScale.less');

var _CBScale2 = _interopRequireDefault(_CBScale);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _CBLang = require('../../lang/CBLang');

var _CBLang2 = _interopRequireDefault(_CBLang);

var _lang = require('./lang.json');

var _lang2 = _interopRequireDefault(_lang);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var lang = (0, _CBLang2.default)([{ langes: _lang2.default }]);
var Lang = lang.messages[lang.currentLang];

var cx = _bind2.default.bind(_CBScale2.default);

var CBScale = function (_React$Component) {
  _inherits(CBScale, _React$Component);

  function CBScale(props) {
    _classCallCheck(this, CBScale);

    var _this = _possibleConstructorReturn(this, (CBScale.__proto__ || Object.getPrototypeOf(CBScale)).call(this, props));

    _this.state = {
      zoom: _this.props.zoom
    };
    return _this;
  }

  _createClass(CBScale, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState({
        zoom: nextProps.zoom
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var meter = Lang.meter,
          kilometer = Lang.kilometer;
      var zoom = this.state.zoom;

      var zoomMap = {
        '16': { text: '200' + meter, len: 106 }, // 200米
        '15': { text: '200' + meter, len: 50 }, // 200米
        '14': { text: '500' + meter, len: 60 }, // 500米
        '13': { text: '1' + kilometer, len: 70 }, // 1公里
        '12': { text: '2' + kilometer, len: 70 }, // 2公里
        '11': { text: '5' + kilometer, len: 78 }, // 5公里
        '10': { text: '10' + kilometer, len: 78 }, // 10公里
        '9': { text: '20' + kilometer, len: 78 }, // 20公里
        '8': { text: '50' + kilometer, len: 97 }, // 50公里
        '7': { text: '100' + kilometer, len: 97 }, // 100公里
        '6': { text: '100' + kilometer, len: 50 // 100公里
        } };
      return _react2.default.createElement(
        'div',
        { className: cx('cb-scale') },
        _react2.default.createElement(
          'span',
          { className: cx('scale-zoom') },
          zoomMap[zoom].text
        ),
        _react2.default.createElement('div', { className: cx('scale-border'), style: { width: zoomMap[zoom].len + 'px' } })
      );
    }
  }]);

  return CBScale;
}(_react2.default.Component);

CBScale.propTypes = {
  zoom: _propTypes2.default.number
};

exports.default = CBScale;