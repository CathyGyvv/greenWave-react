'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Chart = require('bizcharts/lib/components/Chart');

var _Chart2 = _interopRequireDefault(_Chart);

var _Interval = require('bizcharts/lib/components/TypedGeom/Interval');

var _Interval2 = _interopRequireDefault(_Interval);

var _Axis = require('bizcharts/lib/components/Axis');

var _Axis2 = _interopRequireDefault(_Axis);

var _Tooltip = require('bizcharts/lib/components/Tooltip');

var _Tooltip2 = _interopRequireDefault(_Tooltip);

var _Guide = require('bizcharts/lib/components/Guide');

var _Guide2 = _interopRequireDefault(_Guide);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _CBSpeedChart = require('./CBSpeedChart.less');

var _CBSpeedChart2 = _interopRequireDefault(_CBSpeedChart);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_CBSpeedChart2.default);

var Line = _Guide2.default.Line;

var CBSpeedChart = function (_Component) {
  _inherits(CBSpeedChart, _Component);

  function CBSpeedChart() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CBSpeedChart);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CBSpeedChart.__proto__ || Object.getPrototypeOf(CBSpeedChart)).call.apply(_ref, [this].concat(args))), _this), _this.tooltipShow = function (ev) {
      var _this$props = _this.props,
          guideLineText = _this$props.guideLineText,
          legendText = _this$props.legendText,
          thresholdLevel = _this$props.thresholdLevel;

      var title = _this.props.title || '';
      var items = ev.items; // tooltip显示的项
      var origin = items[0]; // 将一条数据改成多条数据
      items.splice(0); // 清空
      items.push({
        name: legendText,
        title: '' + title + origin.title,
        value: Number(origin.value).toFixed(2) + 'km/h'
      });
      if (thresholdLevel) {
        items.push({
          name: guideLineText,
          value: thresholdLevel + 'km/h'
        });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(CBSpeedChart, [{
    key: 'returnThreshold',
    value: function returnThreshold() {
      var _props = this.props,
          dataSource = _props.dataSource,
          thresholdLevel = _props.thresholdLevel;

      var sortDataSource = [];
      if (!dataSource || dataSource.length < 1) {
        return null;
      } else {
        dataSource.forEach(function (item, index) {
          sortDataSource.push(item.speed);
        });
        sortDataSource = sortDataSource.sort(function (a, b) {
          return b - a;
        });
        if (thresholdLevel >= sortDataSource[0]) {
          return sortDataSource[0];
        } else {
          return thresholdLevel;
        }
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var gLabels = document.getElementsByClassName('g-labels')[0];
      if (gLabels) {
        gLabels.style.top = (this.props.height || 250) + 'px';
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var gLabels = document.getElementsByClassName('g-labels')[0];
      if (gLabels) {
        gLabels.style.top = (this.props.height || 250) + 'px';
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props2 = this.props,
          dataSource = _props2.dataSource,
          height = _props2.height,
          guideLineText = _props2.guideLineText,
          legendText = _props2.legendText;

      if (height) {
        height = height + 30;
      };

      if (!dataSource || dataSource.length < 1) {
        return _react2.default.createElement(
          'div',
          { className: cx('empty') },
          '\u6682\u65E0\u6570\u636E'
        );
      }
      var thresholdLevel = this.returnThreshold();
      var xLabelStyle = {
        fill: '#404040', // 文本的颜色
        fontSize: '10', // 文本大小
        htmlTemplate: function htmlTemplate(a, item, index) {
          return '<span class=' + cx('label-box') + ' title=' + a + '>' + a + '</span>';
        }
      };
      var yLabelStyle = {
        textStyle: {
          fontFamily: 'MicrosoftYaHei',
          fontSize: '10px',
          fill: '#9B9B9B'
        }
      };
      var xLineStyle = {
        stroke: 'rgba(255,255,255,0.15)',
        lineDash: [3, 3, 3],
        lineWidth: 1
      };
      var scale = {
        speed: {
          tickCount: 5
        }
      };
      return _react2.default.createElement(
        'div',
        { className: cx('speed-chart-container') },
        _react2.default.createElement(
          'span',
          { className: cx('unit') },
          'km/h'
        ),
        _react2.default.createElement(
          'div',
          { className: cx('legend') },
          _react2.default.createElement(
            'div',
            { className: cx('legend-item') },
            _react2.default.createElement('p', { className: cx('legend-color') }),
            _react2.default.createElement(
              'span',
              { className: cx('legend-text'), title: legendText },
              legendText
            )
          ),
          this.props.thresholdLevel && _react2.default.createElement(
            'div',
            { className: cx('legend-item') },
            _react2.default.createElement('p', { className: cx('legend-line') }),
            _react2.default.createElement(
              'span',
              { className: cx('legend-text'), title: guideLineText },
              guideLineText
            )
          )
        ),
        _react2.default.createElement(
          _Chart2.default,
          { height: height || 180, forceFit: true, data: dataSource, padding: this.props.padding || [10, 10, 30, 35], scale: scale, onTooltipChange: function onTooltipChange(ev) {
              _this2.tooltipShow(ev);
            }, animate: false },
          _react2.default.createElement(_Axis2.default, { name: 'name', label: xLabelStyle, grid: null, line: xLineStyle, tickLine: { length: 0 } }),
          _react2.default.createElement(_Axis2.default, { name: 'speed', grid: null, label: yLabelStyle }),
          _react2.default.createElement(_Tooltip2.default, { crosshairs: { type: 'y' } }),
          _react2.default.createElement(_Interval2.default, { position: 'name*speed',
            size: 2 // 柱状图大小粗细
            , color: ['speed', function (speed) {
              return 'rgba(236, 32, 32, 1)';
            }],
            adjust: [{
              type: 'dodge',
              marginRatio: 1 / 10000 // 柱状图柱子间距，范围0-1
            }]
          }),
          _react2.default.createElement(
            _Guide2.default,
            null,
            _react2.default.createElement(Line, {
              type: 'line',
              top: true,
              start: function start(xScale, yScale) {
                var y = 100 - thresholdLevel / yScale.speed.ticks[yScale.speed.ticks.length - 1] * 100;
                var start = ['0%', y + '%'];
                return start;
              },
              end: function end(xScale, yScale) {
                var y = 100 - thresholdLevel / yScale.speed.ticks[yScale.speed.ticks.length - 1] * 100;
                var end = ['100%', y + '%'];
                return end;
              },
              lineStyle: {
                stroke: 'rgba(126,211,33,1)', // 线的颜色
                lineDash: [0, 1, 1], // 虚线的设置
                lineWidth: 1 // 线的宽度
              }
            })
          )
        )
      );
    }
  }]);

  return CBSpeedChart;
}(_react.Component);

CBSpeedChart.propTypes = {
  thresholdLevel: _propTypes2.default.number,
  dataSource: _propTypes2.default.array,
  height: _propTypes2.default.number
};

exports.default = CBSpeedChart;