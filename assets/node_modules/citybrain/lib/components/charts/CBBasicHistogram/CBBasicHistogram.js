'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Chart = require('bizcharts/lib/components/Chart');

var _Chart2 = _interopRequireDefault(_Chart);

var _Interval = require('bizcharts/lib/components/TypedGeom/Interval');

var _Interval2 = _interopRequireDefault(_Interval);

var _Axis = require('bizcharts/lib/components/Axis');

var _Axis2 = _interopRequireDefault(_Axis);

var _Tooltip = require('bizcharts/lib/components/Tooltip');

var _Tooltip2 = _interopRequireDefault(_Tooltip);

var _Guide = require('bizcharts/lib/components/Guide');

var _Guide2 = _interopRequireDefault(_Guide);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _CBBasicHistogram = require('./CBBasicHistogram.less');

var _CBBasicHistogram2 = _interopRequireDefault(_CBBasicHistogram);

var _dataSet = require('@antv/data-set');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Line = _Guide2.default.Line;

var cx = _bind2.default.bind(_CBBasicHistogram2.default);

/**
 * 返回初始的展示态,{key: bol}
 * key为对应柱子的name， bol为展示态
 * @param {Object} colorMap
 */
var returnInitLegendShow = function returnInitLegendShow(colorMap) {
  var initLegendShow = {};
  var nameArr = [];
  for (var key in colorMap) {
    initLegendShow[key] = true;
    nameArr.push(key);
  }
  return { initLegendShow: initLegendShow, nameArr: nameArr };
};

var CBBasicHistogram = function (_Component) {
  _inherits(CBBasicHistogram, _Component);

  function CBBasicHistogram(props) {
    _classCallCheck(this, CBBasicHistogram);

    var _this = _possibleConstructorReturn(this, (CBBasicHistogram.__proto__ || Object.getPrototypeOf(CBBasicHistogram)).call(this, props));

    _this.returnFields = function () {
      var fields = [];
      var dataSource = _this.props.dataSource[0];
      for (var key in dataSource) {
        if (key !== 'name') {
          fields.push(key);
        }
      }
      return fields;
    };

    _this.returnThresholdLevel = function (data) {
      var thresholdLevel = _this.props.thresholdLevel;

      var sortDataSource = [];
      if (!data || data.length < 1) {
        return null;
      } else {
        data.forEach(function (item, index) {
          for (var i in item) {
            if (i !== 'name') {
              sortDataSource.push(item[i]);
            }
          }
        });
        sortDataSource = sortDataSource.sort(function (a, b) {
          return b - a;
        });
        if (thresholdLevel >= sortDataSource[0]) {
          return {
            tickCount: 6,
            min: 0,
            max: thresholdLevel
          };
        } else {
          return {
            tickCount: 6
          };
        }
      }
    };

    _this.tooltipShow = function (ev) {
      var legendShowName = [];
      var items = ev.items; // tooltip显示的项
      var dataSource = _this.props.dataSource;

      dataSource.forEach(function (item, index) {
        if (_this.state.legendShow[item.name]) {
          legendShowName.push(item.name);
        }
      });
      legendShowName.forEach(function (item, index) {
        items[index].name = item;
      });
    };

    _this.isEmpty = function (index) {
      var isEmpty = true;
      var newLegendShow = Object.assign({}, _this.state.legendShow, _defineProperty({}, index, !_this.state.legendShow[index]));
      for (var key in newLegendShow) {
        if (newLegendShow[key]) {
          isEmpty = false;
        }
      }
      return isEmpty;
    };

    _this.changeDataSource = function (index) {
      var isEmpty = _this.isEmpty(index);
      var newLegendShow = Object.assign({}, _this.state.legendShow, _defineProperty({}, index, !_this.state.legendShow[index]));
      if (!isEmpty) {
        _this.setState({
          legendShow: newLegendShow
        });
      }
    };

    _this.returnDataSource = function (dataSource) {
      var newData = [];
      dataSource.forEach(function (item, index) {
        if (_this.state.legendShow[item.name]) {
          newData.push(item);
        }
      });
      return newData;
    };

    _this.returnColorArr = function () {
      var _this$props = _this.props,
          colorMap = _this$props.colorMap,
          dataSource = _this$props.dataSource;

      var colorArr = [];
      dataSource.forEach(function (item, index) {
        if (_this.state.legendShow[item.name]) {
          colorArr.push(colorMap[item.name]);
        }
      });
      return colorArr;
    };

    _this.hideLine = function () {
      _this.setState({
        lineShow: !_this.state.lineShow
      });
    };

    _this.renderLegend = function () {
      var colorArr = [];
      var colorMap = _this.props.colorMap;

      for (var key in colorMap) {
        colorArr.push({ name: key, color: colorMap[key] });
      }
      return colorArr.map(function (item, index) {
        return _react2.default.createElement(
          'div',
          { className: cx('legend-item'), onClick: function onClick() {
              _this.changeDataSource(item.name);
            }, key: item.name },
          _react2.default.createElement('p', { className: cx('legend-color'), style: { background: '' + (_this.state.legendShow[item.name] ? item.color : 'rgb(191, 191, 191)') } }),
          _react2.default.createElement(
            'span',
            { className: cx('legend-text'), title: item.name },
            item.name
          )
        );
      });
    };

    _this.initLegendShow = returnInitLegendShow(_this.props.colorMap);
    _this.state = {
      legendShow: _this.initLegendShow.initLegendShow,
      lineShow: true
    };
    return _this;
  }

  _createClass(CBBasicHistogram, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setState({
        dataSource: this.props.dataSource
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (JSON.stringify(this.state.dataSource) !== JSON.stringify(nextProps.dataSource)) {
        this.setState({
          dataSource: nextProps.dataSource,
          legendShow: this.initLegendShow.initLegendShow,
          lineShow: true
        });
      }
    }
    /**
     *
     * x轴刻度
     * @memberof EtBasicHistogram
     */

    /**
     * 业务逻辑，比较传入的阈值和数据的最大值，若阈值大于数据的最大值，以阈值作为y轴的最大刻度
     *
     * @memberof EtBasicHistogram
     */

    /**
     * 手动增加tooptip展示项
     *
     * @memberof EtBasicHistogram
     */

    /**
     * 判断柱状图是否全部隐藏，如果是，返回true；否则返回false
     *
     * @memberof EtBasicHistogram
     */

  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          height = _props.height,
          thresholdLevel = _props.thresholdLevel,
          noDataText = _props.noDataText,
          guideLineText = _props.guideLineText,
          unit = _props.unit;
      var dataSource = this.state.dataSource;

      if (!dataSource || dataSource.length < 1) {
        return _react2.default.createElement(
          'div',
          { className: cx('empty') },
          noDataText || '暂无数据'
        );
      }
      var data = this.returnDataSource(dataSource);

      var xLabelStyle = {
        textStyle: {
          fontFamily: 'MicrosoftYaHei',
          fontSize: '10px',
          fill: '#9B9B9B'
        },
        offset: 15
      };
      var yLabelStyle = {
        textStyle: {
          fontFamily: 'MicrosoftYaHei',
          fontSize: '10px',
          fill: '#9B9B9B'
        },
        offset: 8
      };
      var yLineStyle = {
        stroke: 'rgba(255,255,255,0.15)',
        lineWidth: 1
      };
      var xLineStyle = {
        stroke: 'rgba(255,255,255,0.15) ',
        fill: 'rgba(255,255,255,0.15)',
        lineDash: [3, 3, 3],
        lineWidth: 1
      };
      var ds = new _dataSet.DataSet();
      var dv = ds.createView().source(data);
      dv.transform({
        type: 'fold',
        fields: this.returnFields(), // 展开字段集
        key: 'date', // key字段
        value: 'value' // value字段
      });
      var gridLineStyle = {
        lineStyle: {
          stroke: 'rgba(255,255,255,0.15)' // 网格线的颜色
        }
      };
      var scale = {
        'date': {
          type: 'timeCat',
          mask: 'MM/DD'
        },
        'value': this.returnThresholdLevel(data)
      };
      return _react2.default.createElement(
        'div',
        { className: cx('chart-container') },
        _react2.default.createElement(
          'span',
          { className: cx('unit') },
          unit
        ),
        _react2.default.createElement(
          'div',
          { className: cx('legend') },
          this.renderLegend(),
          _react2.default.createElement(
            'div',
            { className: cx('legend-item'), onClick: this.hideLine },
            _react2.default.createElement('p', { className: cx({ 'legend-line': true, 'line-hide': !this.state.lineShow }) }),
            _react2.default.createElement(
              'span',
              { className: cx('legend-text'), title: guideLineText },
              guideLineText
            )
          )
        ),
        _react2.default.createElement(
          _Chart2.default,
          { height: height || 150, data: dv, forceFit: true, padding: this.props.padding || [5, 30, 30, 38], scale: scale, onTooltipChange: function onTooltipChange(ev) {
              _this2.tooltipShow(ev);
            }, animate: false },
          _react2.default.createElement(_Axis2.default, { name: 'date', line: xLineStyle, tickLine: { length: 0 }, label: xLabelStyle }),
          _react2.default.createElement(_Axis2.default, { name: 'value', line: yLineStyle, label: yLabelStyle, grid: gridLineStyle }),
          _react2.default.createElement(_Tooltip2.default, { crosshairs: { type: 'y' } }),
          _react2.default.createElement(_Interval2.default, { position: 'date*value',
            size: 3 // 柱状图大小粗细
            , color: ['name', this.returnColorArr()],
            adjust: [{
              type: 'dodge',
              marginRatio: 0.5 // 柱状图柱子间距，范围0-1
            }],
            tooltip: ['date*value', function (date, value) {
              return {
                title: date,
                value: value.toFixed(2) + unit
              };
            }]
          }),
          this.state.lineShow && _react2.default.createElement(
            _Guide2.default,
            null,
            _react2.default.createElement(Line, {
              type: 'line',
              top: true,
              start: function start(xScale, yScale) {
                var y = 100 - thresholdLevel / yScale.value.ticks[yScale.value.ticks.length - 1] * 100;
                var start = ['0%', y + '%'];
                return start;
              },
              end: function end(xScale, yScale) {
                var y = 100 - thresholdLevel / yScale.value.ticks[yScale.value.ticks.length - 1] * 100;
                var end = ['100%', y + '%'];
                return end;
              },
              lineStyle: {
                stroke: 'rgba(255,0,0,1)', // 线的颜色
                lineDash: [0, 0, 0], // 虚线的设置
                lineWidth: 1 // 线的宽度
              },
              text: {
                position: 'end',
                style: {
                  fill: '#FF3B30',
                  fontSize: '12' // 字体大小
                },
                content: thresholdLevel,
                offsetX: 10,
                offsetY: 7
              }
            })
          )
        )
      );
    }
  }]);

  return CBBasicHistogram;
}(_react.Component);

CBBasicHistogram.propTypes = {
  thresholdLevel: _propTypes2.default.number,
  dataSource: _propTypes2.default.array,
  height: _propTypes2.default.number,
  colorMap: _propTypes2.default.object
};

exports.default = CBBasicHistogram;