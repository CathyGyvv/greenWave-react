'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var zh = require('react-intl/locale-data/zh');
var en = require('react-intl/locale-data/en');

var _require = require('react-intl'),
    addLocaleData = _require.addLocaleData;

require('intl');
addLocaleData([].concat(_toConsumableArray(zh), _toConsumableArray(en)));

var extend = function extend(data) {
  var firstLange = deepcopy(data[0].langes);
  data.forEach(function (item, index) {
    if (index) {
      var langes = item.langes;
      var code = item.appCode;
      var newLanges = deepcopy(langes, code);
      for (var obj in langes) {
        if (firstLange.hasOwnProperty(obj)) {
          firstLange[obj] = Object.assign(firstLange[obj], newLanges[obj]);
        } else {
          firstLange[obj] = {};
          firstLange[obj] = Object.assign(firstLange[obj], newLanges[obj]);
        }
      }
    }
  });
  return firstLange;
};
var deepcopy = function deepcopy(obj, code) {
  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {
    // 检验是否彻底
    return obj;
  }
  var newobj = {};
  for (var attr in obj) {
    var newAttr = attr;
    if (_typeof(obj[attr]) !== 'object') {
      newAttr = code ? code + '_' + attr : attr;
    }
    // 递归 （核心代码
    newobj[newAttr] = deepcopy(obj[attr], code);
  }
  return newobj;
};
var getCookie = function getCookie() {
  var isCookie = false;
  var languages = '';
  if (document.cookie) {
    var aCookie = document.cookie.split(';');
    for (var i = 0; i < aCookie.length; i++) {
      aCookie[i] = aCookie[i].trim();
      var aCrumb = aCookie[i].split('=');
      if (aCrumb[0] === 'et_lang') {
        isCookie = true;
        languages = aCrumb[1];
        break;
      }
    }
  }
  if (!isCookie) {
    languages = navigator.languages ? navigator.languages : navigator.language; // 兼容safari浏览器
  }
  var currentLang = languages === null || languages === undefined || (typeof languages === 'undefined' ? 'undefined' : _typeof(languages)) === 'object' && languages.length <= 0 ? 'en-us' : (typeof languages === 'undefined' ? 'undefined' : _typeof(languages)) === 'object' ? languages[0].toLowerCase() : languages.toLowerCase(); // 浏览器语言(语言开关),全部转成小写字符串

  return currentLang || 'en-us';
};
var getReqCookie = function getReqCookie(req) {
  var currentLang = 'en-us';
  var isCookie = false;
  if (req && req.headers && req.headers.cookie) {
    var aCookie = req.headers['cookie'].split(';');
    for (var i = 0; i < aCookie.length; i++) {
      aCookie[i] = aCookie[i].trim();
      var aCrumb = aCookie[i].split('=');
      if (aCrumb[0] === 'et_lang') {
        isCookie = true;
        currentLang = aCrumb[1];
      }
    }
  }
  if (!isCookie && req && req.headers) {
    currentLang = req.headers['accept-language'] === null || req.headers['accept-language'] === undefined ? 'en-us' : req.headers['accept-language'].indexOf(';') >= 0 ? req.headers['accept-language'].split(';')[0].split(',')[0].toLowerCase() : req.headers['accept-language'].toLowerCase(); // 浏览器语言(语言开关),全部转成小写字符串
  }
  return currentLang;
};
var EtLang = function EtLang(data, req) {
  var currentLang = '';
  if (typeof window === 'undefined') {
    currentLang = getReqCookie(req);
  } else {
    currentLang = getCookie();
  }
  var messages = {};
  if (data && data.length) {
    var i18n = messages = extend(data);
    if (i18n.hasOwnProperty(currentLang)) {// 精确查找
      // currentLang = currentLang
      // messages[currentLang]=i18n[currentLang]
    } else if (currentLang.indexOf('-') < 0) {
      // 能够兼容查找(例如en,zh,兼容找到en-us,zh-cn)
      var seach = false;
      for (var key in i18n) {
        if (key.indexOf('-') >= 0 && key.split('-')[0] === currentLang) {
          seach = true;
          currentLang = key;
          // messages[currentLang]=i18n[currentLang]
          break;
        }
      }
      if (!seach) {
        // 兼容找不到
        currentLang = 'en-us'; // 默认中文
        // messages[currentLang]=i18n[currentLang]
      }
    } else {
      // 不能兼容查找(例如en-us不能兼容查找en)
      currentLang = 'en-us'; // 默认中文
      // messages[currentLang]=i18n[currentLang]
    }
  }
  return { currentLang: currentLang, messages: messages };
};
module.exports = EtLang;