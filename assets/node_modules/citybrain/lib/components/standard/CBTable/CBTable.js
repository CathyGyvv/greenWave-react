'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _table = require('antd/es/table');

var _table2 = _interopRequireDefault(_table);

var _pagination = require('antd/es/pagination');

var _pagination2 = _interopRequireDefault(_pagination);

var _checkbox = require('antd/es/checkbox');

var _checkbox2 = _interopRequireDefault(_checkbox);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require('antd/es/table/style');

require('antd/es/pagination/style');

require('antd/es/checkbox/style');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

require('antd/lib/table/style');

var _CBTable = require('./CBTable.less');

var _CBTable2 = _interopRequireDefault(_CBTable);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_CBTable2.default);

var CBTable = function (_React$Component) {
  _inherits(CBTable, _React$Component);

  function CBTable() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CBTable);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CBTable.__proto__ || Object.getPrototypeOf(CBTable)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      selectedRowKeys: _this.props.table && _this.props.table.rowSelection && _this.props.table.rowSelection.selectedRowKeys ? _this.props.table.rowSelection.selectedRowKeys : [], // 选中项key值数据
      selectedRows: [] // 选中项数据
    }, _this.handleCheckedAll = function (e) {
      var _this$props$table = _this.props.table,
          dataSource = _this$props$table.dataSource,
          rowKey = _this$props$table.rowKey;

      var checkedArr = [];
      for (var i = 0; i < dataSource.length; i++) {
        rowKey ? checkedArr.push(dataSource[i][rowKey]) : checkedArr.push(dataSource[i].key);
      }
      if (e.target.checked) {
        _this.onSelectChange(checkedArr, dataSource);
      } else {
        _this.onSelectChange([], []);
      }
    }, _this.onSelectChange = function (selectedRowKeys, selectedRows) {
      var onChange = _this.props.table.rowSelection.onChange;

      _this.setState({
        selectedRowKeys: selectedRowKeys,
        selectedRows: selectedRows
      });
      onChange && onChange(selectedRowKeys, selectedRows);
    }, _this.handelChangePage = function (page, pageSize) {
      var onChange = _this.props.pagination.onChange;

      _this.setState({
        selectedRowKeys: [],
        selectedRows: []
      });
      onChange && onChange(page, pageSize);
    }, _this.renderShowBatch = function () {
      var _this$props = _this.props,
          _this$props$table2 = _this$props.table,
          dataSource = _this$props$table2.dataSource,
          rowSelection = _this$props$table2.rowSelection,
          selectAllOption = _this$props.selectAllOption,
          checkedAllText = _this$props.checkedAllText;
      var selectedRowKeys = _this.state.selectedRowKeys;

      return _react2.default.createElement(
        'div',
        { className: cx('operation') },
        rowSelection && _react2.default.createElement(
          _checkbox2.default,
          { checked: selectedRowKeys.length >= dataSource.length, onChange: function onChange(e) {
              return _this.handleCheckedAll(e);
            } },
          checkedAllText
        ),
        selectAllOption
      );
    }, _this.renderPagination = function () {
      var pagination = _this.props.pagination;

      return _react2.default.createElement(
        'div',
        { className: cx('cbtable-pagination') },
        _react2.default.createElement(
          'span',
          { className: cx('cbtable-totalTitle') },
          '\u5171\u6709',
          pagination.total,
          '\u6761'
        ),
        _react2.default.createElement(_pagination2.default, _extends({}, pagination, { onChange: _this.handelChangePage }))
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  // 分页页码变化


  _createClass(CBTable, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          pagination = _props.pagination,
          table = _props.table,
          showFooterCheckedAll = _props.showFooterCheckedAll,
          theme = _props.theme,
          showColumnCheckedAll = _props.showColumnCheckedAll;
      var selectedRowKeys = this.state.selectedRowKeys;

      // if (!this.props.table || !this.props.table.columns) {
      //   return null
      // }

      var rowSelection = this.props.table && this.props.table.rowSelection && _extends({}, this.props.table.rowSelection, {
        selectedRowKeys: selectedRowKeys,
        onChange: this.onSelectChange
      });
      return _react2.default.createElement(
        'div',
        { className: cx(_defineProperty({
            'CBTable': true,
            'CBTable_bottom': !pagination && !showFooterCheckedAll,
            'showcolumnCheckedAll': showColumnCheckedAll !== true
          }, 'CBTable_' + theme, theme && theme !== 'traffic_drak')) },
        _react2.default.createElement(_table2.default, _extends({}, this.props.table, {
          pagination: false,
          rowSelection: rowSelection,
          indentSize: 25
        })),
        table.dataSource && table.dataSource.length > 0 && (showFooterCheckedAll !== false || pagination) && _react2.default.createElement(
          'div',
          { className: cx('cbtable-footer') },
          showFooterCheckedAll && this.renderShowBatch(),
          pagination && pagination.total > pagination.pageSize && this.renderPagination()
        )
      );
    }
  }]);

  return CBTable;
}(_react2.default.Component);

CBTable.propTypes = {
  className: _propTypes2.default.string,
  table: _propTypes2.default.object,
  showFooterCheckedAll: _propTypes2.default.bool,
  checkedAllText: _propTypes2.default.string,
  selectAllOption: _propTypes2.default.node,
  pagination: _propTypes2.default.object,
  selectAll: _propTypes2.default.object,
  theme: _propTypes2.default.string,
  showColumnCheckedAll: _propTypes2.default.bool
};

CBTable.defaultProps = {
  showFooterCheckedAll: true,
  showColumnCheckedAll: true
};

exports.default = CBTable;