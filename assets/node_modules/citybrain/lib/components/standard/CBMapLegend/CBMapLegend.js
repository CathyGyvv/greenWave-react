'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _CBMapLegend = require('./CBMapLegend.less');

var _CBMapLegend2 = _interopRequireDefault(_CBMapLegend);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_CBMapLegend2.default);

var CBMapLegend = function (_Component) {
  _inherits(CBMapLegend, _Component);

  function CBMapLegend() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CBMapLegend);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CBMapLegend.__proto__ || Object.getPrototypeOf(CBMapLegend)).call.apply(_ref, [this].concat(args))), _this), _this.getColorList = function () {
      var colorMap = _this.props.colorMap;

      if (!colorMap || colorMap.length < 1) {
        return null;
      };
      var colorList = void 0;
      colorList = colorMap.map(function (item, index) {
        return _react2.default.createElement(
          'li',
          { key: index, className: cx({
              'legend-item': !item.child,
              'legend-item-child': item.child }) },
          item.type === 'color' && _react2.default.createElement('span', { className: cx({ 'legend-color': true }), style: { background: item.color } }),
          item.type === 'child' && _react2.default.createElement(
            'span',
            { className: cx('legend-child') },
            item.child
          ),
          item.type === 'font' && _react2.default.createElement(
            'span',
            { className: cx('legend-icon-box') },
            item.font
          ),
          _react2.default.createElement(
            'p',
            { className: cx('legend-text'), title: item.text },
            item.text
          )
        );
      });
      return colorList;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(CBMapLegend, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'ul',
        { className: cx('legend-container'), style: { width: this.props.width + 'px' } },
        this.props.title && _react2.default.createElement(
          'li',
          { className: cx('legend-item') },
          this.props.title
        ),
        this.getColorList()
      );
    }
  }]);

  return CBMapLegend;
}(_react.Component);

CBMapLegend.propTypes = {
  colorMap: _propTypes2.default.array
};
exports.default = CBMapLegend;