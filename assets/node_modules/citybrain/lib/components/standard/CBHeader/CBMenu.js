'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _menu = require('antd/lib/menu');

var _menu2 = _interopRequireDefault(_menu);

require('antd/lib/menu/style');

var _CBMenu = require('./CBMenu.less');

var _CBMenu2 = _interopRequireDefault(_CBMenu);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_CBMenu2.default);

var Item = _menu2.default.Item;

var CBMenu = function (_React$Component) {
  _inherits(CBMenu, _React$Component);

  function CBMenu() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CBMenu);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CBMenu.__proto__ || Object.getPrototypeOf(CBMenu)).call.apply(_ref, [this].concat(args))), _this), _this.onMenuClick = function (item) {
      if (_this.props.onMenuClick) {
        _this.props.onMenuClick(item);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(CBMenu, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        _menu2.default,
        {
          mode: 'horizontal',
          selectedKeys: this.props.selectedKeys,
          className: cx('menu')
        },
        this.props.menulist.map(function (item, index) {
          return _react2.default.createElement(
            Item,
            { key: index, onClick: function onClick() {
                _this2.onMenuClick(item);
              }, disabled: item.disabled },
            item.name
          );
        })
      );
    }
  }]);

  return CBMenu;
}(_react2.default.Component);

CBMenu.prototypes = {
  menuList: _propTypes2.default.array
};

exports.default = CBMenu;