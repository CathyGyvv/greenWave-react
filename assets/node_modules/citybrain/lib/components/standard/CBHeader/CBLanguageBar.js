'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _badge = require('antd/es/badge');

var _badge2 = _interopRequireDefault(_badge);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require('antd/es/badge/style');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactIntl = require('react-intl');

require('antd/lib/badge/style');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _CBSelectMenu = require('./CBSelectMenu');

var _CBSelectMenu2 = _interopRequireDefault(_CBSelectMenu);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _CBLanguageBar = require('./CBLanguageBar.less');

var _CBLanguageBar2 = _interopRequireDefault(_CBLanguageBar);

var _user = require('./user.png');

var _user2 = _interopRequireDefault(_user);

var _exit = require('./exit.png');

var _exit2 = _interopRequireDefault(_exit);

var _CBLang = require('../../lang/CBLang');

var _CBLang2 = _interopRequireDefault(_CBLang);

var _lang = require('./lang.json');

var _lang2 = _interopRequireDefault(_lang);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var lang = (0, _CBLang2.default)([{ langes: _lang2.default }]);
var language = lang['currentLang'];

var cx = _bind2.default.bind(_CBLanguageBar2.default);
var _window = window,
    location = _window.location;

var CBLanguageBar = function (_React$Component) {
  _inherits(CBLanguageBar, _React$Component);

  function CBLanguageBar(props) {
    _classCallCheck(this, CBLanguageBar);

    var _this = _possibleConstructorReturn(this, (CBLanguageBar.__proto__ || Object.getPrototypeOf(CBLanguageBar)).call(this, props));

    _this.onHelpClick = function (index, item) {
      if (_this.props.onHarrierItemClick) {
        _this.props.onHarrierItemClick(index, item);
      }
    };

    _this.onLanguageClick = function (index, item) {
      document.cookie = 'et_lang=' + item.language + ';path=/';
      location.reload();
    };

    _this.onExit = function (index, item) {
      var length = _this.props.settingList ? _this.props.settingList.length : 0;
      if (index !== 0) {
        if (index === length + 1) {
          _this.props.onExit && _this.props.onExit();
        } else {
          _this.props.onSettingClick && _this.props.onSettingClick(item);
        }
      }
    };

    _this.onMessageClick = function () {
      if (_this.props.onMessageClick) {
        _this.props.onMessageClick();
      }
    };

    _this.state = {};
    return _this;
  }

  _createClass(CBLanguageBar, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          intl = _props.intl,
          visible = _props.visible,
          langBarShow = _props.langBarShow,
          userInfoShow = _props.userInfoShow,
          settingList = _props.settingList;

      langBarShow = langBarShow === undefined ? true : langBarShow;
      userInfoShow = userInfoShow === undefined ? true : userInfoShow;

      var set = settingList || [];

      var userInfo = [{
        name: this.props.userName || '',
        src: _user2.default
      }].concat(_toConsumableArray(set), [{
        name: intl.formatMessage({ id: 'exit' }),
        src: _exit2.default
      }]);
      var languageList = [{
        name: '中文',
        language: 'zh-cn'

      }, {
        name: 'English',
        language: 'en-us'
      }];
      return _react2.default.createElement(
        'div',
        { className: cx('header-right') },
        userInfoShow && _react2.default.createElement(
          'div',
          { className: cx('user-info') },
          _react2.default.createElement(_CBSelectMenu2.default, _extends({}, this.props, {
            linkItem: userInfo,
            type: 'user',
            linkItemClick: this.onExit,
            visible: visible.userVisible,
            changeMenuVisible: function changeMenuVisible(bol) {
              _this2.props.changeMenuVisible('userVisible', bol);
            }
          }))
        ),
        langBarShow && _react2.default.createElement(
          'div',
          { className: cx('language') },
          _react2.default.createElement(_CBSelectMenu2.default, _extends({}, this.props, {
            linkItem: languageList,
            value: language === 'zh-cn' ? 0 : 1,
            autoWidth: true,
            linkItemClick: this.onLanguageClick,
            visible: visible.languageVisible,
            changeMenuVisible: function changeMenuVisible(bol) {
              _this2.props.changeMenuVisible('languageVisible', bol);
            } }))
        ),
        this.props.carrierList && _react2.default.createElement(
          'div',
          { className: cx('help') },
          _react2.default.createElement(_CBSelectMenu2.default, _extends({}, this.props, {
            linkItem: this.props.carrierList,
            linkItemClick: this.onHelpClick,
            visible: visible.helpVisible,
            autoWidth: true,
            changeMenuVisible: function changeMenuVisible(bol) {
              _this2.props.changeMenuVisible('helpVisible', bol);
            } }))
        ),
        this.props.showMessage && _react2.default.createElement(
          'div',
          { className: cx('message') },
          _react2.default.createElement(
            _badge2.default,
            { dot: this.props.dotShow },
            _react2.default.createElement(
              'a',
              { onClick: this.onMessageClick },
              intl.formatMessage({ id: 'message' })
            )
          )
        )
      );
    }
  }]);

  return CBLanguageBar;
}(_react2.default.Component);

exports.default = (0, _reactIntl.injectIntl)(CBLanguageBar);


CBLanguageBar.propTypes = {
  intl: _reactIntl.intlShape.isRequired,
  userName: _propTypes2.default.string,
  settingList: _propTypes2.default.array,
  helpList: _propTypes2.default.array,
  otherList: _propTypes2.default.array,
  monitorList: _propTypes2.default.array,
  helpItemClick: _propTypes2.default.func,
  otherItemClick: _propTypes2.default.func,
  monitorItemClick: _propTypes2.default.func
};