'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _CBSelectMenu = require('./CBSelectMenu.less');

var _CBSelectMenu2 = _interopRequireDefault(_CBSelectMenu);

var _iconfont = require('../../../public/fonts/iconfont/iconfont.css');

var _iconfont2 = _interopRequireDefault(_iconfont);

var _user = require('./user.png');

var _user2 = _interopRequireDefault(_user);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_CBSelectMenu2.default);
var cx2 = _bind2.default.bind(_iconfont2.default);

var CBSelectMenu = function (_React$Component) {
  _inherits(CBSelectMenu, _React$Component);

  function CBSelectMenu(props) {
    _classCallCheck(this, CBSelectMenu);

    var _this = _possibleConstructorReturn(this, (CBSelectMenu.__proto__ || Object.getPrototypeOf(CBSelectMenu)).call(this, props));

    _this.hideMenu = function () {
      _this.props.changeMenuVisible(false);
    };

    _this.linkItemClick = function (index) {
      _this.setState({ visible: false, value: index }, function () {
        _this.props.linkItemClick(index, _this.props.linkItem[index]);
      });
    };

    _this.renderSelectedItem = function () {
      var _this$props = _this.props,
          linkItem = _this$props.linkItem,
          selectedShowText = _this$props.selectedShowText,
          type = _this$props.type;

      var value = _this.props.value ? _this.props.value : _this.state.value;
      if (linkItem && linkItem.length > 0) {
        var activeLinkItem = linkItem[value];
        return _react2.default.createElement(
          'div',
          { className: cx('selected-show-text'), onClick: _this.showMenu },
          type === 'user' && _react2.default.createElement(
            'p',
            { className: cx('select-text') },
            _react2.default.createElement('img', { src: _user2.default, className: cx('user'), alt: '' })
          ),
          !selectedShowText && type !== 'user' ? _react2.default.createElement(
            'p',
            { className: cx('select-text', {
                'selected-name': _this.props.linkItem.length < 2,
                'select-app-text': _this.props.type === 'title'
              }), title: activeLinkItem.name },
            activeLinkItem.name
          ) : null,
          type !== 'user' && selectedShowText ? _react2.default.createElement(
            'p',
            { className: cx('select-text') },
            selectedShowText
          ) : null,
          !(type && type === 'monitor') ? _this.props.linkItem.length > 1 ? _this.state.visible ? _react2.default.createElement(
            'i',
            { className: cx2('ET-BRAIN') + ' ' + cx('icon-show') },
            '\uE611'
          ) : _react2.default.createElement(
            'i',
            { className: cx2('ET-BRAIN') + ' ' + cx('icon-show') },
            '\uE645'
          ) : null : _react2.default.createElement(
            'span',
            { className: cx('icon-show') },
            '(' + (_this.props.count ? '' + (_this.props.count > 99 ? '99+' : '0') : '0') + ')'
          )
        );
      } else {
        return null;
      }
    };

    _this.renderLinkItem = function () {
      var value = _this.props.value ? _this.props.value : _this.state.value;
      var renderLinkItem = _this.props.linkItem && _this.props.linkItem.length > 1 ? _this.props.linkItem.map(function (item, index) {
        if (index !== value || _this.props.type === 'user') {
          return _react2.default.createElement(
            'li',
            {
              key: index,
              className: cx({
                'link-item': true,
                'link-item-app': _this.props.type === 'title'
              }),
              title: item.name,
              onClick: _this.linkItemClick.bind(_this, index)
            },
            item.src && _react2.default.createElement('img', { src: item.src, className: cx('user-img'), alt: '' }),
            _react2.default.createElement(
              'span',
              { className: cx({
                  'monitor-item': _this.props.type === 'monitor'
                }) },
              item.name
            ),
            _this.props.type === 'monitor' && _react2.default.createElement(
              'span',
              { className: cx({
                  principal: true
                }) },
              item.principal
            )
          );
        } else {
          return null;
        }
      }) : null;
      return renderLinkItem;
    };

    _this.showMenu = function (e) {
      e.nativeEvent.stopImmediatePropagation();
      _this.props.changeMenuVisible(!_this.state.visible);
    };

    _this.state = {
      visible: _this.props.visible,
      value: 0
    };
    return _this;
  }

  _createClass(CBSelectMenu, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('click', this.hideMenu, false);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState({ visible: nextProps.visible });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('click', this.hideMenu, false);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        'div',
        {
          className: cx({
            'select-menu': true,
            'select-menu-show': this.state.visible && this.props.linkItem.length > 1,
            'select-menu-blue-show': this.state.visible && this.props.linkItem.length > 1 && this.props.theme === 'blue',
            'select-menu-light-show': this.state.visible && this.props.linkItem.length > 1 && this.props.theme === 'light'
          }),
          ref: function ref(refSelect) {
            _this2.refSelect = refSelect;
          }
        },
        _react2.default.createElement(
          'div',
          { className: cx('selected-link', { 'selected-name': this.props.linkItem.length < 2 }) },
          this.renderSelectedItem()
        ),
        _react2.default.createElement(
          'ul',
          {
            className: cx({
              'user-link-items': this.props.type === 'user',
              'link-items': this.props.type !== 'user',
              'link-items-blue': this.props.theme === 'blue',
              'link-items-light': this.props.theme === 'light',
              'link-items-hide': !this.state.visible,
              'auto-width-items': this.props.autoWidth
            }),
            ref: function ref(refUl) {
              _this2.refUl = refUl;
            }
          },
          this.props.type === 'monitor' && _react2.default.createElement(
            'li',
            { className: cx({
                'link-item': true
              }) },
            _react2.default.createElement(
              'span',
              { className: cx({
                  'monitor-item': this.props.type === 'monitor'
                }) },
              this.props.intl.formatMessage({ id: 'unusual' })
            ),
            _react2.default.createElement(
              'span',
              { className: cx({
                  principal: true
                }) },
              this.props.intl.formatMessage({ id: 'principal' })
            )
          ),
          this.renderLinkItem()
        )
      );
    }
  }]);

  return CBSelectMenu;
}(_react2.default.Component);

exports.default = CBSelectMenu;


CBSelectMenu.propTypes = {
  value: _propTypes2.default.number,
  visible: _propTypes2.default.bool,
  linkItem: _propTypes2.default.array,
  userName: _propTypes2.default.string,
  autoWidth: _propTypes2.default.bool,
  linkItemClick: _propTypes2.default.func,
  selectedShowText: _propTypes2.default.string
};