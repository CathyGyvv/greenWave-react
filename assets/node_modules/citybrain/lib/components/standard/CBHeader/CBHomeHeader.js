'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _CBHeaderRight = require('./CBHeaderRight');

var _CBHeaderRight2 = _interopRequireDefault(_CBHeaderRight);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _CBHomeHeader = require('./CBHomeHeader.less');

var _CBHomeHeader2 = _interopRequireDefault(_CBHomeHeader);

var _logo_en = require('./logo_en.png');

var _logo_en2 = _interopRequireDefault(_logo_en);

var _logo_zh = require('./logo_zh.png');

var _logo_zh2 = _interopRequireDefault(_logo_zh);

var _CBLang = require('../../lang/CBLang');

var _CBLang2 = _interopRequireDefault(_CBLang);

var _lang = require('./lang.json');

var _lang2 = _interopRequireDefault(_lang);

var _CBMenu = require('./CBMenu');

var _CBMenu2 = _interopRequireDefault(_CBMenu);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var lang = (0, _CBLang2.default)([{ langes: _lang2.default }]);
var language = lang['currentLang'];

var cx = _bind2.default.bind(_CBHomeHeader2.default);

var CBHomeHeader = function (_React$Component) {
  _inherits(CBHomeHeader, _React$Component);

  function CBHomeHeader(props) {
    _classCallCheck(this, CBHomeHeader);

    var _this = _possibleConstructorReturn(this, (CBHomeHeader.__proto__ || Object.getPrototypeOf(CBHomeHeader)).call(this, props));

    _this.onProjectClick = function (index, item) {
      if (_this.props.onProjectItemClick) {
        _this.props.onProjectItemClick(index, item);
      }
    };

    _this.onAppClick = function (index, item) {
      if (_this.props.onAppItemClick) {
        _this.props.onAppItemClick(index, item);
      }
    };

    _this.changeMenuVisible = function (key, bol) {
      var visibleObj = {
        'languageVisible': false,
        'userVisible': false,
        'linkVisible': false,
        'helpVisible': false,
        'othersVisible': false,
        'appVisible': false,
        'projectVisible': false,
        'monitorVisible': false
      };
      _this.setState({
        visible: Object.assign({}, visibleObj, _defineProperty({}, key, bol))
      });
    };

    _this.state = {
      selectedLinkItem: 0,
      selectedLanguageItem: 0,
      language: language,
      visible: {
        'languageVisible': false,
        'userVisible': false,
        'linkVisible': false,
        'helpVisible': false,
        'othersVisible': false,
        'appVisible': false,
        'projectVisible': false,
        'monitorVisible': false
      }
    };
    return _this;
  }

  _createClass(CBHomeHeader, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var logoSrc = this.state.language === 'zh-cn' ? _logo_zh2.default : _logo_en2.default;
      var _props = this.props,
          menuList = _props.menuList,
          menu = _props.menu,
          theme = _props.theme;

      var bg = theme === 'light' ? { background: '#1A2B4D' } : {};
      return _react2.default.createElement(
        'div',
        { className: cx('home-head'), style: bg },
        _react2.default.createElement(
          'div',
          { className: cx({
              'home-header': true
            }), style: this.props.style },
          _react2.default.createElement(
            'div',
            { className: cx('header-title') },
            _react2.default.createElement('img', {
              src: logoSrc,
              className: cx({
                'title-logo': true,
                'title-logo-cn': this.state.language === 'zh-cn',
                'title-logo-en': this.state.language === 'en-us'
              }),
              alt: ''
            })
          ),
          _react2.default.createElement('div', { className: cx('head-border') }),
          menuList && menuList.length > 0 && _react2.default.createElement(
            'div',
            { className: cx('header-menu') },
            _react2.default.createElement(_CBMenu2.default, {
              menulist: menuList,
              onMenuClick: this.props.onMenuClick,
              selectedKeys: this.props.selectedKeys || ['0'] })
          ),
          menu && _react2.default.createElement(
            'div',
            { className: cx('header-menu') },
            menu
          ),
          _react2.default.createElement(_CBHeaderRight2.default, _extends({}, this.props, { visible: this.state.visible, changeMenuVisible: function changeMenuVisible(key, bol) {
              _this2.changeMenuVisible(key, bol);
            } }))
        )
      );
    }
  }]);

  return CBHomeHeader;
}(_react2.default.Component);

exports.default = CBHomeHeader;


CBHomeHeader.propTypes = {
  style: _propTypes2.default.object,
  menu: _propTypes2.default.object,
  userName: _propTypes2.default.string,
  helpList: _propTypes2.default.array,
  otherList: _propTypes2.default.array,
  appList: _propTypes2.default.array,
  projectList: _propTypes2.default.array,
  monitorList: _propTypes2.default.array,
  helpItemClick: _propTypes2.default.func,
  otherItemClick: _propTypes2.default.func,
  appItemClick: _propTypes2.default.func,
  projectItemClick: _propTypes2.default.func,
  monitorItemClick: _propTypes2.default.func
};