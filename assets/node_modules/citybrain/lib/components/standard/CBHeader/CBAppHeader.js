'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _CBHeaderRight = require('./CBHeaderRight');

var _CBHeaderRight2 = _interopRequireDefault(_CBHeaderRight);

var _CBMenu = require('./CBMenu');

var _CBMenu2 = _interopRequireDefault(_CBMenu);

var _CBSelectMenu = require('./CBSelectMenu');

var _CBSelectMenu2 = _interopRequireDefault(_CBSelectMenu);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _CBAppHeader = require('./CBAppHeader.less');

var _CBAppHeader2 = _interopRequireDefault(_CBAppHeader);

var _CBLang = require('../../lang/CBLang');

var _CBLang2 = _interopRequireDefault(_CBLang);

var _lang = require('./lang.json');

var _lang2 = _interopRequireDefault(_lang);

var _logo = require('./logo.png');

var _logo2 = _interopRequireDefault(_logo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var lang = (0, _CBLang2.default)([{ langes: _lang2.default }]);

var cx = _bind2.default.bind(_CBAppHeader2.default);
var _window = window,
    location = _window.location;

var CBAppHeader = function (_React$Component) {
  _inherits(CBAppHeader, _React$Component);

  function CBAppHeader(props) {
    _classCallCheck(this, CBAppHeader);

    var _this = _possibleConstructorReturn(this, (CBAppHeader.__proto__ || Object.getPrototypeOf(CBAppHeader)).call(this, props));

    _this.onProjectClick = function (index, item) {
      if (_this.props.onProjectItemClick) {
        _this.props.onProjectItemClick(index, item);
      }
    };

    _this.onAppClick = function (index, item) {
      if (_this.props.onAppItemClick) {
        _this.props.onAppItemClick(index, item);
      }
    };

    _this.changeMenuVisible = function (key, bol) {
      var visibleObj = {
        'languageVisible': false,
        'userVisible': false,
        'linkVisible': false,
        'helpVisible': false,
        'othersVisible': false,
        'appVisible': false,
        'projectVisible': false,
        'monitorVisible': false
      };
      _this.setState({
        visible: Object.assign({}, visibleObj, _defineProperty({}, key, bol))
      });
    };

    _this.returnAppList = function () {
      var appList = [];
      var selectedValue = 0;
      if (_this.props.appList && _this.props.appList.length !== 0) {
        _this.props.appList.forEach(function (item, index) {
          if (item.appId === _this.props.selectedApp) {
            selectedValue = index;
          }
          appList.push(Object.assign({}, item, { name: lang.currentLang === 'zh-cn' ? item.appName : item.appNameEn }));
        });
      }
      return { list: appList, selectedValue: selectedValue };
    };

    _this.logoClick = function () {
      var onLogoClick = _this.props.onLogoClick;

      if (onLogoClick === undefined) {
        location.pathname = '/home';
      } else if (onLogoClick !== undefined && typeof onLogoClick === 'function') {
        onLogoClick();
      }
    };

    _this.state = {
      selectedLinkItem: 0,
      selectedLanguageItem: 0,
      visible: {
        'languageVisible': false,
        'userVisible': false,
        'linkVisible': false,
        'helpVisible': false,
        'othersVisible': false,
        'appVisible': false,
        'projectVisible': false,
        'monitorVisible': false
      }
    };
    return _this;
  }

  _createClass(CBAppHeader, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          projectList = _props.projectList,
          menuList = _props.menuList,
          menu = _props.menu,
          theme = _props.theme,
          onLogoClick = _props.onLogoClick;

      var appList = this.returnAppList();
      var noPoint = onLogoClick === null || onLogoClick === false || onLogoClick && onLogoClick.trim === '';
      return _react2.default.createElement(
        'div',
        { className: cx('app-head', {
            'app-head-light': theme === 'light',
            'app-head-blue': theme === 'blue'
          }) },
        _react2.default.createElement(
          'div',
          { className: cx('app-header'), style: this.props.style },
          !this.props.logoDom && _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              'div',
              { className: cx('header-title') },
              _react2.default.createElement(
                'div',
                { className: cx('app-name') },
                _react2.default.createElement('img', {
                  src: _logo2.default,
                  className: cx('title-logo', {
                    'title-logo-noPoint': noPoint
                  }),
                  onClick: this.logoClick,
                  alt: ''
                }),
                _react2.default.createElement(_CBSelectMenu2.default, _extends({}, this.props, {
                  linkItem: appList.list,
                  value: appList.selectedValue,
                  linkItemClick: this.onAppClick,
                  visible: this.state.visible.appVisible,
                  type: 'title',
                  changeMenuVisible: function changeMenuVisible(bol) {
                    _this2.changeMenuVisible('appVisible', bol);
                  } }))
              )
            ),
            _react2.default.createElement('div', { className: cx('head-border') })
          ),
          this.props.logoDom && _react2.default.createElement(
            'div',
            { className: cx('logoDom') },
            this.props.logoDom
          ),
          projectList && _react2.default.createElement(
            'div',
            { className: cx('project-name') },
            _react2.default.createElement(_CBSelectMenu2.default, _extends({}, this.props, {
              linkItem: projectList,
              linkItemClick: this.onProjectClick,
              visible: this.state.visible.projectVisible,
              changeMenuVisible: function changeMenuVisible(bol) {
                _this2.changeMenuVisible('projectVisible', bol);
              } }))
          ),
          menuList && menuList.length > 0 && _react2.default.createElement(
            'div',
            { className: cx('header-menu') },
            _react2.default.createElement(_CBMenu2.default, { menulist: menuList, onMenuClick: this.props.onMenuClick, selectedKeys: this.props.selectedKeys || ['0'] })
          ),
          menu && _react2.default.createElement(
            'div',
            { className: cx('header-menu') },
            menu
          ),
          _react2.default.createElement(_CBHeaderRight2.default, _extends({}, this.props, { visible: this.state.visible, changeMenuVisible: function changeMenuVisible(key, bol) {
              _this2.changeMenuVisible(key, bol);
            } }, this.props))
        )
      );
    }
  }]);

  return CBAppHeader;
}(_react2.default.Component);

exports.default = CBAppHeader;


CBAppHeader.propTypes = {
  style: _propTypes2.default.object,
  menu: _propTypes2.default.object,
  userName: _propTypes2.default.string,
  helpList: _propTypes2.default.array,
  otherList: _propTypes2.default.array,
  appList: _propTypes2.default.array,
  projectList: _propTypes2.default.array,
  selectedApp: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  appItemClick: _propTypes2.default.func,
  projectItemClick: _propTypes2.default.func,
  monitorItemClick: _propTypes2.default.func
};