'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _button = require('antd/lib/button');

var _button2 = _interopRequireDefault(_button);

var _icon = require('antd/lib/icon');

var _icon2 = _interopRequireDefault(_icon);

require('antd/lib/button/style');

require('antd/lib/icon/style');

var _CBDetail = require('./CBDetail.less');

var _CBDetail2 = _interopRequireDefault(_CBDetail);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_CBDetail2.default);

var CBDetail = function (_React$Component) {
  _inherits(CBDetail, _React$Component);

  function CBDetail(props) {
    _classCallCheck(this, CBDetail);

    var _this = _possibleConstructorReturn(this, (CBDetail.__proto__ || Object.getPrototypeOf(CBDetail)).call(this, props));

    _this.closeDetail = function () {
      _this.setState({
        isClosed: true
      });
    };

    _this.openDetail = function () {
      _this.setState({
        isClosed: false
      });
    };

    _this.onClickConfirm = function () {
      var onConfirmCallback = _this.props.onConfirmCallback;

      _this.setState({
        isClosed: true
      });
      onConfirmCallback();
    };

    _this.onClickCancel = function () {
      var onCancelCallback = _this.props.onCancelCallback;

      _this.setState({
        isClosed: true
      });
      onCancelCallback();
    };

    _this.state = {
      isClosed: true,
      width: _this.props.width || 290
    };
    return _this;
  }

  _createClass(CBDetail, [{
    key: 'render',
    value: function render() {
      var _state = this.state,
          isClosed = _state.isClosed,
          width = _state.width;
      var _props = this.props,
          subtitle = _props.subtitle,
          title = _props.title,
          children = _props.children,
          contentSourse = _props.contentSourse;

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { className: cx('detailChildren'), onClick: this.openDetail },
          children
        ),
        _react2.default.createElement(
          'div',
          { className: cx('detailDark'), style: { opacity: isClosed ? '0' : '1', zIndex: isClosed ? -1 : 1002 } },
          _react2.default.createElement(
            'div',
            { className: cx('detailContainer'), style: { width: width, right: isClosed ? '-' + (width + 40) + 'px' : 0 } },
            _react2.default.createElement(
              'div',
              { className: cx('detailTitle') },
              _react2.default.createElement(
                'span',
                null,
                _react2.default.createElement(
                  'span',
                  { className: cx('titleContent', 'titleColor') },
                  title
                ),
                subtitle && _react2.default.createElement(
                  'span',
                  null,
                  _react2.default.createElement(_icon2.default, { className: cx('titleIcon'), type: 'right' }),
                  _react2.default.createElement(
                    'span',
                    { className: cx('titleContent') },
                    subtitle
                  )
                )
              ),
              _react2.default.createElement(_icon2.default, { className: cx('closeBtn'), type: 'close', onClick: this.closeDetail })
            ),
            _react2.default.createElement(
              'div',
              { className: cx('detailContent') },
              contentSourse
            ),
            _react2.default.createElement(
              'div',
              { className: cx('detailFooter') },
              _react2.default.createElement(
                _button2.default,
                { className: cx('confirmBtn'), onClick: this.onClickConfirm },
                '\u786E\u5B9A'
              ),
              _react2.default.createElement(
                _button2.default,
                { className: cx('cancelBtn'), onClick: this.onClickCancel },
                '\u53D6\u6D88'
              )
            )
          )
        )
      );
    }
  }]);

  return CBDetail;
}(_react2.default.Component);

CBDetail.propTypes = {
  width: _propTypes.number,
  title: _propTypes.string.isRequired,
  subtitle: _propTypes.string,
  contentSourse: _propTypes.PropTypes.oneOfType([_propTypes.PropTypes.string, _propTypes.PropTypes.object]),
  onConfirmCallback: _propTypes.func.isRequired,
  onCancelCallback: _propTypes.func.isRequired
};

exports.default = CBDetail;