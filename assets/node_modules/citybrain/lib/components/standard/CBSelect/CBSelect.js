'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _select = require('antd/es/select');

var _select2 = _interopRequireDefault(_select);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require('antd/es/select/style');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

require('antd/lib/select/style');

var _CBSelect = require('./CBSelect.less');

var _CBSelect2 = _interopRequireDefault(_CBSelect);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_CBSelect2.default);
var Option = _select2.default.Option;

var CBSelect = function (_React$Component) {
  _inherits(CBSelect, _React$Component);

  function CBSelect(props) {
    _classCallCheck(this, CBSelect);

    var _this = _possibleConstructorReturn(this, (CBSelect.__proto__ || Object.getPrototypeOf(CBSelect)).call(this, props));

    _this.optionSelected = function (item) {
      _this.setState({
        optionDefault: item
      });
    };

    _this.state = {
      optionDefault: _this.props.defaultValue || _this.props.children[0]
    };
    return _this;
  }

  _createClass(CBSelect, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          type = _props.type,
          defaultValue = _props.defaultValue,
          size = _props.size,
          onBlur = _props.onBlur,
          onFocus = _props.onFocus,
          onChange = _props.onChange,
          disabled = _props.disabled;
      var optionDefault = this.state.optionDefault;

      return _react2.default.createElement(
        'div',
        { className: cx({ 'cbSelect': true }) },
        type !== 'error' ? _react2.default.createElement(
          _select2.default,
          {
            type: type,
            defaultValue: defaultValue || children[0],
            size: size,
            onBlur: onBlur,
            onFocus: onFocus,
            onChange: onChange,
            disabled: disabled,
            dropdownClassName: size === 'large' ? 'selectDown selectLarge' : 'selectDown'
          },
          children.map(function (item, index) {
            return _react2.default.createElement(
              Option,
              { key: index, className: item === optionDefault ? cx('optionSelected') : '', onClick: function onClick() {
                  return _this2.optionSelected(item);
                } },
              item
            );
          })
        ) : _react2.default.createElement(
          'div',
          { className: cx({ 'selecterror': true, 'selecterrorLarge': size === 'large' }) },
          _react2.default.createElement('i', null),
          'error'
        )
      );
    }
  }]);

  return CBSelect;
}(_react2.default.Component);

CBSelect.propTypes = {
  children: _propTypes.array,
  type: _propTypes.string,
  defaultValue: _propTypes.string,
  size: _propTypes.string,
  onBlur: _propTypes.func,
  onFocus: _propTypes.func,
  onChange: _propTypes.func,
  disabled: _propTypes.bool
};
exports.default = CBSelect;