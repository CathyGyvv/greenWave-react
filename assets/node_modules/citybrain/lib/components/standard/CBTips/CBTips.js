'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _icon = require('antd/lib/icon');

var _icon2 = _interopRequireDefault(_icon);

var _notification = require('antd/lib/notification');

var _notification2 = _interopRequireDefault(_notification);

require('antd/lib/icon/style');

require('antd/lib/notification/style');

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _CBTips = require('./CBTips.less');

var _CBTips2 = _interopRequireDefault(_CBTips);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var cx = _bind2.default.bind(_CBTips2.default);

var CBTips = function () {
  function CBTips() {
    var _this = this;

    _classCallCheck(this, CBTips);

    this.instance = null;
    this.max = 5;
    this.currentLength = 0;
    this.displayKey = [];
    this.readyArr = [];
    this.timer = 0;

    this.addItem = function (props) {
      if (_this.currentLength < _this.max) {
        _this.notice(props);
        _this.currentLength++;
      } else {
        _this.readyArr.push(props);
      }
    };

    this.updateMax = function (value) {
      _this.max = parseInt(value, 10) > 0 ? parseInt(value, 10) : 5;
      while (_this.max - _this.currentLength > 0 && _this.readyArr.length > 0) {
        _this.notice(_this.readyArr.shift());
        _this.currentLength++;
      }
    };

    this.removeAll = function () {
      _this.displayKey.forEach(function (item) {
        _notification2.default.close(item);
      });
      _this.displayKey = [];
      _this.readyArr = [];
      _this.currentLength = 0;
      _this.max = 5;
      _this.timer = 0;
      _this.instance = null;
    };

    this.notice = function (props) {
      var type = props.type,
          displayTime = props.displayTime,
          content = props.content,
          detailBtn = props.detailBtn,
          callback = props.callback;

      var typeArr = ['info', 'warning', 'success', 'error'];
      var backgroundColor = ['#4B526A', '#FFA94D', '#577B57', '#F16363'];
      var iconArr = ['info-circle-o', 'exclamation-circle-o', 'down-circle-o', 'close-circle-o'];
      var alertType = typeArr.indexOf(type) === -1 ? 'info' : type;
      var index = typeArr.indexOf(alertType);
      var time = displayTime <= 0 ? 0 : displayTime;
      var key = 'open' + Date.now() + Math.floor(Math.random() * 100);
      _this.displayKey.push(key);
      var closeHandler = function closeHandler() {
        _this.displayKey.forEach(function (item, index) {
          if (key === item) {
            _this.displayKey.splice(index, 1);
          }
        });
        _this.currentLength--;
        if (_this.readyArr.length > 0 && _this.currentLength < _this.max) {
          _this.notice(_this.readyArr.shift());
          _this.currentLength++;
        }
      };
      var detailClick = function detailClick() {
        callback();
        close();
      };
      var close = function close() {
        var self = _this;
        if (!_this.timer) {
          closeHandler();
          _notification2.default.close(key);
          _this.timer = setTimeout(function () {
            self.timer = null;
          }, 300);
        }
      };
      var title = _react2.default.createElement(
        'span',
        null,
        props.title,
        _react2.default.createElement(
          'span',
          { className: cx('notice-close'), onClick: close },
          _react2.default.createElement(_icon2.default, { type: 'close' })
        )
      );
      var btn = displayTime <= 0 && detailBtn && _react2.default.createElement(
        'div',
        { className: cx('alert-detail'), onClick: detailClick },
        '\u7ACB\u5373\u67E5\u770B>>'
      );
      var args = {
        btn: btn,
        key: key,
        onClose: closeHandler,
        duration: time,
        message: title,
        description: content,
        style: {
          top: '10px',
          background: backgroundColor[index]
        },
        icon: _react2.default.createElement(_icon2.default, { type: iconArr[index], style: { color: '#fff' } })
      };
      _notification2.default.open(args);
    };
  }

  _createClass(CBTips, null, [{
    key: 'getInstance',
    value: function getInstance() {
      if (!this.instance) {
        this.instance = new CBTips();
      }
      return this.instance;
    }
  }]);

  return CBTips;
}();

var cbtips = CBTips.getInstance();
exports.default = cbtips;