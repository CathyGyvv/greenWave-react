'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _CBAutoLoader = require('./CBAutoLoader.less');

var _CBAutoLoader2 = _interopRequireDefault(_CBAutoLoader);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _icon = require('antd/lib/icon');

var _icon2 = _interopRequireDefault(_icon);

require('antd/lib/icon/style');

var _loadFinish = require('../../../public/svg/loadFinish.png');

var _loadFinish2 = _interopRequireDefault(_loadFinish);

var _CBLang = require('../../lang/CBLang');

var _CBLang2 = _interopRequireDefault(_CBLang);

var _lang = require('./lang.json');

var _lang2 = _interopRequireDefault(_lang);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lang = (0, _CBLang2.default)([{ langes: _lang2.default }]);
var Lang = lang.messages[lang.currentLang];

var cx = _bind2.default.bind(_CBAutoLoader2.default);

function throttle(func, delay) {
  var timer = null;
  return function () {
    var context = this;
    var args = arguments;
    if (!timer) {
      timer = setTimeout(function () {
        func.apply(context, args);
        timer = null;
      }, delay);
    }
  };
}

// 记录上次滚动的位置
var lastScrollTop = 0;

function AutoLoader(_ref) {
  var _ref$height = _ref.height,
      height = _ref$height === undefined ? 300 : _ref$height,
      _ref$threhold = _ref.threhold,
      threhold = _ref$threhold === undefined ? 20 : _ref$threhold,
      _ref$loading = _ref.loading,
      loading = _ref$loading === undefined ? false : _ref$loading,
      _ref$hasMore = _ref.hasMore,
      hasMore = _ref$hasMore === undefined ? true : _ref$hasMore,
      icon = _ref.icon,
      callback = _ref.callback,
      children = _ref.children;

  function autoloaderScroll(scrollEle) {
    scrollEle && scrollEle.addEventListener('scroll', throttle(function () {
      if (scrollEle.scrollHeight - scrollEle.offsetHeight - scrollEle.scrollTop <= threhold && lastScrollTop < scrollEle.scrollTop) {
        callback();
        lastScrollTop = scrollEle.scrollTop;
      }
      if (scrollEle.scrollTop < lastScrollTop) {
        lastScrollTop = scrollEle.scrollTop;
      }
    }, 200));
  }
  return _react2.default.createElement(
    'div',
    { className: cx('autoloader'), style: { height: height }, ref: autoloaderScroll },
    children,
    loading && hasMore ? _react2.default.createElement(
      'div',
      { className: cx('loading') },
      !icon ? _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_icon2.default, { type: 'loading', className: cx('icon') }),
        _react2.default.createElement(
          'span',
          { className: cx('icon-text') },
          Lang['loading'],
          '...'
        )
      ) : icon
    ) : null,
    !hasMore ? _react2.default.createElement(
      'div',
      { className: cx('loading') },
      !icon ? _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement('img', { className: cx('icon'), src: _loadFinish2.default }),
        _react2.default.createElement(
          'span',
          { className: cx('icon-text') },
          Lang['nomore']
        )
      ) : icon
    ) : null
  );
}

AutoLoader.propTypes = {
  height: _propTypes2.default.node,
  threhold: _propTypes2.default.number,
  loading: _propTypes2.default.bool,
  hasMore: _propTypes2.default.bool,
  icon: _propTypes2.default.element,
  callback: _propTypes2.default.func.isRequired
};

exports.default = AutoLoader;