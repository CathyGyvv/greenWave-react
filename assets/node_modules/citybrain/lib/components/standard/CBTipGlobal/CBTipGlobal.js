'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _alert = require('antd/lib/alert');

var _alert2 = _interopRequireDefault(_alert);

require('antd/lib/alert/style');

require('./CBTipGlobal.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CBTipGlobal = function () {
  function CBTipGlobal() {
    _classCallCheck(this, CBTipGlobal);

    this.instance = null;

    this.show = function (content) {
      // const iconType = 'exclamation-circle-o'
      var container = null;
      if (document.getElementsByClassName('cb-tipglobal').length) {
        container = document.getElementsByClassName('cb-tipglobal')[0];
      } else {
        container = document.createElement('div');
        container.className = 'cb-tipglobal';
        document.body.appendChild(container);
      }
      var alertEl = _react2.default.createElement(_alert2.default, {
        message: content,
        type: 'warning',
        showIcon: true
        // iconType={iconType}  //
        , banner: true,
        closable: true,
        onClose: function onClose() {
          _reactDom2.default.unmountComponentAtNode(container);
        }
      });
      _reactDom2.default.render(alertEl, container);
    };
  }

  _createClass(CBTipGlobal, null, [{
    key: 'getInstance',
    value: function getInstance() {
      if (!this.instance) {
        this.instance = new CBTipGlobal();
      }
      return this.instance;
    }
  }]);

  return CBTipGlobal;
}();

var cbTipGlobal = CBTipGlobal.getInstance();
exports.default = cbTipGlobal;