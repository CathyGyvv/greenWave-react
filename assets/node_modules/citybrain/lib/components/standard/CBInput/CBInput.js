'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _input = require('antd/lib/input');

var _input2 = _interopRequireDefault(_input);

require('antd/lib/input/style');

var _CBInput = require('./CBInput.less');

var _CBInput2 = _interopRequireDefault(_CBInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_CBInput2.default);

var CBInput = function (_React$Component) {
  _inherits(CBInput, _React$Component);

  function CBInput(props) {
    _classCallCheck(this, CBInput);

    var _this = _possibleConstructorReturn(this, (CBInput.__proto__ || Object.getPrototypeOf(CBInput)).call(this, props));

    _this.onErrorFocus = function (e) {
      e.target.value = _this.state.inputText;
      _this.setState({
        isError: false
      });
    };

    _this.onInputChange = function (e) {
      var onChangeCallBack = _this.props.onChangeCallBack;

      onChangeCallBack && onChangeCallBack(e.target.value);
      _this.setState({
        inputText: e.target.value
      });
      _this.onInputTextWidth();
    };

    _this.onInputPressEnter = function (e) {
      var onPressEnterCallBack = _this.props.onPressEnterCallBack;

      onPressEnterCallBack && onPressEnterCallBack(e.target.value);
    };

    _this.onInputTextPre = function () {
      var inputText = _this.state.inputText;
      var size = _this.props.size;

      return _react2.default.createElement(
        'pre',
        {
          ref: function ref(text) {
            _this.textPre = text;
          },
          className: cx({ 'inputPre': true, 'inputFontSize': size === 'large' })
        },
        inputText
      );
    };

    _this.onInputTextWidth = function () {
      var id = _this.props.id;

      var textWidth = _this.textPre.clientWidth;
      var currentInput = document.getElementById(id);
      var inputWidth = currentInput.clientWidth - 2;
      if (textWidth > inputWidth) {
        _this.setState({
          isTextOverflow: true
        });
      } else {
        _this.setState({
          isTextOverflow: false
        });
      }
    };

    _this.componentDidMount = function () {
      _this.onInputTextWidth();
    };

    _this.state = {
      isError: _this.props.type === 'error' || false,
      inputText: _this.props.defaultValue || '',
      isTextOverflow: false
    };
    return _this;
  }

  _createClass(CBInput, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          type = _props.type,
          size = _props.size,
          id = _props.id,
          placeholder = _props.placeholder,
          defaultValue = _props.defaultValue,
          disabled = _props.disabled,
          errorInfo = _props.errorInfo,
          theme = _props.theme;
      var _state = this.state,
          isError = _state.isError,
          inputText = _state.inputText,
          isTextOverflow = _state.isTextOverflow;

      return _react2.default.createElement(
        'div',
        { className: cx('inputContainer', { 'inputContainer-light': theme === 'light' }) },
        type && type === 'normal' ? _react2.default.createElement(_input2.default, {
          size: size,
          disabled: disabled,
          id: id,
          placeholder: placeholder,
          defaultValue: defaultValue,
          onChange: this.onInputChange,
          onPressEnter: this.onInputPressEnter
        }) : type === 'error' && _react2.default.createElement(_input2.default, {
          className: cx({ 'errorInput': isError }),
          size: size,
          id: id,
          defaultValue: errorInfo,
          onFocus: this.onErrorFocus,
          onChange: this.onInputChange,
          onPressEnter: this.onInputPressEnter
        }),
        this.onInputTextPre(),
        isTextOverflow && _react2.default.createElement(
          'div',
          { className: cx({ 'InputPopover': true, 'InputPopoverFont': size === 'large' }) },
          inputText
        )
      );
    }
  }]);

  return CBInput;
}(_react2.default.Component);

CBInput.propTypes = {
  type: _propTypes.string.isRequired,
  size: _propTypes.string.isRequired,
  id: _propTypes.string.isRequired,
  placeholder: _propTypes.string,
  defaultValue: _propTypes.string,
  disabled: _propTypes.bool,
  errorInfo: _propTypes.string,
  onPressEnterCallBack: _propTypes.func,
  onChangeCallBack: _propTypes.func
};

exports.default = CBInput;