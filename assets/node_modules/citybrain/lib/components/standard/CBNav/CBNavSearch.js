'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _popover = require('antd/lib/popover');

var _popover2 = _interopRequireDefault(_popover);

var _icon = require('antd/lib/icon');

var _icon2 = _interopRequireDefault(_icon);

require('antd/lib/icon/style');

require('antd/lib/popover/style');

var _CBNav = require('./CBNav.less');

var _CBNav2 = _interopRequireDefault(_CBNav);

var _CBSearch = require('../../common/CBSearch');

var _CBSearch2 = _interopRequireDefault(_CBSearch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cx = _bind2.default.bind(_CBNav2.default);

function CBNavSearch(_ref) {
  var collapsed = _ref.collapsed,
      searchPlaceholder = _ref.searchPlaceholder,
      searchKey = _ref.searchKey,
      matchedList = _ref.matchedList,
      style = _ref.style,
      onChangeCallBack = _ref.onChangeCallBack,
      onSearchCallBack = _ref.onSearchCallBack;

  var popoverSearchContent = _react2.default.createElement(_CBSearch2.default, {
    placeHolder: searchPlaceholder,
    searchKey: searchKey,
    matchedList: matchedList,
    style: style,
    onChange: onChangeCallBack,
    onSearch: onSearchCallBack
  });

  return _react2.default.createElement(
    'div',
    { className: cx('navSearch') },
    collapsed ? _react2.default.createElement(
      _popover2.default,
      {
        overlayStyle: { minWidth: 150, paddingLeft: '6px' },
        overlayClassName: cx('menuPopover'),
        placement: 'right',
        content: popoverSearchContent },
      _react2.default.createElement(
        'div',
        { className: cx('navFilter') },
        _react2.default.createElement(_icon2.default, { type: 'right' })
      )
    ) : _react2.default.createElement(_CBSearch2.default, {
      size: 'small',
      placeHolder: searchPlaceholder,
      searchKey: searchKey,
      matchedList: matchedList,
      style: style,
      onChange: onChangeCallBack,
      onSearch: onSearchCallBack
    })
  );
}

CBNavSearch.propTypes = {
  searchPlaceholder: _propTypes.string,
  searchKey: _propTypes.string,
  matchedList: _propTypes.array,
  style: _propTypes.object,
  collapsed: _propTypes.bool.isRequired,
  onChangeCallBack: _propTypes.func.isRequired,
  onSearchCallBack: _propTypes.func.isRequired
};

exports.default = CBNavSearch;