'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _select = require('antd/lib/select');

var _select2 = _interopRequireDefault(_select);

var _popover = require('antd/lib/popover');

var _popover2 = _interopRequireDefault(_popover);

var _icon = require('antd/lib/icon');

var _icon2 = _interopRequireDefault(_icon);

require('antd/lib/icon/style');

require('antd/lib/select/style');

require('antd/lib/popover/style');

var _CBNav = require('./CBNav.less');

var _CBNav2 = _interopRequireDefault(_CBNav);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_CBNav2.default);
var Option = _select2.default.Option;

var CBNavSelect = function (_React$Component) {
  _inherits(CBNavSelect, _React$Component);

  function CBNavSelect(props) {
    _classCallCheck(this, CBNavSelect);

    var _this = _possibleConstructorReturn(this, (CBNavSelect.__proto__ || Object.getPrototypeOf(CBNavSelect)).call(this, props));

    _this.onNavSelect = function (selectItem) {
      var onSelectCallBack = _this.props.onSelectCallBack;

      _this.setState({
        selectChangeValue: selectItem.value
      });
      var selectValue = {
        value: selectItem.value,
        text: selectItem.text
      };
      onSelectCallBack(selectValue);
    };

    _this.renderSelectOption = function () {
      var selectChangeValue = _this.state.selectChangeValue;
      var _this$props = _this.props,
          selectSource = _this$props.selectSource,
          collapsed = _this$props.collapsed;

      var selectOptions = selectSource && selectSource.length > 1 && selectSource.map(function (selectItem, index) {
        return collapsed ? _react2.default.createElement(
          'li',
          { className: cx({ 'navCollapsedSelect': true, 'selected': selectChangeValue === selectItem.value }), onClick: function onClick() {
              return _this.onNavSelect(selectItem);
            }, key: selectItem.key },
          selectItem.text
        ) : _react2.default.createElement(
          Option,
          { key: selectItem.key, value: selectItem.value },
          selectItem.text
        );
      });
      return selectOptions;
    };

    _this.state = {
      selectChangeValue: _this.props.selectDefaultKey || null
    };
    return _this;
  }

  _createClass(CBNavSelect, [{
    key: 'onNavSelectChange',
    value: function onNavSelectChange(value) {
      var onSelectCallBack = this.props.onSelectCallBack;

      this.setState({
        selectChangeValue: value.key
      });
      var selectValue = {
        value: value.key,
        text: value.label
      };
      onSelectCallBack(selectValue);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          selectPlaceholder = _props.selectPlaceholder,
          collapsed = _props.collapsed;
      var selectChangeValue = this.state.selectChangeValue;

      var popoverContent = _react2.default.createElement(
        'ul',
        { className: cx('navPopoverUl') },
        this.renderSelectOption()
      );
      return _react2.default.createElement(
        'div',
        null,
        collapsed ? _react2.default.createElement(
          _popover2.default,
          {
            overlayStyle: { minWidth: 150, paddingLeft: '6px' },
            overlayClassName: cx('menuPopover'),
            placement: 'right',
            content: popoverContent
          },
          _react2.default.createElement(
            'div',
            { className: cx('navFilter') },
            _react2.default.createElement(_icon2.default, { type: 'right' })
          )
        ) : selectChangeValue ? _react2.default.createElement(
          _select2.default,
          {
            labelInValue: true,
            defaultValue: { key: selectChangeValue },
            dropdownClassName: cx('navSelect'),
            dropdownStyle: { borderRadius: '0' },
            onChange: function onChange(value) {
              return _this2.onNavSelectChange(value);
            }
          },
          this.renderSelectOption()
        ) : _react2.default.createElement(
          _select2.default,
          {
            labelInValue: true,
            dropdownClassName: cx('navSelect'),
            dropdownStyle: { borderRadius: '0' },
            placeholder: selectPlaceholder && selectPlaceholder,
            onChange: function onChange(value) {
              return _this2.onNavSelectChange(value);
            }
          },
          this.renderSelectOption()
        )
      );
    }
  }]);

  return CBNavSelect;
}(_react2.default.Component);

CBNavSelect.propTypes = {
  collapsed: _propTypes.bool.isRequired,
  selectDefaultValue: _propTypes.string,
  selectPlaceholder: _propTypes.string,
  onSelectCallBack: _propTypes.func.isRequired
};

exports.default = CBNavSelect;