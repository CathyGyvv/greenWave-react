'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _menu = require('antd/lib/menu');

var _menu2 = _interopRequireDefault(_menu);

var _icon = require('antd/lib/icon');

var _icon2 = _interopRequireDefault(_icon);

require('antd/lib/icon/style');

require('antd/lib/menu/style');

var _CBNav = require('./CBNav.less');

var _CBNav2 = _interopRequireDefault(_CBNav);

var _CBNavSelect = require('./CBNavSelect');

var _CBNavSelect2 = _interopRequireDefault(_CBNavSelect);

var _CBNavSearch = require('./CBNavSearch');

var _CBNavSearch2 = _interopRequireDefault(_CBNavSearch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_CBNav2.default);
var SubMenu = _menu2.default.SubMenu;

var CBNav = function (_React$Component) {
  _inherits(CBNav, _React$Component);

  function CBNav(props) {
    _classCallCheck(this, CBNav);

    var _this = _possibleConstructorReturn(this, (CBNav.__proto__ || Object.getPrototypeOf(CBNav)).call(this, props));

    _this.toggleCollapsed = function () {
      _this.setState({
        collapsed: !_this.state.collapsed
      });
    };

    _this.handleMenuChange = function (value) {
      var onMenuClickCallBack = _this.props.onMenuClickCallBack;

      onMenuClickCallBack(value.key);
      _this.setState({
        selectedKeys: value.key
      });
    };

    _this.onOpenChange = function (value) {
      _this.setState({
        openKeys: value
      });
    };

    _this.renderNav = function (navSource) {
      var type = _this.props.type;

      var IS_LIGHT = type !== 'light';
      var renderNavItem = navSource && navSource.length > 0 && navSource.map(function (navMenu, index) {
        if (navMenu.children && navMenu.children.length > 0) {
          return _react2.default.createElement(
            SubMenu,
            {
              className: cx({ 'subMenu': IS_LIGHT }),
              key: navMenu.key,
              disabled: navMenu.disabled && navMenu.disabled,
              title: _react2.default.createElement(
                'span',
                null,
                navMenu.icon && _react2.default.createElement(_icon2.default, { type: navMenu.icon }),
                _react2.default.createElement(
                  'span',
                  null,
                  navMenu.title
                )
              )
            },
            _this.renderNav(navMenu.children)
          );
        } else {
          return _react2.default.createElement(
            _menu2.default.Item,
            { key: navMenu.key, disabled: navMenu.disabled && navMenu.disabled },
            navMenu.icon && _react2.default.createElement(_icon2.default, { type: navMenu.icon }),
            _react2.default.createElement(
              'span',
              null,
              navMenu.title
            )
          );
        }
      });
      return renderNavItem;
    };

    _this.state = {
      collapsed: _this.props.collapsed || false,
      navWidth: _this.props.navWidth || 180,
      menuInlineIndent: _this.props.menuInlineIndent || 18,
      selectedKeys: _this.props.selectedKeys || _this.props.defaultSelectedKeys,
      openKeys: [_this.props.openKeys] || [_this.props.defaultOpenKeys],
      hasCollapsedBtn: _this.props.hasCollapsedBtn || false,
      theme: _this.props.theme || 'dark'
    };
    return _this;
  }

  _createClass(CBNav, [{
    key: 'render',
    value: function render() {
      var _state = this.state,
          collapsed = _state.collapsed,
          navWidth = _state.navWidth,
          menuInlineIndent = _state.menuInlineIndent,
          selectedKeys = _state.selectedKeys,
          openKeys = _state.openKeys,
          hasCollapsedBtn = _state.hasCollapsedBtn,
          theme = _state.theme;
      var _props = this.props,
          menuStyle = _props.menuStyle,
          defaultSelectedKeys = _props.defaultSelectedKeys,
          defaultOpenKeys = _props.defaultOpenKeys,
          navSource = _props.navSource,
          filterType = _props.filterType,
          selectSource = _props.selectSource,
          selectDefaultKey = _props.selectDefaultKey,
          selectPlaceholder = _props.selectPlaceholder,
          onSelectCallBack = _props.onSelectCallBack,
          searchPlaceholder = _props.searchPlaceholder,
          searchKey = _props.searchKey,
          matchedList = _props.matchedList,
          onSearchCallBack = _props.onSearchCallBack,
          onChangeCallBack = _props.onChangeCallBack;

      var navlight = theme === 'light';
      var navStyle = Object.assign({ width: navWidth }, menuStyle);
      return _react2.default.createElement(
        'div',
        { className: cx({ 'navContainer': true, 'lightNavContainer': navlight, 'navIsCollapsed': collapsed }), style: navStyle },
        hasCollapsedBtn && _react2.default.createElement(
          'div',
          { className: cx('navCollapsedBtn'), onClick: this.toggleCollapsed },
          _react2.default.createElement(_icon2.default, { type: 'menu-unfold', className: cx({ 'navIsCollapsedBtn': collapsed }) })
        ),
        filterType && _react2.default.createElement(
          'div',
          { className: cx('navFilterContainer') },
          filterType === 'select' ? _react2.default.createElement(_CBNavSelect2.default, {
            selectSource: selectSource,
            collapsed: collapsed,
            selectPlaceholder: selectPlaceholder && selectPlaceholder,
            selectDefaultKey: selectDefaultKey && selectDefaultKey,
            onSelectCallBack: onSelectCallBack
          }) : filterType === 'search' && _react2.default.createElement(_CBNavSearch2.default, {
            onSearchCallBack: onSearchCallBack,
            onChangeCallBack: onChangeCallBack,
            searchPlaceholder: searchPlaceholder,
            searchKey: searchKey,
            matchedList: matchedList,
            collapsed: collapsed
          })
        ),
        collapsed ? _react2.default.createElement(
          _menu2.default,
          {
            defaultSelectedKeys: [defaultSelectedKeys],
            defaultOpenKeys: [defaultOpenKeys],
            selectedKeys: [selectedKeys],
            openKeys: openKeys,
            mode: 'inline',
            theme: 'dark',
            inlineCollapsed: collapsed,
            inlineIndent: menuInlineIndent,
            onClick: this.handleMenuChange,
            onOpenChange: this.onOpenChange
          },
          this.renderNav(navSource)
        ) : _react2.default.createElement(
          _menu2.default,
          {
            defaultSelectedKeys: [defaultSelectedKeys],
            defaultOpenKeys: [defaultOpenKeys],
            selectedKeys: [selectedKeys],
            openKeys: openKeys,
            mode: navlight ? 'inline' : 'vertical',
            theme: navlight ? 'light' : 'dark',
            inlineIndent: menuInlineIndent,
            onClick: this.handleMenuChange,
            onOpenChange: this.onOpenChange
          },
          this.renderNav(navSource)
        )
      );
    }
  }]);

  return CBNav;
}(_react2.default.Component);

CBNav.propTypes = {
  theme: _propTypes.string,
  hasCollapsedBtn: _propTypes.bool,
  menuStyle: _propTypes.object,
  collapsed: _propTypes.bool,
  navWidth: _propTypes.number,
  menuInlineIndent: _propTypes.number,
  navSource: _propTypes.array.isRequired,
  defaultSelectedKeys: _propTypes.string,
  defaultOpenKeys: _propTypes.string,
  selectedKeys: _propTypes.string,
  openKeys: _propTypes.string,
  onMenuClickCallBack: _propTypes.func.isRequired,
  filterType: _propTypes.string,
  selectSource: _propTypes.array,
  selectDefaultKey: _propTypes.string,
  selectPlaceholder: _propTypes.string,
  onSelectCallBack: _propTypes.func,
  searchPlaceholder: _propTypes.string,
  searchKey: _propTypes.string,
  matchedList: _propTypes.array,
  onSearchCallBack: _propTypes.func,
  onChangeCallBack: _propTypes.func
};

exports.default = CBNav;