'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _CBResult = require('./CBResult.less');

var _CBResult2 = _interopRequireDefault(_CBResult);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _iconfont = require('../../../public/fonts/iconfont/iconfont.css');

var _iconfont2 = _interopRequireDefault(_iconfont);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_CBResult2.default);
var cx2 = _bind2.default.bind(_iconfont2.default);

var CBResult = function (_React$Component) {
  _inherits(CBResult, _React$Component);

  function CBResult() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CBResult);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CBResult.__proto__ || Object.getPrototypeOf(CBResult)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      visible: true
    }, _this.onChangeVisible = function () {
      _this.setState({
        visible: !_this.state.visible
      }, function () {
        if (_this.props.onClick) {
          _this.props.onClick(_this.state.visible);
        }
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(CBResult, [{
    key: 'render',
    value: function render() {
      var children = this.props.children;

      return _react2.default.createElement(
        'div',
        { className: cx('cb-result', { 'cb-result-show': this.state.visible, 'cb-result-hide': !this.state.visible }) },
        _react2.default.createElement(
          'span',
          { className: cx('cb-result-switch'), onClick: this.onChangeVisible },
          this.state.visible ? _react2.default.createElement(
            'i',
            { className: cx2('ET-BRAIN') + ' ' + cx('cb-result-icon'), onClick: this.onSearch },
            '\uE612'
          ) : _react2.default.createElement(
            'i',
            { className: cx2('ET-BRAIN') + ' ' + cx('cb-result-icon'), onClick: this.onSearch },
            '\uE613'
          )
        ),
        children
      );
    }
  }]);

  return CBResult;
}(_react2.default.Component);

exports.default = CBResult;