'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _CBTabNum = require('./CBTabNum.less');

var _CBTabNum2 = _interopRequireDefault(_CBTabNum);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_CBTabNum2.default);

var CBTabNum = function (_React$Component) {
  _inherits(CBTabNum, _React$Component);

  function CBTabNum(props) {
    _classCallCheck(this, CBTabNum);

    var _this = _possibleConstructorReturn(this, (CBTabNum.__proto__ || Object.getPrototypeOf(CBTabNum)).call(this, props));

    var _this$props = _this.props,
        defaultSelected = _this$props.defaultSelected,
        tabList = _this$props.tabList;

    if (defaultSelected === undefined) {
      defaultSelected = tabList[0].key;
    }
    _this.state = { activeTab: defaultSelected };
    return _this;
  }

  _createClass(CBTabNum, [{
    key: 'handler',
    value: function handler(key) {
      var onChange = this.props.onChange;

      this.setState({ activeTab: key });
      onChange && onChange(key);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var tabList = this.props.tabList;
      var activeTab = this.state.activeTab;

      return _react2.default.createElement(
        'div',
        { className: cx('count-tab') },
        tabList && tabList.length > 0 && tabList.map(function (item, index) {
          return _react2.default.createElement(
            'div',
            { className: cx({ active: activeTab === item.key }), key: index, onClick: function onClick() {
                return _this2.handler(item.key);
              } },
            _react2.default.createElement(
              'span',
              null,
              item.num
            ),
            _react2.default.createElement(
              'p',
              { title: item.text },
              item.text
            )
          );
        })
      );
    }
  }]);

  return CBTabNum;
}(_react2.default.Component);

exports.default = CBTabNum;


CBTabNum.propTypes = {
  defaultSelected: _propTypes2.default.string,
  tabList: _propTypes2.default.array.isRequired,
  onChange: _propTypes2.default.func
};