'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _CBModal = require('./CBModal.less');

var _CBModal2 = _interopRequireDefault(_CBModal);

var _iconfont = require('../../../public/css/iconfont.css');

var _iconfont2 = _interopRequireDefault(_iconfont);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_CBModal2.default);
var cx2 = _bind2.default.bind(_iconfont2.default);

var CBModal = function (_React$Component) {
  _inherits(CBModal, _React$Component);

  function CBModal(props) {
    _classCallCheck(this, CBModal);

    var _this = _possibleConstructorReturn(this, (CBModal.__proto__ || Object.getPrototypeOf(CBModal)).call(this, props));

    _this.onClose = function () {
      _this.setState({ visible: false });
      _this.setAnimatHidden(false, 500);
      if (_this.props.onClose) {
        _this.props.onClose();
      } else {
        _this.props.onCancel();
      }
    };

    _this.openModal = function () {
      _this.setState({ visible: true });
      _this.setAnimatHidden(true, 100);
    };

    _this.onOk = function () {
      _this.setState({ visible: false });
      _this.setAnimatHidden(false, 500);
      if (_this.props.onOk) {
        _this.props.onOk();
      }
    };

    _this.onCancel = function () {
      _this.setState({ visible: false });
      _this.setAnimatHidden(false, 500);
      if (_this.props.onCancel) {
        _this.props.onCancel();
      }
    };

    _this.setAnimatHidden = function (bool, time) {
      _this.animation && clearTimeout(_this.animation);
      _this.animation = setTimeout(function () {
        _this.setState({ animatHidden: bool });
      }, time);
    };

    _this.state = {
      style: { height: null },
      visible: _this.props.visible,
      animatHidden: false
    };
    return _this;
  }

  _createClass(CBModal, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.refs.modalBox) {
        var height = this.refs.modalBox.offsetHeight - this.refs.modalTitle.offsetHeight - this.refs.modalFooter.offsetHeight;
        this.setState({ style: { height: height } });
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.visible) {
        this.setState({ visible: nextProps.visible });
        this.setAnimatHidden(true, 100);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var style1 = cx2({ 'ET-BRAIN': true });
      var style2 = cx('close');
      return _react2.default.createElement(
        'div',
        null,
        this.props.children ? _react2.default.createElement(
          'div',
          { onClick: this.openModal },
          this.props.children
        ) : null,
        _react2.default.createElement(
          'div',
          { id: 'cb-modal', className: cx({
              'modal': true,
              'modal-hidden': !this.state.visible,
              'animatHidden': !this.state.animatHidden,
              'modal-light': this.props.theme === 'background_light'
            })
          },
          _react2.default.createElement(
            'div',
            { className: cx({
                'modalBox': true,
                'modalBox-show': this.state.visible,
                'modalBox-hidden': !this.state.visible
              }), ref: 'modalBox'
            },
            _react2.default.createElement(
              'div',
              { className: cx('modal-title-box') },
              _react2.default.createElement(
                'div',
                { className: cx('modal-title'), ref: 'modalTitle' },
                this.props.title
              ),
              _react2.default.createElement(
                'i',
                { className: style1 + '  ' + style2, onClick: this.onClose },
                '\uE6BC'
              )
            ),
            _react2.default.createElement(
              'div',
              { className: cx('modal-content'), ref: 'modalContent', style: this.state.style },
              this.props.content
            ),
            _react2.default.createElement(
              'div',
              { className: cx('modal-footer'), ref: 'modalFooter' },
              _react2.default.createElement(
                'div',
                { className: cx({ btn: true, ok: true }), onClick: this.onOk },
                this.props.onOkText || '确定'
              ),
              _react2.default.createElement(
                'div',
                { className: cx({ btn: true, cancel: true }), onClick: this.onCancel },
                this.props.onCancelText || '取消'
              )
            )
          )
        )
      );
    }
  }]);

  return CBModal;
}(_react2.default.Component);

CBModal.propTypes = {
  title: _propTypes.string,
  content: _propTypes.node,
  visible: _propTypes.bool.isRequired,
  onOk: _propTypes.func.isRequired,
  onCancel: _propTypes.func.isRequired,
  onClose: _propTypes.func,
  onCancelText: _propTypes.string,
  onOkText: _propTypes.string
};
exports.default = CBModal;