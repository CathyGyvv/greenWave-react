'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _icon = require('antd/lib/icon');

var _icon2 = _interopRequireDefault(_icon);

var _tooltip = require('antd/lib/tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

require('antd/lib/icon/style');

require('antd/lib/tooltip/style');

var _CBToolTip = require('./CBToolTip.less');

var _CBToolTip2 = _interopRequireDefault(_CBToolTip);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_CBToolTip2.default);

var CBTooltip = function (_React$Component) {
  _inherits(CBTooltip, _React$Component);

  function CBTooltip() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CBTooltip);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CBTooltip.__proto__ || Object.getPrototypeOf(CBTooltip)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      visible: false
    }, _this.hide = function () {
      _this.setState({
        visible: false
      });
    }, _this.handleVisibleChange = function (visible) {
      _this.setState({ visible: visible });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(CBTooltip, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          closeDoor = _props.closeDoor,
          id = _props.id,
          trigger = _props.trigger;

      var placementArr = ['top', 'left', 'right', 'bottom', 'topLeft', 'topRight', 'bottomLeft', 'bottomRight', 'leftTop', 'leftBottom', 'rightTop', 'rightBottom'];
      var placement = 'top';
      if (this.props.placement && placementArr.indexOf(this.props.placement) > -1) {
        placement = this.props.placement;
      }
      var idNode = id || document.body;
      var closeEle = closeDoor && _react2.default.createElement(
        'span',
        { className: cx('cbtooltip-notice-close'), onClick: this.hide },
        _react2.default.createElement(_icon2.default, { type: 'close' })
      );
      var title = _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { className: cx({ paddEl: !this.props.closeDoor }) },
          closeEle
        ),
        _react2.default.createElement(
          'div',
          { className: cx('content-text', { paddRight: !this.props.closeDoor }) },
          this.props.title
        )
      );
      var configuration = {
        title: title,
        placement: placement,
        trigger: trigger,
        visible: this.state.visible
      };
      return _react2.default.createElement(
        'div',
        { className: cx('cb-tooltip-container') },
        _react2.default.createElement(
          _tooltip2.default,
          _extends({}, configuration, {
            visible: this.state.visible,
            onVisibleChange: this.handleVisibleChange,
            getPopupContainer: function getPopupContainer() {
              return idNode;
            }
          }),
          this.props.children
        )
      );
    }
  }]);

  return CBTooltip;
}(_react2.default.Component);

CBTooltip.propTypes = {
  title: _propTypes.node.isRequired,
  placement: _propTypes.string,
  trigger: _propTypes.string,
  closeDoor: _propTypes.bool
};

exports.default = CBTooltip;