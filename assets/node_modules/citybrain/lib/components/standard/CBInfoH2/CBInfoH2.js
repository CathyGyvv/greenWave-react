'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _CBInfoH = require('./CBInfoH2.less');

var _CBInfoH2 = _interopRequireDefault(_CBInfoH);

var _iconfont = require('../../../public/css/iconfont.css');

var _iconfont2 = _interopRequireDefault(_iconfont);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_CBInfoH2.default);
var cx2 = _bind2.default.bind(_iconfont2.default);

var CBInfoH2 = function (_React$Component) {
  _inherits(CBInfoH2, _React$Component);

  function CBInfoH2(props) {
    _classCallCheck(this, CBInfoH2);

    var _this = _possibleConstructorReturn(this, (CBInfoH2.__proto__ || Object.getPrototypeOf(CBInfoH2)).call(this, props));

    _this.state = {
      isShrink: false
    };
    return _this;
  }

  _createClass(CBInfoH2, [{
    key: 'renderBody',
    value: function renderBody() {
      var titleBody = this.props.titleBody;

      var bodyList = titleBody && titleBody.length > 0 && titleBody.map(function (item, index) {
        var _cx;

        return _react2.default.createElement(
          'div',
          { className: cx((_cx = {}, _defineProperty(_cx, item.class, item.class), _defineProperty(_cx, 'bodyItem', true), _cx)), key: index, style: item.style, title: item.hover },
          item.title
        );
      });
      if (bodyList) {
        return _react2.default.createElement(
          'div',
          { className: cx({ titleBody: true, isShow: this.state.isShrink }) },
          bodyList
        );
      }
    }
  }, {
    key: 'isShrink',
    value: function isShrink() {
      var isShrink = this.state.isShrink;

      this.setState({
        isShrink: !isShrink
      });
    }
  }, {
    key: 'renderHeader',
    value: function renderHeader() {
      var _props = this.props,
          titleHeader = _props.titleHeader,
          isHaveShrink = _props.isHaveShrink;

      var headerList = titleHeader && titleHeader.length > 0 ? titleHeader.map(function (item, index) {
        var _cx2;

        return _react2.default.createElement(
          'div',
          { className: cx((_cx2 = {}, _defineProperty(_cx2, item.class, item.class), _defineProperty(_cx2, 'headerItem', true), _cx2)), key: index, style: item.style, title: item.hover },
          item.title
        );
      }) : [];
      if (isHaveShrink) {
        headerList.push(_react2.default.createElement(
          'div',
          { className: cx({ 'headerItem': true, 'arrow': true }), onClick: this.isShrink.bind(this), key: Math.random() },
          this.state.isShrink ? _react2.default.createElement(
            'i',
            { className: cx2('ET-BRAIN') },
            '\uE645'
          ) : _react2.default.createElement(
            'i',
            { className: cx2('ET-BRAIN') },
            '\uE611'
          )
        ));
      }
      return headerList;
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: cx('subTitBox') },
        _react2.default.createElement(
          'div',
          { className: cx('titleHeader') },
          this.renderHeader()
        ),
        this.renderBody()
      );
    }
  }]);

  return CBInfoH2;
}(_react2.default.Component);

CBInfoH2.propTypes = {
  titleHeader: _propTypes.array.isRequired,
  titleBody: _propTypes.array,
  isHaveShrink: _propTypes.bool
};
exports.default = CBInfoH2;