'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _iconfont = require('../../../public/css/iconfont.css');

var _iconfont2 = _interopRequireDefault(_iconfont);

require('./CBMapIcon.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
  crossing_congestion_level1: 路口路段-严重拥堵-未选中，
  crossing_congestion_level1_active: 路口路段-严重拥堵-选中，
  crossing_congestion_level2: 路口路段-拥堵-未选中，
  crossing_congestion_level2_active: 路口路段-拥堵-选中，
  crossing_congestion_level3: 路口路段-一般-未选中，
  crossing_congestion_level3_active: 路口路段-一般-选中，
  crossing_congestion_level4: 路口路段-通畅-未选中，
  crossing_congestion_level4_active: 路口路段-通畅-选中，
  road_congestion_level1: 通道-严重拥堵-未选中，
  road_congestion_level1_active: 通道-严重拥堵-选中，
  road_congestion_level2: 通道-拥堵-未选中，
  road_congestion_level2_active: 通道-拥堵-选中，
  road_congestion_level3: 通道-一般-未选中，
  road_congestion_level3_active: 通道-一般-选中，
  road_congestion_level4：通道-畅通-未选中，
  road_congestion_level4_active：通道-畅通-选中,
  callPolice_122: 交通报警，
  callPolice_122_active: 交通报警-选中，
  callPolice_110: 公安报警，
  callPolice_110_active: 公安报警-选中，
  callPolice_119: 消防报警，
  callPolice_119_active: 消防报警-选中，
  callPolice_120: 救护报警，
  callPolice_120_active: 救护报警-选中，
  callPolice_other: 其他报警，
  callPolice_other_active: 其他报警-选中，
  callPolice_unknown: 未知报警，
  callPolice_unknown_active: 未知报警-选中，
  events_total: 事件总数,
  events_total_active: 事件总数-选中,
  car110: 警车位置，
  car110_active: 警车位置-选中，
  car119: 消防车位置，
  car119_active: 消防车位置-选中，
  car120: 急救车位置，
  car120_active: 急救车位置-选中，
  startIcon: 起止位置，
  startIcon_acitve: 起止位置-选中，
  phase_ahead: 直行，
  phase_back: 反向直行，
  phase_left: 左转，
  phase_right: 右转，
  phase_turnRound: 掉头，
  phase_turnLeft: 左转弯，
  phase_turnLeft2: 左转弯2，
  phase_turnRight: 右转弯，
  phase_turnRight2: 右转弯2，
  noHover_ripple: 波纹效果，
  withFont_ramp_up: 上匝道，
  withFont_ramp_up_active: 上匝道，
  withFont_ramp_down: 下匝道，
  withFont_ramp_down_active: 下匝道，
  withFont_lane: 分车道，
  withFont_lane_active: 分车道，
  withFont_tidal_crossing: 潮汐可变车道路口，
  withFont_tidal_crossing_active: 潮汐可变车道路口，
  withFont_tidal_road: 潮汐可变车道路段，
  withFont_tidal_road_active: 潮汐可变车道路段，
  withFont_congestion_level1: 地图-严重拥堵-未选中，
  withFont_congestion_level1_active: 地图-严重拥堵-选中，
  withFont_congestion_level2: 地图-拥堵-未选中，
  withFont_congestion_level2_active: 地图-拥堵-选中，
  withFont_congestion_level3: 地图-一般-未选中，
  withFont_congestion_level3_active: 地图-一般-选中，
  withFont_congestion_level4: 地图-通畅-未选中，
  withFont_congestion_level4_active: 地图-通畅-选中，
*/
var withFontsObj = {
  'withFont_ramp_up': {
    'react': _react2.default.createElement(
      'i',
      { className: _iconfont2.default['ET-BRAIN'] },
      '\uE618'
    ),
    'html': '<i class=\'ET-BRAIN\'>&#xe618;</i>'
  },
  'withFont_ramp_down': {
    'react': _react2.default.createElement(
      'i',
      { className: _iconfont2.default['ET-BRAIN'] },
      '\uE617'
    ),
    'html': '<i class=\'ET-BRAIN\'>&#xe617;</i>'
  },
  'withFont_lane': {
    'react': _react2.default.createElement(
      'i',
      { className: _iconfont2.default['ET-BRAIN'] },
      '\uE619'
    ),
    'html': '<i class=\'ET-BRAIN\'>&#xe619;</i>'
  },
  'withFont_tidal_crossing': {
    'react': _react2.default.createElement(
      'i',
      { className: _iconfont2.default['ET-BRAIN'] },
      '\uE61C'
    ),
    'html': '<i class=\'ET-BRAIN\'>&#xe61c;</i>'
  },
  'withFont_tidal_road': {
    'react': _react2.default.createElement(
      'i',
      { className: _iconfont2.default['ET-BRAIN'] },
      '\uE61A'
    ),
    'html': '<i class=\'ET-BRAIN\'>&#xe61a;</i>'
  } };

function checkWithFonts(name, type) {
  return name.match('_active') ? withFontsObj[name.split('_active')[0]][type] : withFontsObj[name][type];
}

function CBMapIcon(_ref) {
  var type = _ref.type,
      content = _ref.content,
      mapStyle = _ref.mapStyle,
      openHover = _ref.openHover,
      openAperture = _ref.openAperture,
      forMap = _ref.forMap;

  var isApertrue = openAperture ? ' aperture' : '';
  if (type === 'noHover_ripple') {
    if (forMap) {
      return '<div parent=\'noHover_ripple\'>\n      <div class=\'ripple_content\'>{content}</div>\n      <div class=\'inner_circle\' />\n      <div class=\'outer_circle\' />\n    </div>';
    } else {
      return _react2.default.createElement(
        'div',
        { parent: 'noHover_ripple', style: mapStyle },
        _react2.default.createElement(
          'div',
          { className: 'ripple_content' },
          content
        ),
        _react2.default.createElement('div', { className: 'inner_circle' }),
        _react2.default.createElement('div', { className: 'outer_circle' })
      );
    }
  } else if (type.match('withFont_congestion')) {
    if (forMap) {
      var str = forMap === 'className' ? 'mapIconCommon ' + type + isApertrue : '<span class=\'mapIconCommon ' + type + isApertrue + '\' ><i class=\'ET-BRAIN\' >&#xe61c;</i></span>';
      return str;
    } else {
      return _react2.default.createElement(
        'span',
        { style: mapStyle, className: 'mapIconCommon ' + type + isApertrue },
        _react2.default.createElement(
          'i',
          { className: _iconfont2.default['ET-BRAIN'] },
          '\uE61C'
        )
      );
    }
  } else if (type.match('withFont_')) {
    var checkedType = openHover && !type.match('_active') && !type.match('noHover_') ? 'withFont_hover' : type.match('_active') ? 'withFont_active' : 'withFont';
    if (forMap) {
      var _str = forMap === 'className' ? '' + checkedType + isApertrue : '<span class=\'' + checkedType + isApertrue + '\' >' + checkWithFonts(type, 'html') + '</span>';
      return _str;
    } else {
      return _react2.default.createElement(
        'span',
        { style: mapStyle, className: '' + checkedType + isApertrue },
        checkWithFonts(type, 'react')
      );
    }
  } else {
    var _checkedType = openHover && !type.match('_active') && !type.match('phase_') && !type.match('noHover_') ? type + '_hover' : '' + type;
    var checkedContent = !type.match('phase_') ? content : null;
    if (forMap) {
      var _str2 = forMap === 'className' ? 'mapIconCommon ' + _checkedType + isApertrue : '<span class=\'mapIconCommon ' + _checkedType + isApertrue + '\' >\n            ' + checkedContent + '\n          </span>';
      return _str2;
    } else {
      return _react2.default.createElement(
        'span',
        { style: mapStyle, className: 'mapIconCommon ' + _checkedType + isApertrue },
        checkedContent
      );
    }
  }
}

CBMapIcon.propTypes = {
  type: _propTypes.string.isRequired,
  mapStyle: _propTypes.object,
  openHover: _propTypes.bool,
  openAperture: _propTypes.bool,
  forMap: (0, _propTypes.oneOf)(['className', 'html'])
};

exports.default = CBMapIcon;