{"version":3,"sources":["../../../src/io/browser-load.js"],"names":["requestFile","pathPrefix","setPathPrefix","prefix","loadFile","url","opts","loadImage","Promise","resolve","reject","image","Image","onload","onerror","Error","crossOrigin","src","error"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,wBAA1B;AAEA,IAAIC,aAAa,EAAjB;AAEA;;;;AAGA,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAA+B;AACpCF,eAAaE,MAAb;AACD;AAED,OAAO,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,IAAvB,EAA6B;AAClC,MAAI,OAAOD,GAAP,KAAe,QAAf,IAA2B,CAACC,IAAhC,EAAsC;AACpC;AACAA,WAAOD,GAAP;AACAA,UAAMC,KAAKD,GAAX;AACD;;AACDC,OAAKD,GAAL,GAAWJ,aAAaA,aAAaI,GAA1B,GAAgCA,GAA3C;AACA,SAAOL,YAAYM,IAAZ,CAAP;AACD;AAED;;AAEA;;;;;;AAKA,OAAO,SAASC,SAAT,CAAmBF,GAAnB,EAAwBC,IAAxB,EAA8B;AACnCD,QAAMJ,aAAaA,aAAaI,GAA1B,GAAgCA,GAAtC;AAEA,SAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAI;AACF,YAAMC,QAAQ,IAAIC,KAAJ,EAAd;;AACAD,YAAME,MAAN,GAAe,MAAMJ,QAAQE,KAAR,CAArB;;AACAA,YAAMG,OAAN,GAAgB,MAAMJ,OAAO,IAAIK,KAAJ,CAAW,wBAAuBV,GAAI,GAAtC,CAAP,CAAtB;;AACAM,YAAMK,WAAN,GAAqBV,QAAQA,KAAKU,WAAd,IAA8B,WAAlD;AACAL,YAAMM,GAAN,GAAYZ,GAAZ;AACD,KAND,CAME,OAAOa,KAAP,EAAc;AACdR,aAAOQ,KAAP;AACD;AACF,GAVM,CAAP;AAWD","sourcesContent":["import {requestFile} from './browser-request-file';\n\nlet pathPrefix = '';\n\n/*\n * Set a relative path prefix\n */\nexport function setPathPrefix(prefix) {\n  pathPrefix = prefix;\n}\n\nexport function loadFile(url, opts) {\n  if (typeof url !== 'string' && !opts) {\n    // TODO - warn for deprecated mode\n    opts = url;\n    url = opts.url;\n  }\n  opts.url = pathPrefix ? pathPrefix + url : url;\n  return requestFile(opts);\n}\n\n/* global Image */\n\n/*\n * Loads images asynchronously\n * image.crossOrigin can be set via opts.crossOrigin, default to 'anonymous'\n * returns a promise tracking the load\n */\nexport function loadImage(url, opts) {\n  url = pathPrefix ? pathPrefix + url : url;\n\n  return new Promise((resolve, reject) => {\n    try {\n      const image = new Image();\n      image.onload = () => resolve(image);\n      image.onerror = () => reject(new Error(`Could not load image ${url}.`));\n      image.crossOrigin = (opts && opts.crossOrigin) || 'anonymous';\n      image.src = url;\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n"],"file":"browser-load.js"}