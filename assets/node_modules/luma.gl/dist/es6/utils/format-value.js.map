{"version":3,"sources":["../../../src/utils/format-value.js"],"names":["formatArrayValue","v","opts","maxElts","size","string","i","length","formatValue","terminator","EPSILON","isInteger","Array","isArray","ArrayBuffer","isView","Number","isFinite","String","Math","abs","toFixed","toPrecision","decimal","indexOf","slice"],"mappings":"AAAA;;AACA;AACA,SAASA,gBAAT,CAA0BC,CAA1B,EAA6BC,IAA7B,EAAmC;AAAA,wBACAA,IADA,CAC1BC,OAD0B;AAAA,QAC1BA,OAD0B,8BAChB,EADgB;AAAA,qBACAD,IADA,CACZE,IADY;AAAA,QACZA,IADY,2BACL,CADK;AAEjC,MAAIC,SAAS,GAAb;;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIL,EAAEM,MAAN,IAAgBD,IAAIH,OAApC,EAA6C,EAAEG,CAA/C,EAAkD;AAChD,QAAIA,IAAI,CAAR,EAAW;AACTD,gBAAW,IAAIC,IAAIF,IAAJ,KAAa,CAAd,GAAmB,GAAnB,GAAyB,EAAG,EAA1C;AACD;;AACDC,cAAUG,YAAYP,EAAEK,CAAF,CAAZ,EAAkBJ,IAAlB,CAAV;AACD;;AACD,QAAMO,aAAaR,EAAEM,MAAF,GAAWJ,OAAX,GAAqB,KAArB,GAA6B,GAAhD;AACA,SAAQ,GAAEE,MAAO,GAAEI,UAAW,EAA9B;AACD;;AAED,OAAO,SAASD,WAAT,CAAqBP,CAArB,EAAwBC,OAAO,EAA/B,EAAmC;AACxC,QAAMQ,UAAU,KAAhB;AADwC,0BAEZR,IAFY,CAEjCS,SAFiC;AAAA,QAEjCA,SAFiC,gCAErB,KAFqB;;AAGxC,MAAIC,MAAMC,OAAN,CAAcZ,CAAd,KAAoBa,YAAYC,MAAZ,CAAmBd,CAAnB,CAAxB,EAA+C;AAC7C,WAAOD,iBAAiBC,CAAjB,EAAoBC,IAApB,CAAP;AACD;;AACD,MAAI,CAACc,OAAOC,QAAP,CAAgBhB,CAAhB,CAAL,EAAyB;AACvB,WAAOiB,OAAOjB,CAAP,CAAP;AACD;;AACD,MAAIkB,KAAKC,GAAL,CAASnB,CAAT,IAAcS,OAAlB,EAA2B;AACzB,WAAOC,YAAY,GAAZ,GAAkB,IAAzB;AACD;;AACD,MAAIA,SAAJ,EAAe;AACb,WAAOV,EAAEoB,OAAF,CAAU,CAAV,CAAP;AACD;;AACD,MAAIF,KAAKC,GAAL,CAASnB,CAAT,IAAc,GAAd,IAAqBkB,KAAKC,GAAL,CAASnB,CAAT,IAAc,KAAvC,EAA8C;AAC5C,WAAOA,EAAEoB,OAAF,CAAU,CAAV,CAAP;AACD;;AACD,QAAMhB,SAASJ,EAAEqB,WAAF,CAAc,CAAd,CAAf;AACA,QAAMC,UAAUlB,OAAOmB,OAAP,CAAe,IAAf,CAAhB;AACA,SAAOD,YAAYlB,OAAOE,MAAP,GAAgB,CAA5B,GAAgCF,OAAOoB,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,CAAhC,GAAsDpB,MAA7D;AACD","sourcesContent":["// TODO / DEPRECATED - delete when confident that probe.gl logging implements all opts\n/* eslint-disable no-console */\nfunction formatArrayValue(v, opts) {\n  const {maxElts = 16, size = 1} = opts;\n  let string = '[';\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += `,${(i % size === 0) ? ' ' : ''}`;\n    }\n    string += formatValue(v[i], opts);\n  }\n  const terminator = v.length > maxElts ? '...' : ']';\n  return `${string}${terminator}`;\n}\n\nexport function formatValue(v, opts = {}) {\n  const EPSILON = 1e-16;\n  const {isInteger = false} = opts;\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, opts);\n  }\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n  if (isInteger) {\n    return v.toFixed(0);\n  }\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    return v.toFixed(0);\n  }\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\n"],"file":"format-value.js"}