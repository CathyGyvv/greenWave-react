{"version":3,"sources":["../../../src/utils/utils.js"],"names":["assert","uidCounters","uid","id","count","isPowerOfTwo","n","isObjectEmpty","obj","isEmpty","key"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;AAEA,MAAMC,cAAc,EAApB;AAEA;;;;;;AAKA,OAAO,SAASC,GAAT,CAAaC,KAAK,IAAlB,EAAwB;AAC7BF,cAAYE,EAAZ,IAAkBF,YAAYE,EAAZ,KAAmB,CAArC;AACA,QAAMC,QAAQH,YAAYE,EAAZ,GAAd;AACA,SAAQ,GAAEA,EAAG,IAAGC,KAAM,EAAtB;AACD;AAED;;;;;;AAKA,OAAO,SAASC,YAAT,CAAsBC,CAAtB,EAAyB;AAC9BN,SAAQ,OAAOM,CAAP,KAAa,QAArB,EAAgC,wBAAhC;AACA,SAAOA,KAAM,CAACA,IAAKA,IAAI,CAAV,MAAkB,CAA/B;AACD,C,CAED;;AACA,OAAO,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AACjC,MAAIC,UAAU,IAAd;AACA;;AACA,OAAK,MAAMC,GAAX,IAAkBF,GAAlB,EAAuB;AACrBC,cAAU,KAAV;AACA;AACD;AACD;;;AACA,SAAOA,OAAP;AACD","sourcesContent":["import assert from './assert';\n\nconst uidCounters = {};\n\n/**\n * Returns a UID.\n * @param {String} id= - Identifier base name\n * @return {number} uid\n **/\nexport function uid(id = 'id') {\n  uidCounters[id] = uidCounters[id] || 1;\n  const count = uidCounters[id]++;\n  return `${id}-${count}`;\n}\n\n/**\n * Verifies if a given number is power of two or not.\n * @param {object} n - The number to check.\n * @return {Array} Returns true if the given number is power of 2, false otherwise.\n **/\nexport function isPowerOfTwo(n) {\n  assert((typeof n === 'number'), 'Input must be a number');\n  return n && ((n & (n - 1)) === 0);\n}\n\n// Returns true if given object is empty, false otherwise.\nexport function isObjectEmpty(obj) {\n  let isEmpty = true;\n  /* eslint-disable no-unused-vars  */\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  /* eslint-enable no-unused-vars  */\n  return isEmpty;\n}\n"],"file":"utils.js"}