{"version":3,"sources":["../../../../src/shadertools/test/gpu-test-utils.js"],"names":["createGLContext","setParameters","glEnumToString","gl","value","NO_ERROR","p","toString","glErrorShouldBe","glErrors","opt_msg","length","err","getError","ndx","indexOf","errStrs","ii","push","msg","console","error","initializeGL","canvas","viewport","width","height","clearColor","clearDepth","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","initializeTexTarget","framebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","tex","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","texImage2D","RGBA32F","RGBA","FLOAT","renderbuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","render","drawArrays","TRIANGLE_STRIP","getGPUOutput","buf","Float32Array","readPixels"],"mappings":"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","sourcesContent":["/* eslint-disable max-len, prefer-template, camelcase */\n/* global console */\n/* eslint-disable no-console */\nimport {createGLContext, setParameters} from 'luma.gl';\n\n// Utilities functions that to be moved to a common place for future tests\n\nfunction glEnumToString(gl, value) {\n  // Optimization for the most common enum:\n  if (value === gl.NO_ERROR) {\n    return 'NO_ERROR';\n  }\n  for (const p in gl) {\n    if (gl[p] === value) {\n      return p;\n    }\n  }\n  return '0x' + value.toString(16);\n}\n\nfunction glErrorShouldBe(gl, glErrors, opt_msg) {\n  if (!glErrors.length) {\n    glErrors = [glErrors];\n  }\n  opt_msg = opt_msg || '';\n  const err = gl.getError();\n  const ndx = glErrors.indexOf(err);\n  const errStrs = [];\n  for (let ii = 0; ii < glErrors.length; ++ii) {\n    errStrs.push(glEnumToString(gl, glErrors[ii]));\n  }\n  // const expected = errStrs.join(' or ');\n  if (ndx < 0) {\n    const msg = `getError expected${(glErrors.length > 1) ? ' one of: ' : ': '}`;\n    console.error('FAIL ' + msg);\n  }\n}\n\nexport function initializeGL(canvas) {\n  const gl = createGLContext(canvas);\n  setParameters(gl, {\n    viewport: [0, 0, canvas.width, canvas.height],\n    clearColor: [0, 0, 0, 1],\n    clearDepth: 1\n  });\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  return gl;\n}\n\nexport function initializeTexTarget(gl) {\n  const framebuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  framebuffer.width = 10;\n  framebuffer.height = 10;\n\n  const tex = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, tex);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, framebuffer.width, framebuffer.height, 0, gl.RGBA, gl.FLOAT, null);\n\n  const renderbuffer = gl.createRenderbuffer();\n  gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\n  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, framebuffer.width, framebuffer.height);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);\n  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);\n\n}\n\nexport function render(gl) {\n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  glErrorShouldBe(gl, gl.NO_ERROR, 'no error from draw');\n}\n\nexport function getGPUOutput(gl) {\n  const width = gl.canvas.width;\n  const height = gl.canvas.height;\n  const buf = new Float32Array(width * height * 4);\n  gl.readPixels(0, 0, width, height, gl.RGBA, gl.FLOAT, buf);\n  return buf;\n}\n"],"file":"gpu-test-utils.js"}