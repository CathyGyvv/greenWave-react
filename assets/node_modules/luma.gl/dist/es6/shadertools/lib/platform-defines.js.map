{"version":3,"sources":["../../../../src/shadertools/lib/platform-defines.js"],"names":["getContextInfo","hasFeature","canCompileGLGSExtension","FEATURES","checkRendererVendor","debugInfo","gpuVendor","vendor","renderer","result","match","getPlatformShaderDefines","gl","platformDefines","getVersionDefines","versionDefines","GLSL_FRAG_DEPTH","GLSL_DERIVATIVES","GLSL_FRAG_DATA","GLSL_TEXTURE_LOD"],"mappings":"AAAA,SAAQA,cAAR,QAA6B,aAA7B;AACA,SAAQC,UAAR,EAAoBC,uBAApB,EAA6CC,QAA7C,QAA4D,sCAA5D;AAEA,OAAO,SAASC,mBAAT,CAA6BC,SAA7B,EAAwCC,SAAxC,EAAmD;AAAA,QACjDC,MADiD,GAC7BF,SAD6B,CACjDE,MADiD;AAAA,QACzCC,QADyC,GAC7BH,SAD6B,CACzCG,QADyC;AAExD,MAAIC,MAAJ;;AACA,UAAQH,SAAR;AACA,SAAK,QAAL;AACEG,eAASF,OAAOG,KAAP,CAAa,SAAb,KAA2BF,SAASE,KAAT,CAAe,SAAf,CAApC;AACA;;AACF,SAAK,OAAL;AACED,eAASF,OAAOG,KAAP,CAAa,QAAb,KAA0BF,SAASE,KAAT,CAAe,QAAf,CAAnC;AACA;;AACF,SAAK,KAAL;AACED,eACEF,OAAOG,KAAP,CAAa,MAAb,KAAwBF,SAASE,KAAT,CAAe,MAAf,CAAxB,IACAH,OAAOG,KAAP,CAAa,MAAb,CADA,IACwBF,SAASE,KAAT,CAAe,MAAf,CAF1B;AAGA;;AACF;AACED,eAAS,KAAT;AAbF;;AAeA,SAAOA,MAAP;AACD;AAED,OAAO,SAASE,wBAAT,CAAkCC,EAAlC,EAAsC;AAC3C;AACA,MAAIC,kBAAkB,EAAtB;AACA,QAAMR,YAAYL,eAAeY,EAAf,CAAlB;;AAEA,MAAIR,oBAAoBC,SAApB,EAA+B,QAA/B,CAAJ,EAA8C;AAC5CQ,uBAAoB;;;;CAApB;AAKD,GAND,MAMO,IAAIT,oBAAoBC,SAApB,EAA+B,OAA/B,CAAJ,EAA6C;AAClDQ,uBAAoB;;;;;;;;CAApB;AASD,GAVM,MAUA,IAAIT,oBAAoBC,SAApB,EAA+B,KAA/B,CAAJ,EAA2C;AAChD;AACAQ,uBAAoB;;CAApB;AAGD,GALM,MAKA;AACL;AACA;AACA;AACAA,uBAAoB;;;;;;;;CAApB;AASD;;AAED,SAAOA,eAAP;AACD;AAED,OAAO,SAASC,iBAAT,CAA2BF,EAA3B,EAA+B;AACpC,MAAIG,iBAAkB;;;;;;;;;;;;;CAAtB;;AAeA,MAAId,WAAWW,EAAX,EAAeT,SAASa,eAAxB,CAAJ,EAA8C;AAC5CD,sBAAmB;;;;;;;CAAnB;AAQD;;AACD,MACEd,WAAWW,EAAX,EAAeT,SAASc,gBAAxB,KACAf,wBAAwBU,EAAxB,EAA4BT,SAASc,gBAArC,CAFF,EAGE;AACAF,sBAAmB;;;;;;CAAnB;AAOD;;AACD,MAAId,WAAWW,EAAX,EAAeT,SAASe,cAAxB,CAAJ,EAA6C;AAC3CH,sBAAmB;;;;;;CAAnB;AAOD;;AACD,MAAId,WAAWW,EAAX,EAAeT,SAASgB,gBAAxB,CAAJ,EAA+C;AAC7CJ,sBAAmB;;;;;;;;;;;;;;CAAnB;AAeD;;AACD,SAAOA,cAAP;AACD","sourcesContent":["import {getContextInfo} from '../../webgl';\nimport {hasFeature, canCompileGLGSExtension, FEATURES} from '../../webgl-context/context-features';\n\nexport function checkRendererVendor(debugInfo, gpuVendor) {\n  const {vendor, renderer} = debugInfo;\n  let result;\n  switch (gpuVendor) {\n  case 'nvidia':\n    result = vendor.match(/NVIDIA/i) || renderer.match(/NVIDIA/i);\n    break;\n  case 'intel':\n    result = vendor.match(/INTEL/i) || renderer.match(/INTEL/i);\n    break;\n  case 'amd':\n    result =\n      vendor.match(/AMD/i) || renderer.match(/AMD/i) ||\n      vendor.match(/ATI/i) || renderer.match(/ATI/i);\n    break;\n  default:\n    result = false;\n  }\n  return result;\n}\n\nexport function getPlatformShaderDefines(gl) {\n  /* eslint-disable */\n  let platformDefines = '';\n  const debugInfo = getContextInfo(gl);\n\n  if (checkRendererVendor(debugInfo, 'nvidia')) {\n    platformDefines += `\\\n#define NVIDIA_GPU\n// Nvidia optimizes away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n`;\n  } else if (checkRendererVendor(debugInfo, 'intel')) {\n    platformDefines += `\\\n#define INTEL_GPU\n// Intel optimizes away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n// Intel's built-in 'tan' function doesn't have acceptable precision\n#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1\n// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow\n#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1\n`;\n  } else if (checkRendererVendor(debugInfo, 'amd')) {\n    // AMD Does not eliminate fp64 code\n    platformDefines += `\\\n#define AMD_GPU\n`;\n  } else {\n    // We don't know what GPU it is, could be that the GPU driver or\n    // browser is not implementing UNMASKED_RENDERER constant and not\n    // reporting a correct name\n    platformDefines += `\\\n#define DEFAULT_GPU\n// Prevent driver from optimizing away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n// Intel's built-in 'tan' function doesn't have acceptable precision\n#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1\n// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow\n#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1\n`;\n  }\n\n  return platformDefines;\n}\n\nexport function getVersionDefines(gl) {\n  let versionDefines = `\\\n// Defines for shader portability\n#if (__VERSION__ > 120)\n# define attribute in\n# define varying out\n# define FRAG_DEPTH\n# define DERIVATIVES\n# define DRAW_BUFFERS\n# define TEXTURE_LOD\n#else\n// # define in attribute\n// # define out varying\n#endif // __VERSION\n`;\n\n  if (hasFeature(gl, FEATURES.GLSL_FRAG_DEPTH)) {\n    versionDefines += `\\\n// FRAG_DEPTH => gl_FragDepth is available\n#ifdef GL_EXT_frag_depth\n#extension GL_EXT_frag_depth : enable\n# define FRAG_DEPTH\n# define gl_FragDepth gl_FragDepthEXT\n#endif\n`;\n  }\n  if (\n    hasFeature(gl, FEATURES.GLSL_DERIVATIVES) &&\n    canCompileGLGSExtension(gl, FEATURES.GLSL_DERIVATIVES)\n  ) {\n    versionDefines += `\\\n// DERIVATIVES => dxdF, dxdY and fwidth are available\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n# define DERIVATIVES\n#endif\n`;\n  }\n  if (hasFeature(gl, FEATURES.GLSL_FRAG_DATA)) {\n    versionDefines += `\\\n// DRAW_BUFFERS => gl_FragData[] is available\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers : require\n#define DRAW_BUFFERS\n#endif\n`;\n  }\n  if (hasFeature(gl, FEATURES.GLSL_TEXTURE_LOD)) {\n    versionDefines += `\\\n// TEXTURE_LOD => texture2DLod etc are available\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n# define TEXTURE_LOD\n#define texture2DLod texture2DLodEXT\n#define texture2DProjLod texture2DProjLodEXT\n#define texture2DProjLod texture2DProjLodEXT\n#define textureCubeLod textureCubeLodEXT\n#define texture2DGrad texture2DGradEXT\n#define texture2DProjGrad texture2DProjGradEXT\n#define texture2DProjGrad texture2DProjGradEXT\n#define textureCubeGrad textureCubeGradEXT\n#endif\n`;\n  }\n  return versionDefines;\n}\n"],"file":"platform-defines.js"}