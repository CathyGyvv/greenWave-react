{"version":3,"sources":["../../../src/webgl-context/create-canvas.js"],"names":["isBrowser","isPage","document","isPageLoaded","readyState","pageLoadPromise","Promise","resolve","reject","window","onload","getPageLoadPromise","createCanvas","width","height","id","insert","canvas","createElement","style","Number","isFinite","then","body","insertBefore","firstChild","getCanvas","onError","targetCanvas","getElementById"],"mappings":"AAAA;;AAEA;AACA,SAAQA,SAAR,QAAwB,UAAxB;AAEA,MAAMC,SAASD,aAAa,OAAOE,QAAP,KAAoB,WAAhD;AACA,IAAIC,eAAeF,UAAUC,SAASE,UAAT,KAAwB,UAArD;AAEA,OAAO,MAAMC,kBAAkBJ,SAC7B,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,MAAIL,YAAJ,EAAkB;AAChBI,YAAQL,QAAR;AACA;AACD;;AACDO,SAAOC,MAAP,GAAgB,MAAM;AACpBP,mBAAe,IAAf;AACAI,YAAQL,QAAR;AACD,GAHD;AAID,CATD,CAD6B,GAW7BI,QAAQC,OAAR,CAAgB,EAAhB,CAXK;AAaP;;;;;;AAKA,OAAO,SAASI,kBAAT,GAA8B;AACnC,SAAON,eAAP;AACD;AAED;;;;;;AAKA,OAAO,SAASO,YAAT,CAAsB;AAACC,UAAQ,GAAT;AAAcC,WAAS,GAAvB;AAA4BC,OAAK,WAAjC;AAA8CC,WAAS;AAAvD,CAAtB,EAAoF;AACzF,QAAMC,SAASf,SAASgB,aAAT,CAAuB,QAAvB,CAAf;AACAD,SAAOF,EAAP,GAAYA,EAAZ;AACAE,SAAOE,KAAP,CAAaN,KAAb,GAAqBO,OAAOC,QAAP,CAAgBR,KAAhB,IAA0B,GAAEA,KAAM,IAAlC,GAAwC,MAA7D;AACAI,SAAOE,KAAP,CAAaL,MAAb,GAAsBM,OAAOC,QAAP,CAAgBP,MAAhB,IAA2B,GAAEA,MAAO,IAApC,GAA0C,MAAhE,CAJyF,CAKzF;;AACA,MAAIE,MAAJ,EAAY;AACVL,yBAAqBW,IAArB,CAA0BpB,YAAY;AACpC,YAAMqB,OAAOrB,SAASqB,IAAtB;AACAA,WAAKC,YAAL,CAAkBP,MAAlB,EAA0BM,KAAKE,UAA/B;AACD,KAHD;AAID;;AACD,SAAOR,MAAP;AACD;AAED,OAAO,SAASS,SAAT,CAAmB;AAACT,QAAD;AAASJ,OAAT;AAAgBC,QAAhB;AAAwBa,YAAU,MAAM,CAAE;AAA1C,CAAnB,EAAgE;AACrE,MAAIC,YAAJ;;AACA,MAAI,OAAOX,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,QAAI,CAACd,YAAL,EAAmB;AACjBwB,cAAS,qCAAoCV,MAAO,0BAApD;AACD;;AACDW,mBAAe1B,SAAS2B,cAAT,CAAwBZ,MAAxB,CAAf;AACD,GALD,MAKO,IAAIA,MAAJ,EAAY;AACjBW,mBAAeX,MAAf;AACD,GAFM,MAEA;AACLW,mBAAehB,aAAa;AAACG,UAAI,eAAL;AAAsBF,WAAtB;AAA6BC,YAA7B;AAAqCa;AAArC,KAAb,CAAf;AACD;;AAED,SAAOC,YAAP;AACD","sourcesContent":["// Resizing a webgl canvas\n\n/* global window, document */\nimport {isBrowser} from '../utils';\n\nconst isPage = isBrowser && typeof document !== 'undefined';\nlet isPageLoaded = isPage && document.readyState === 'complete';\n\nexport const pageLoadPromise = isPage ?\n  new Promise((resolve, reject) => {\n    if (isPageLoaded) {\n      resolve(document);\n      return;\n    }\n    window.onload = () => {\n      isPageLoaded = true;\n      resolve(document);\n    };\n  }) :\n  Promise.resolve({});\n\n/**\n * Returns a promise that resolves when the page is loaded\n * at this point the DOM can be manipulated, and e.g. a new canvas can be inserted\n * @return {Promise} - resolves when the page is loaded\n */\nexport function getPageLoadPromise() {\n  return pageLoadPromise;\n}\n\n/**\n * Create a canvas\n * @param {Number} width - set to 100%\n * @param {Number} height - set to 100%\n */\nexport function createCanvas({width = 800, height = 600, id = 'gl-canvas', insert = true}) {\n  const canvas = document.createElement('canvas');\n  canvas.id = id;\n  canvas.style.width = Number.isFinite(width) ? `${width}px` : '100%';\n  canvas.style.height = Number.isFinite(height) ? `${height}px` : '100%';\n  // add the canvas to the body element once the page has loaded\n  if (insert) {\n    getPageLoadPromise().then(document => {\n      const body = document.body;\n      body.insertBefore(canvas, body.firstChild);\n    });\n  }\n  return canvas;\n}\n\nexport function getCanvas({canvas, width, height, onError = () => {}}) {\n  let targetCanvas;\n  if (typeof canvas === 'string') {\n    if (!isPageLoaded) {\n      onError(`createGLContext called on canvas '${canvas}' before page was loaded`);\n    }\n    targetCanvas = document.getElementById(canvas);\n  } else if (canvas) {\n    targetCanvas = canvas;\n  } else {\n    targetCanvas = createCanvas({id: 'lumagl-canvas', width, height, onError});\n  }\n\n  return targetCanvas;\n}\n"],"file":"create-canvas.js"}