{"version":3,"sources":["../../../src/webgl-context/debug-context.js"],"names":["global","log","getContextData","gl","luma","enableDebug","debug","makeDebugContext","getDebugContext","getRealContext","data","realContext","WebGLDebug","warn","debugContext","WebGLDebugContext","onGLError","onValidateGLFunc","Object","assign","prototype","info","getFunctionString","functionName","functionArgs","args","glFunctionArgsToString","slice","length","err","errorMessage","glEnumToString","message","throw","Error","error","functionString","priority","break","isBreakpoint","every","breakOn","indexOf","arg","undefined"],"mappings":"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","sourcesContent":["// Depends on Khronos Debug support module being imported via \"luma.gl/debug\"\n\nimport {global} from '../utils/globals';\nimport {log} from '../utils';\n\n// Helper to get shared context data\nfunction getContextData(gl) {\n  gl.luma = gl.luma || {};\n  return gl.luma;\n}\n\n// Enable or disable debug checks in debug contexts\n// Non-debug contexts do not have checks (to ensure performance)\n// Turning off debug for debug contexts removes most of the performance penalty\nexport function enableDebug(debug) {\n  log.debug = debug;\n}\n\n// Returns (a potentially new) context with debug instrumentation turned off or on.\n// Note that this actually returns a new context\nexport function makeDebugContext(gl, {debug = true} = {}) {\n  if (gl === null) { // Return to ensure we don't create a context in this case.\n    return null;\n  }\n\n  return debug ? getDebugContext(gl) : getRealContext(gl);\n}\n\n// Returns the real context from either of the real/debug contexts\nexport function getRealContext(gl) {\n  if (gl === null) { // Return to ensure we don't create a context in this case.\n    return null;\n  }\n\n  const data = getContextData(gl);\n  // If the context has a realContext member, it is a debug context so return the realContext\n  return data.realContext ? data.realContext : gl;\n}\n\n// Returns the debug context from either of the real/debug contexts\nexport function getDebugContext(gl) {\n  if (gl === null) { // Return to ensure we don't create a context in this case.\n    return null;\n  }\n\n  if (!global.WebGLDebug) {\n    log.warn('WebGL debug mode activation failed. import \"luma.gl/debug\" to enable.')();\n    return gl;\n  }\n\n  const data = getContextData(gl);\n  // If this *is* a debug context, return itself\n  if (data.realContext) {\n    return gl;\n  }\n\n  // If this already has a debug context, return it.\n  if (data.debugContext) {\n    return data.debugContext;\n  }\n\n  // Create a new debug context\n  class WebGLDebugContext {}\n  const debugContext = global.WebGLDebug.makeDebugContext(gl, onGLError, onValidateGLFunc);\n  Object.assign(WebGLDebugContext.prototype, debugContext);\n\n  // Store the debug context\n  data.debugContext = debugContext;\n  debugContext.debug = true;\n  debugContext.gl = gl;\n\n  log.info('debug context actived.');\n\n  // Return it\n  return debugContext;\n}\n\n// DEBUG TRACING\n\nfunction getFunctionString(functionName, functionArgs) {\n  let args = global.WebGLDebug.glFunctionArgsToString(functionName, functionArgs);\n  args = `${args.slice(0, 100)}${args.length > 100 ? '...' : ''}`;\n  return `gl.${functionName}(${args})`;\n}\n\nfunction onGLError(err, functionName, args) {\n  const errorMessage = global.WebGLDebug.glEnumToString(err);\n  const functionArgs = global.WebGLDebug.glFunctionArgsToString(functionName, args);\n  const message = `${errorMessage} in gl.${functionName}(${functionArgs})`;\n  if (log.throw) {\n    throw new Error(message);\n  } else {\n    log.error(message)();\n    debugger; // eslint-disable-line\n  }\n}\n\n// Don't generate function string until it is needed\nfunction onValidateGLFunc(functionName, functionArgs) {\n  let functionString;\n  if (log.priority >= 4) {\n    functionString = getFunctionString(functionName, functionArgs);\n    log.info(4, functionString)();\n  }\n\n  if (log.break) {\n    functionString = functionString || getFunctionString(functionName, functionArgs);\n    const isBreakpoint = log.break &&\n      log.break.every(breakOn => functionString.indexOf(breakOn) !== -1);\n    if (isBreakpoint) {\n      debugger; // eslint-disable-line\n    }\n  }\n\n  for (const arg of functionArgs) {\n    if (arg === undefined) {\n      functionString = functionString || getFunctionString(functionName, functionArgs);\n      if (log.throw) {\n        throw new Error(`Undefined argument: ${functionString}`);\n      } else {\n        log.error(`Undefined argument: ${functionString}`);\n        debugger; // eslint-disable-line\n      }\n    }\n  }\n}\n"],"file":"debug-context.js"}