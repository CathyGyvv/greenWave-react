{"version":3,"sources":["../../../src/webgl/query.js"],"names":["Resource","FEATURES","hasFeatures","polyfillContext","isWebGL2","queryManager","noop","x","ERR_GPU_DISJOINT","ERR_TIMER_QUERY_NOT_SUPPORTED","GL_QUERY_COUNTER_BITS_EXT","GL_QUERY_RESULT","GL_QUERY_RESULT_AVAILABLE","GL_TIME_ELAPSED_EXT","GL_TIMESTAMP_EXT","GL_GPU_DISJOINT_EXT","GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","GL_ANY_SAMPLES_PASSED","GL_ANY_SAMPLES_PASSED_CONSERVATIVE","Query","isSupported","gl","queries","timers","timestamps","webgl2","hasTimerQueries","TIMER_QUERY","supported","queryCounterBits","getQuery","constructor","opts","onComplete","onError","target","promise","Object","seal","beginTimeElapsedQuery","begin","beginOcclusionQuery","conservative","beginTransformFeedbackQuery","getTimestamp","beginQuery","queryCounter","handle","error","rejectQuery","end","ext","endQuery","cancel","cancelQuery","isResultAvailable","getQueryParameter","getResult","result","Number","isFinite","poll","_createHandle","createQuery","_deleteHandle","deleteQuery","setInvalidator","queryType","errorMessage","checkInvalid","getParameter"],"mappings":"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","sourcesContent":["// WebGL2 Query (also handles disjoint timer extensions)\n\nimport Resource from './resource';\nimport {FEATURES, hasFeatures} from '../webgl-context/context-features';\nimport {polyfillContext} from '../webgl-context';\nimport {isWebGL2} from '../webgl-utils';\nimport queryManager from '../webgl-utils/query-manager';\n\nconst noop = x => x;\n\nconst ERR_GPU_DISJOINT = 'Disjoint GPU operation invalidated timer queries';\nconst ERR_TIMER_QUERY_NOT_SUPPORTED = 'Timer queries require \"EXT_disjoint_timer_query\" extension';\n\nconst GL_QUERY_COUNTER_BITS_EXT = 0x8864; // # bits in query result for the given target.\n\nconst GL_QUERY_RESULT = 0x8866;           // Returns a GLuint containing the query result.\nconst GL_QUERY_RESULT_AVAILABLE = 0x8867; // whether query result is available.\n\nconst GL_TIME_ELAPSED_EXT = 0x88BF;       // Elapsed time (in nanoseconds).\nconst GL_TIMESTAMP_EXT = 0x8E28;          // The current time.\nconst GL_GPU_DISJOINT_EXT = 0x8FBB;       // Whether GPU performed any disjoint operation.\n\nconst GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88; // #primitives written to feedback buffers\nconst GL_ANY_SAMPLES_PASSED = 0x8C2F;             // Occlusion query (if drawing passed depth test)\nconst GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;  // Occlusion query less accurate/faster version\n\nexport default class Query extends Resource {\n\n  // Returns true if Query is supported by the WebGL implementation\n  // Can also check whether timestamp queries are available.\n  static isSupported(gl, {\n    queries = false,\n    timers = false,\n    timestamps = false\n  } = {}) {\n    const webgl2 = isWebGL2(gl);\n    const hasTimerQueries = hasFeatures(gl, FEATURES.TIMER_QUERY);\n\n    let supported = webgl2 || hasTimerQueries;\n    if (queries) {\n      supported = supported && webgl2;\n    }\n\n    if (timers) {\n      supported = supported && hasTimerQueries;\n    }\n\n    if (timestamps) {\n      polyfillContext(gl);\n      const queryCounterBits = gl.getQuery(GL_TIMESTAMP_EXT, GL_QUERY_COUNTER_BITS_EXT);\n      supported = supported && (queryCounterBits > 0);\n    }\n\n    return supported;\n  }\n\n  // Create a query class\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    const {\n      onComplete = noop,\n      onError = noop\n    } = opts;\n\n    this.target = null;\n    this.onComplete = onComplete;\n    this.onError = onError;\n\n    // query manager needs a promise field\n    this.promise = null;\n\n    Object.seal(this);\n  }\n\n  // Shortcut for timer query (dependent on extension in both WebGL1 and 2)\n  // Measures GPU time delta between this call and a matching `end` call in the\n  // GPU instruction stream.\n  beginTimeElapsedQuery() {\n    return this.begin(GL_TIME_ELAPSED_EXT);\n  }\n\n  // Shortcut for occlusion queries\n  beginOcclusionQuery({conservative = false} = {}) {\n    return this.begin(conservative ? GL_ANY_SAMPLES_PASSED_CONSERVATIVE : GL_ANY_SAMPLES_PASSED);\n  }\n\n  // Shortcut for transformFeedbackQuery\n  beginTransformFeedbackQuery() {\n    return this.begin(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);\n  }\n\n  // Generates a GPU time stamp when the GPU instruction stream reaches this instruction.\n  // To measure time deltas, two timestamp queries are needed.\n  // Note: timestamp() queries may not be available even when the timer query extension is.\n  getTimestamp() {\n    queryManager.beginQuery(this, this.onComplete, this.onError);\n    try {\n      this.gl.queryCounter(this.handle, GL_TIMESTAMP_EXT);\n    } catch (error) {\n      queryManager.rejectQuery(this, ERR_TIMER_QUERY_NOT_SUPPORTED);\n    }\n    return this;\n  }\n\n  // Due to OpenGL API limitations, after calling `begin()` on one Query\n  // instance, `end()` must be called on that same instance before\n  // calling `begin()` on another query. While there can be multiple\n  // outstanding queries representing disjoint `begin()`/`end()` intervals.\n  // It is not possible to interleave or overlap `begin` and `end` calls.\n  begin(target) {\n    // - Triggering a new query when a Query is already tracking an\n    //   unresolved query causes that query to be cancelled.\n    queryManager.beginQuery(this, this.onComplete, this.onError);\n    this.target = target;\n\n    try {\n      this.gl.beginQuery(this.target, this.handle);\n    } catch (error) {\n      queryManager.rejectQuery(this, 'Query not supported');\n    }\n    return this;\n  }\n\n  // ends the current query\n  end() {\n    // Note: calling end does not affect the pending promise\n    if (this.target) {\n      this.ext.endQuery(this.target);\n      this.target = null;\n    }\n    return this;\n  }\n\n  // Cancels a pending query\n  cancel() {\n    this.end();\n    queryManager.cancelQuery(this);\n    return this;\n  }\n\n  // Returns true if the query result is available\n  isResultAvailable() {\n    return this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT_AVAILABLE);\n  }\n\n  // Returns the query result, converted to milliseconds to match JavaScript conventions.\n  // TODO - what about non-timer queries\n  getResult() {\n    const result = this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT);\n    return Number.isFinite(result) ? result / 1e6 : 0;\n  }\n\n  static poll(gl) {\n    queryManager.poll(gl);\n  }\n\n  _createHandle() {\n    return Query.isSupported(this.gl) ? this.gl.createQuery() : null;\n  }\n\n  _deleteHandle() {\n    queryManager.deleteQuery(this);\n    this.gl.deleteQuery(this.handle);\n  }\n}\n\n// NOTE: This call lets the queryManager know how to detect disjoint GPU state\n// It will check dsjoint state on polls and before adding a new query\n// and reject any outstanding TimerQueries with our supplied error message.\nqueryManager.setInvalidator({\n  queryType: Query,\n  errorMessage: ERR_GPU_DISJOINT,\n  // Note: Querying the disjoint state resets it\n  checkInvalid: gl => gl.getParameter(GL_GPU_DISJOINT_EXT)\n});\n"],"file":"query.js"}