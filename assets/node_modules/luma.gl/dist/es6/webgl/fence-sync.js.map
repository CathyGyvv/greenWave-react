{"version":3,"sources":["../../../src/webgl/fence-sync.js"],"names":["GL","Resource","assertWebGL2Context","queryManager","FenceSync","constructor","gl","opts","promise","Object","seal","wait","flags","timeout","TIMEOUT_IGNORED","waitSync","handle","clientWait","SYNC_FLUSH_COMMANDS_BIT","result","clientWaitSync","ALREADY_SIGNALED","TIMEOUT_EXPIRED","CONDITION_SATISFIED","WAIT_FAILED","cancel","cancelQuery","isSignaled","getParameter","SYNC_STATUS","SIGNALED","isResultAvailable","getResult","pname","getSyncParameter","_createHandle","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","_deleteHandle","deleteQuery","deleteSync"],"mappings":"AAAA,OAAOA,EAAP,MAAe,cAAf;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAAQC,mBAAR,QAAkC,gBAAlC;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AAEA,eAAe,MAAMC,SAAN,SAAwBH,QAAxB,CAAiC;AAC9C;;;;AAIAI,cAAYC,EAAZ,EAAgBC,IAAhB,EAAsB;AACpBL,wBAAoBI,EAApB;AACA,UAAMA,EAAN,EAAUC,IAAV,EAFoB,CAGpB;;AACA,SAAKC,OAAL,GAAe,IAAf;AACAC,WAAOC,IAAP,CAAY,IAAZ;AACD;AAED;;;;;;;;;;;;AAUAC,OAAK;AAACC,YAAQ,CAAT;AAAYC,cAAUb,GAAGc;AAAzB,MAA4C,EAAjD,EAAqD;AACnD,SAAKR,EAAL,CAAQS,QAAR,CAAiB,KAAKC,MAAtB,EAA8BJ,KAA9B,EAAqCC,OAArC;AACA,WAAO,IAAP;AACD;AAED;;;;;;;;AAMAI,aAAW;AAACL,YAAQZ,GAAGkB,uBAAZ;AAAqCL;AAArC,GAAX,EAA0D;AACxD,UAAMM,SAAS,KAAKb,EAAL,CAAQc,cAAR,CAAuB,KAAKJ,MAA5B,EAAoCJ,KAApC,EAA2CC,OAA3C,CAAf,CADwD,CAExD;;AACA,YAAQM,MAAR;AACA,WAAKnB,GAAGqB,gBAAR;AACE;AACA;;AACF,WAAKrB,GAAGsB,eAAR;AACE;AACA;;AACF,WAAKtB,GAAGuB,mBAAR;AACE;AACA;;AACF,WAAKvB,GAAGwB,WAAR;AACE;AACA;;AACF;AAbA;;AAeA,WAAOL,MAAP;AACD;;AAEDM,WAAS;AACPtB,iBAAauB,WAAb,CAAyB,IAAzB;AACD;;AAEDC,eAAa;AACX,WAAO,KAAKC,YAAL,CAAkB5B,GAAG6B,WAArB,MAAsC7B,GAAG8B,QAAhD;AACD,GA7D6C,CA+D9C;;;AACAC,sBAAoB;AAClB,WAAO,KAAKJ,UAAL,EAAP;AACD;;AAEDK,cAAY;AACV,WAAO,KAAKL,UAAL,EAAP;AACD;;AAEDC,eAAaK,KAAb,EAAoB;AAClB,WAAO,KAAK3B,EAAL,CAAQ4B,gBAAR,CAAyB,KAAKlB,MAA9B,EAAsCiB,KAAtC,CAAP;AACD,GA1E6C,CA4E9C;;;AAEAE,kBAAgB;AACd,WAAO,KAAK7B,EAAL,CAAQ8B,SAAR,CAAkBpC,GAAGqC,0BAArB,EAAiD,CAAjD,CAAP;AACD;;AAEDC,kBAAgB;AACdnC,iBAAaoC,WAAb,CAAyB,IAAzB;AACA,SAAKjC,EAAL,CAAQkC,UAAR,CAAmB,KAAKxB,MAAxB;AACD;;AArF6C","sourcesContent":["import GL from '../constants';\nimport Resource from './resource';\nimport {assertWebGL2Context} from '../webgl-utils';\nimport queryManager from '../webgl-utils/query-manager';\n\nexport default class FenceSync extends Resource {\n  /*\n   * @class\n   * @param {WebGL2RenderingContext} gl\n   */\n  constructor(gl, opts) {\n    assertWebGL2Context(gl);\n    super(gl, opts);\n    // query manager needs a promise field\n    this.promise = null;\n    Object.seal(this);\n  }\n\n  /**\n   * The method is a no-op in the absence of the possibility of\n   * synchronizing between multiple GL contexts.\n   * Prevent commands from being added to GPU command queue.\n   * Note: commands can still be buffered in driver.\n   *\n   * @param {GLbitfield} flags\n   * @param {GLint64} timeout\n   * @return {Sync} status\n   */\n  wait({flags = 0, timeout = GL.TIMEOUT_IGNORED} = {}) {\n    this.gl.waitSync(this.handle, flags, timeout);\n    return this;\n  }\n\n  /**\n   * Block all CPU operations until fence is signalled\n   * @param {GLbitfield} flags\n   * @param {GLint64} timeout\n   * @return {GLenum} result\n   */\n  clientWait({flags = GL.SYNC_FLUSH_COMMANDS_BIT, timeout}) {\n    const result = this.gl.clientWaitSync(this.handle, flags, timeout);\n    // TODO - map to boolean?\n    switch (result) {\n    case GL.ALREADY_SIGNALED:\n      // Indicates that sync object was signaled when this method was called.\n      break;\n    case GL.TIMEOUT_EXPIRED:\n      // Indicates that timeout time passed, sync object did not become signaled\n      break;\n    case GL.CONDITION_SATISFIED:\n      // Indicates that sync object was signaled before timeout expired.\n      break;\n    case GL.WAIT_FAILED:\n      // Indicates that an error occurred during execution.\n      break;\n    default:\n    }\n    return result;\n  }\n\n  cancel() {\n    queryManager.cancelQuery(this);\n  }\n\n  isSignaled() {\n    return this.getParameter(GL.SYNC_STATUS) === GL.SIGNALED;\n  }\n\n  // TODO - Query manager needs these?\n  isResultAvailable() {\n    return this.isSignaled();\n  }\n\n  getResult() {\n    return this.isSignaled();\n  }\n\n  getParameter(pname) {\n    return this.gl.getSyncParameter(this.handle, pname);\n  }\n\n  // PRIVATE METHODS\n\n  _createHandle() {\n    return this.gl.fenceSync(GL.SYNC_GPU_COMMANDS_COMPLETE, 0);\n  }\n\n  _deleteHandle() {\n    queryManager.deleteQuery(this);\n    this.gl.deleteSync(this.handle);\n  }\n}\n"],"file":"fence-sync.js"}