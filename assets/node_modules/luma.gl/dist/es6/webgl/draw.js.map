{"version":3,"sources":["../../../src/webgl/draw.js"],"names":["GL","assertWebGLContext","assertWebGL2Context","getKeyValue","assert","draw","gl","drawMode","TRIANGLES","vertexCount","offset","isIndexed","indexType","UNSIGNED_SHORT","isInstanced","instanceCount","extension","getExtension","webgl2","isWebGL2","context","suffix","drawElements","drawArrays"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,EAAP,MAAe,cAAf;AACA,SAAQC,kBAAR,EAA4BC,mBAA5B,EAAiDC,WAAjD,QAAmE,gBAAnE;AACA,OAAOC,MAAP,MAAmB,iBAAnB,C,CAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,IAAT,CAAcC,EAAd,EAAkB;AACvBC,aAAWP,GAAGQ,SADS;AAEvBC,aAFuB;AAGvBC,WAAS,CAHc;AAIvBC,cAAY,KAJW;AAKvBC,cAAYZ,GAAGa,cALQ;AAMvBC,gBAAc,KANS;AAOvBC,kBAAgB;AAPO,CAAlB,EAQJ;AACDd,qBAAmBK,EAAnB;AAEA,QAAMU,YAAYV,GAAGW,YAAH,CAAgB,wBAAhB,CAAlB,CAHC,CAKD;;AACA,MAAIH,WAAJ,EAAiB;AACf,UAAMI,SAASC,SAASb,EAAT,CAAf;AACA,UAAMU,YAAYV,GAAGW,YAAH,CAAgB,wBAAhB,CAAlB;AACA,UAAMG,UAAUF,SAASZ,EAAT,GAAcU,SAA9B;AACA,UAAMK,SAASH,SAAS,EAAT,GAAc,OAA7B;AACA,UAAMI,eAAe,0BAA0BD,MAA/C;AACA,UAAME,aAAa,wBAAwBF,MAA3C;;AAEA,QAAIV,SAAJ,EAAe;AACbS,cAAQE,YAAR,EACEf,QADF,EACYE,WADZ,EACyBG,SADzB,EACoCF,MADpC,EAC4CK,aAD5C;AAGD,KAJD,MAIO;AACLK,cAAQG,UAAR,EACEhB,QADF,EACYG,MADZ,EACoBD,WADpB,EACiCM,aADjC;AAGD;AACF,GAjBD,MAiBO,IAAIJ,SAAJ,EAAe;AACpBL,OAAGgB,YAAH,CAAgBf,QAAhB,EAA0BE,WAA1B,EAAuCG,SAAvC,EAAkDF,MAAlD;AACD,GAFM,MAEA;AACLJ,OAAGiB,UAAH,CAAchB,QAAd,EAAwBG,MAAxB,EAAgCD,WAAhC;AACD;AACF","sourcesContent":["/* eslint-disable */\n// TODO - generic draw call\n// One of the good things about GL is that there are so many ways to draw things\nimport GL from '../constants';\nimport {assertWebGLContext, assertWebGL2Context, getKeyValue} from '../webgl-utils';\nimport assert from '../utils/assert';\n\n// A good thing about webGL is that there are so many ways to draw things,\n// e.g. depending on whether data is indexed and/or isInstanced.\n// This function unifies those into a single call with simple parameters\n// that have sane defaults.\nexport function draw(gl, {\n  drawMode = GL.TRIANGLES,\n  vertexCount,\n  offset = 0,\n  isIndexed = false,\n  indexType = GL.UNSIGNED_SHORT,\n  isInstanced = false,\n  instanceCount = 0\n}) {\n  assertWebGLContext(gl);\n\n  const extension = gl.getExtension('ANGLE_instanced_arrays');\n\n  // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n  if (isInstanced) {\n    const webgl2 = isWebGL2(gl);\n    const extension = gl.getExtension('ANGLE_instanced_arrays');\n    const context = webgl2 ? gl : extension;\n    const suffix = webgl2 ? '' : 'ANGLE';\n    const drawElements = 'drawElementsInstanced' + suffix;\n    const drawArrays = 'drawArraysInstanced' + suffix;\n\n    if (isIndexed) {\n      context[drawElements](\n        drawMode, vertexCount, indexType, offset, instanceCount\n      );\n    } else {\n      context[drawArrays](\n        drawMode, offset, vertexCount, instanceCount\n      );\n    }\n  } else if (isIndexed) {\n    gl.drawElements(drawMode, vertexCount, indexType, offset);\n  } else {\n    gl.drawArrays(drawMode, offset, vertexCount);\n  }\n}\n"],"file":"draw.js"}