{"version":3,"sources":["../../../src/webgl/shader.js"],"names":["Resource","parseGLSLCompilerError","getShaderName","assertWebGLContext","uid","log","assert","ERR_SOURCE","GL_FRAGMENT_SHADER","GL_VERTEX_SHADER","GL_COMPILE_STATUS","GL_SHADER_TYPE","Shader","getTypeName","shaderType","constructor","gl","source","id","opts","initialize","shaderName","_compile","getParameter","pname","getShaderParameter","handle","toString","getName","getSource","getShaderSource","getTranslatedSource","extension","getExtension","getTranslatedShaderSource","shaderSource","compileShader","compileStatus","infoLog","getShaderInfoLog","errors","warnings","error","warn","Error","_deleteHandle","deleteShader","_getOptsFromHandle","type","VertexShader","_createHandle","createShader","FragmentShader"],"mappings":"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","sourcesContent":["import Resource from './resource';\nimport {parseGLSLCompilerError, getShaderName} from '../webgl-utils';\nimport {assertWebGLContext} from '../webgl-utils';\nimport {uid, log} from '../utils';\nimport assert from '../utils/assert';\n\nconst ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\n\nconst GL_FRAGMENT_SHADER = 0x8B30;\nconst GL_VERTEX_SHADER = 0x8B31;\nconst GL_COMPILE_STATUS = 0x8B81;\nconst GL_SHADER_TYPE = 0x8B4F;\n\n// For now this is an internal class\nexport class Shader extends Resource {\n\n  static getTypeName(shaderType) {\n    switch (shaderType) {\n    case GL_VERTEX_SHADER: return 'vertex-shader';\n    case GL_FRAGMENT_SHADER: return 'fragment-shader';\n    default: assert(false); return 'unknown';\n    }\n  }\n\n  /* eslint-disable max-statements */\n  constructor(gl, source, shaderType) {\n    assertWebGLContext(gl);\n    assert(typeof source === 'string', ERR_SOURCE);\n\n    super(gl, {id: getShaderName(source) || uid(Shader.getTypeName(shaderType))});\n\n    this.shaderType = shaderType;\n    this.source = source;\n\n    this.opts.source = source;\n    this.initialize(this.opts);\n  }\n\n  initialize({source}) {\n    const shaderName = getShaderName(source);\n    if (shaderName) {\n      this.id = uid(shaderName);\n    }\n    this._compile(source);\n    this.opts.source = source;\n  }\n\n  // Accessors\n\n  getParameter(pname) {\n    return this.gl.getShaderParameter(this.handle, pname);\n  }\n\n  toString() {\n    return `${this.getTypeName(this.shaderType)}:${this.id}`;\n  }\n\n  getName() {\n    return getShaderName(this.opts.source) || 'unnamed-shader';\n  }\n\n  getSource() {\n    return this.gl.getShaderSource(this.handle);\n  }\n\n  // Debug method - Returns translated source if available\n  getTranslatedSource() {\n    const extension = this.gl.getExtension('WEBGL_debug_shaders');\n    return extension ?\n      extension.getTranslatedShaderSource(this.handle) :\n      'No translated source available. WEBGL_debug_shaders not implemented';\n  }\n\n  // PRIVATE METHODS\n  _compile() {\n    this.gl.shaderSource(this.handle, this.source);\n    this.gl.compileShader(this.handle);\n\n    // TODO - For performance reasons, avoid checking shader compilation errors on production?\n    // TODO - Load log even when no error reported, to catch warnings?\n    // https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings\n    const compileStatus = this.getParameter(GL_COMPILE_STATUS);\n    if (!compileStatus) {\n      const infoLog = this.gl.getShaderInfoLog(this.handle);\n      const {shaderName, errors, warnings} =\n        parseGLSLCompilerError(infoLog, this.source, this.shaderType);\n      log.error(`GLSL compilation errors in ${shaderName}\\n${errors}`)();\n      log.warn(`GLSL compilation warnings in ${shaderName}\\n${warnings}`)();\n      throw new Error(`GLSL compilation errors in ${shaderName}`);\n    }\n  }\n\n  _deleteHandle() {\n    this.gl.deleteShader(this.handle);\n  }\n\n  _getOptsFromHandle() {\n    return {\n      type: this.getParameter(GL_SHADER_TYPE),\n      source: this.getSource()\n    };\n  }\n}\n\nexport class VertexShader extends Shader {\n  constructor(gl, source) {\n    super(gl, source, GL_VERTEX_SHADER);\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL_VERTEX_SHADER);\n  }\n}\n\nexport class FragmentShader extends Shader {\n  constructor(gl, source) {\n    super(gl, source, GL_FRAGMENT_SHADER);\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL_FRAGMENT_SHADER);\n  }\n}\n"],"file":"shader.js"}