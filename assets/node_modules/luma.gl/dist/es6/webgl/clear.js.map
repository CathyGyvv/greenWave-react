{"version":3,"sources":["../../../src/webgl/clear.js"],"names":["withParameters","assertWebGL2Context","assert","GL_DEPTH_BUFFER_BIT","GL_STENCIL_BUFFER_BIT","GL_COLOR_BUFFER_BIT","GL_COLOR","GL_DEPTH","GL_STENCIL","GL_DEPTH_STENCIL","ERR_ARGUMENTS","clear","gl","framebuffer","color","depth","stencil","parameters","clearFlags","clearColor","clearDepth","clearStencil","clearBuffer","buffer","drawBuffer","value","constructor","Int32Array","clearBufferiv","Uint32Array","clearBufferuiv","Float32Array","clearBufferfv","clearBufferfi"],"mappings":";;;;;;;;AAAA,SAAQA,cAAR,QAA6B,gCAA7B;AACA,SAAQC,mBAAR,QAAkC,gBAAlC;AACA,OAAOC,MAAP,MAAmB,iBAAnB,C,CAEA;;AACA,MAAMC,sBAAsB,UAA5B;AACA,MAAMC,wBAAwB,UAA9B;AACA,MAAMC,sBAAsB,UAA5B;AAEA,MAAMC,WAAW,MAAjB;AACA,MAAMC,WAAW,MAAjB;AACA,MAAMC,aAAa,MAAnB;AACA,MAAMC,mBAAmB,MAAzB,C,CAEA;;AACA,MAAMC,gBAAgB,sBAAtB,C,CAEA;;AACA,OAAO,SAASC,KAAT,CAAeC,EAAf,EAAmB;AACxBC,gBAAc,IADU;AAExBC,UAAQ,IAFgB;AAGxBC,UAAQ,IAHgB;AAIxBC,YAAU;AAJc,IAKtB,EALG,EAKC;AACN,QAAMC,aAAa,EAAnB;;AAEA,MAAIJ,WAAJ,EAAiB;AACfI,eAAWJ,WAAX,GAAyBA,WAAzB;AACD;;AAED,MAAIK,aAAa,CAAjB;;AAEA,MAAIJ,KAAJ,EAAW;AACTI,kBAAcb,mBAAd;;AACA,QAAIS,UAAU,IAAd,EAAoB;AAClBG,iBAAWE,UAAX,GAAwBL,KAAxB;AACD;AACF;;AAED,MAAIC,KAAJ,EAAW;AACTG,kBAAcf,mBAAd;;AACA,QAAIY,UAAU,IAAd,EAAoB;AAClBE,iBAAWG,UAAX,GAAwBL,KAAxB;AACD;AACF;;AAED,MAAIC,OAAJ,EAAa;AACXE,kBAAcd,qBAAd;;AACA,QAAIW,UAAU,IAAd,EAAoB;AAClBE,iBAAWI,YAAX,GAA0BN,KAA1B;AACD;AACF;;AAEDb,SAAOgB,eAAe,CAAtB,EAAyBR,aAAzB,EA9BM,CAgCN;;AACAV,iBAAeY,EAAf,EAAmBK,UAAnB,EAA+B,MAAM;AACnCL,OAAGD,KAAH,CAASO,UAAT;AACD,GAFD;AAGD,C,CAED;;AACA,OAAO,SAASI,WAAT,CAAqBV,EAArB,EAAyB;AAC9BC,gBAAc,IADgB;AAE9BU,WAASjB,QAFqB;AAG9BkB,eAAa,CAHiB;AAI9BC,UAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAJsB,IAK5B,EALG,EAKC;AACNxB,sBAAoBW,EAApB;AAEAZ,iBAAeY,EAAf,EAAmB;AAACC;AAAD,GAAnB,EAAkC,MAAM;AAEtC;AACA,YAAQU,MAAR;AACA,WAAKjB,QAAL;AACE,gBAAQmB,MAAMC,WAAd;AACA,eAAKC,UAAL;AACEf,eAAGgB,aAAH,CAAiBL,MAAjB,EAAyBC,UAAzB,EAAqCC,KAArC;AACA;;AACF,eAAKI,WAAL;AACEjB,eAAGkB,cAAH,CAAkBP,MAAlB,EAA0BC,UAA1B,EAAsCC,KAAtC;AACA;;AACF,eAAKM,YAAL;AACA;AACEnB,eAAGoB,aAAH,CAAiBT,MAAjB,EAAyBC,UAAzB,EAAqCC,KAArC;AATF;;AAWA;;AAEF,WAAKlB,QAAL;AACEK,WAAGoB,aAAH,CAAiBzB,QAAjB,EAA2B,CAA3B,EAA8B,CAACkB,KAAD,CAA9B;AACA;;AAEF,WAAKjB,UAAL;AACEI,WAAGgB,aAAH,CAAiBpB,UAAjB,EAA6B,CAA7B,EAAgC,CAACiB,KAAD,CAAhC;AACA;;AAEF,WAAKhB,gBAAL;AAAA,sCAC2BgB,KAD3B;AAAA,cACSV,KADT;AAAA,cACgBC,OADhB;;AAEEJ,WAAGqB,aAAH,CAAiBxB,gBAAjB,EAAmC,CAAnC,EAAsCM,KAAtC,EAA6CC,OAA7C;AACA;;AAEF;AACEd,eAAO,KAAP,EAAcQ,aAAd;AA7BF;AA+BD,GAlCD;AAmCD","sourcesContent":["import {withParameters} from '../webgl-context/context-state';\nimport {assertWebGL2Context} from '../webgl-utils';\nimport assert from '../utils/assert';\n\n// Should collapse during minification\nconst GL_DEPTH_BUFFER_BIT = 0x00000100;\nconst GL_STENCIL_BUFFER_BIT = 0x00000400;\nconst GL_COLOR_BUFFER_BIT = 0x00004000;\n\nconst GL_COLOR = 0x1800;\nconst GL_DEPTH = 0x1801;\nconst GL_STENCIL = 0x1802;\nconst GL_DEPTH_STENCIL = 0x84F9;\n\n// Should disappear if asserts are removed\nconst ERR_ARGUMENTS = 'clear: bad arguments';\n\n// Optionally clears depth, color and stencil buffers\nexport function clear(gl, {\n  framebuffer = null,\n  color = null,\n  depth = null,\n  stencil = null\n} = {}) {\n  const parameters = {};\n\n  if (framebuffer) {\n    parameters.framebuffer = framebuffer;\n  }\n\n  let clearFlags = 0;\n\n  if (color) {\n    clearFlags |= GL_COLOR_BUFFER_BIT;\n    if (color !== true) {\n      parameters.clearColor = color;\n    }\n  }\n\n  if (depth) {\n    clearFlags |= GL_DEPTH_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearDepth = depth;\n    }\n  }\n\n  if (stencil) {\n    clearFlags |= GL_STENCIL_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearStencil = depth;\n    }\n  }\n\n  assert(clearFlags !== 0, ERR_ARGUMENTS);\n\n  // Temporarily set any clear \"colors\" and call clear\n  withParameters(gl, parameters, () => {\n    gl.clear(clearFlags);\n  });\n}\n\n// WebGL2 - clear a specific drawing buffer\nexport function clearBuffer(gl, {\n  framebuffer = null,\n  buffer = GL_COLOR,\n  drawBuffer = 0,\n  value = [0, 0, 0, 0]\n} = {}) {\n  assertWebGL2Context(gl);\n\n  withParameters(gl, {framebuffer}, () => {\n\n    // Method selection per OpenGL ES 3 docs\n    switch (buffer) {\n    case GL_COLOR:\n      switch (value.constructor) {\n      case Int32Array:\n        gl.clearBufferiv(buffer, drawBuffer, value);\n        break;\n      case Uint32Array:\n        gl.clearBufferuiv(buffer, drawBuffer, value);\n        break;\n      case Float32Array:\n      default:\n        gl.clearBufferfv(buffer, drawBuffer, value);\n      }\n      break;\n\n    case GL_DEPTH:\n      gl.clearBufferfv(GL_DEPTH, 0, [value]);\n      break;\n\n    case GL_STENCIL:\n      gl.clearBufferiv(GL_STENCIL, 0, [value]);\n      break;\n\n    case GL_DEPTH_STENCIL:\n      const [depth, stencil] = value;\n      gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);\n      break;\n\n    default:\n      assert(false, ERR_ARGUMENTS);\n    }\n  });\n}\n"],"file":"clear.js"}