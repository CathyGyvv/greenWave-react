{"version":3,"sources":["../../../src/webgl/uniform-buffer-layout.js"],"names":["assert","ERR_ARGUMENT","GL_INT","GL_INT_VEC2","GL_INT_VEC3","GL_INT_VEC4","GL_FLOAT","GL_FLOAT_VEC2","GL_FLOAT_VEC3","GL_FLOAT_VEC4","GL_BOOL","GL_BOOL_VEC2","GL_BOOL_VEC3","GL_BOOL_VEC4","GL_UNSIGNED_INT","GL_UNSIGNED_INT_VEC2","GL_UNSIGNED_INT_VEC3","GL_UNSIGNED_INT_VEC4","GL_FLOAT_MAT2","GL_FLOAT_MAT3","GL_FLOAT_MAT4","GL_FLOAT_MAT2x3","GL_FLOAT_MAT2x4","GL_FLOAT_MAT3x2","GL_FLOAT_MAT3x4","GL_FLOAT_MAT4x2","GL_FLOAT_MAT4x3","UNIFORM_TYPES","UniformBufferLayout","constructor","layout","size","key","_addUniform","data","Float32Array","typedArray","Int32Array","buffer","Uint32Array","getBytes","getData","getSubData","index","offset","undefined","begin","offsets","end","sizes","subarray","setUniforms","values","_setValue","value","type","set","uniformType","definition","count","_alignTo"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport assert from '../utils/assert';\n\nconst ERR_ARGUMENT = 'UniformBufferLayout illegal argument';\n\n// Local constants - these will \"collapse\" during minification\nconst GL_INT = 0x1404;\nconst GL_INT_VEC2 = 0x8B53;\nconst GL_INT_VEC3 = 0x8B54;\nconst GL_INT_VEC4 = 0x8B55;\n\nconst GL_FLOAT = 0x1406;\nconst GL_FLOAT_VEC2 = 0x8B50;\nconst GL_FLOAT_VEC3 = 0x8B51;\nconst GL_FLOAT_VEC4 = 0x8B52;\n\nconst GL_BOOL = 0x8B56;\nconst GL_BOOL_VEC2 = 0x8B57;\nconst GL_BOOL_VEC3 = 0x8B58;\nconst GL_BOOL_VEC4 = 0x8B59;\n\nconst GL_UNSIGNED_INT = 0x1405;\nconst GL_UNSIGNED_INT_VEC2 = 0x8DC6;\nconst GL_UNSIGNED_INT_VEC3 = 0x8DC7;\nconst GL_UNSIGNED_INT_VEC4 = 0x8DC8;\n\nconst GL_FLOAT_MAT2 = 0x8B5A;\nconst GL_FLOAT_MAT3 = 0x8B5B;\nconst GL_FLOAT_MAT4 = 0x8B5C;\n\nconst GL_FLOAT_MAT2x3 = 0x8B65;\nconst GL_FLOAT_MAT2x4 = 0x8B66;\nconst GL_FLOAT_MAT3x2 = 0x8B67;\nconst GL_FLOAT_MAT3x4 = 0x8B68;\nconst GL_FLOAT_MAT4x2 = 0x8B69;\nconst GL_FLOAT_MAT4x3 = 0x8B6A;\n\n// Uniform table for std140\nconst UNIFORM_TYPES = {\n  // No samplers in uniform blocks\n\n  [GL_FLOAT]: [GL_FLOAT, 1],\n  [GL_FLOAT_VEC2]: [GL_FLOAT, 2],\n  [GL_FLOAT_VEC3]: [GL_FLOAT, 3],\n  [GL_FLOAT_VEC4]: [GL_FLOAT, 4],\n\n  [GL_INT]: [GL_INT, 1],\n  [GL_INT_VEC2]: [GL_INT, 2],\n  [GL_INT_VEC3]: [GL_INT, 3],\n  [GL_INT_VEC4]: [GL_INT, 4],\n\n  [GL_UNSIGNED_INT]: [GL_UNSIGNED_INT, 1],\n  [GL_UNSIGNED_INT_VEC2]: [GL_UNSIGNED_INT, 2],\n  [GL_UNSIGNED_INT_VEC3]: [GL_UNSIGNED_INT, 3],\n  [GL_UNSIGNED_INT_VEC4]: [GL_UNSIGNED_INT, 4],\n\n  [GL_BOOL]: [GL_FLOAT, 1],\n  [GL_BOOL_VEC2]: [GL_FLOAT, 2],\n  [GL_BOOL_VEC3]: [GL_FLOAT, 3],\n  [GL_BOOL_VEC4]: [GL_FLOAT, 4],\n\n  [GL_FLOAT_MAT2]: [GL_FLOAT, 8], // 4\n  [GL_FLOAT_MAT2x3]: [GL_FLOAT, 8], // 6\n  [GL_FLOAT_MAT2x4]: [GL_FLOAT, 8], // 8\n\n  [GL_FLOAT_MAT3]: [GL_FLOAT, 12], // 9\n  [GL_FLOAT_MAT3x2]: [GL_FLOAT, 12], // 6\n  [GL_FLOAT_MAT3x4]: [GL_FLOAT, 12], // 12\n\n  [GL_FLOAT_MAT4]: [GL_FLOAT, 16], // 16\n  [GL_FLOAT_MAT4x2]: [GL_FLOAT, 16], // 8\n  [GL_FLOAT_MAT4x3]: [GL_FLOAT, 16] // 12\n};\n\n// Std140 layout for uniforms\nexport default class UniformBufferLayout {\n  constructor(layout) {\n    this.layout = {};\n    this.size = 0;\n\n    // Add layout (type, size and offset) definitions for each uniform in the layout\n    for (const key in layout) {\n      this._addUniform(key, layout[key]);\n    }\n\n    // Allocate three typed arrays pointing at same memory\n    const data = new Float32Array(this.size);\n    this.typedArray = {\n      [GL_FLOAT]: data,\n      [GL_INT]: new Int32Array(data.buffer),\n      [GL_UNSIGNED_INT]: new Uint32Array(data.buffer)\n    };\n  }\n\n  // Get number of bytes needed for buffer allocation\n  getBytes() {\n    return this.size * 4;\n  }\n\n  // Get the current data as Float32Array, for bufferSubData\n  getData() {\n    return this.typedArray[GL_FLOAT];\n  }\n\n  // Get offset and data for one object (for bufferSubData)\n  getSubData(index) {\n    let data;\n    let offset;\n    if (index === undefined) {\n      data = this.data;\n      offset = 0;\n    } else {\n      const begin = this.offsets[index];\n      const end = begin + this.sizes[index];\n      data = this.data.subarray(begin, end);\n      offset = begin * 4;\n    }\n    return {data, offset};\n  }\n\n  // Set a map of values\n  setUniforms(values) {\n    for (const key in values) {\n      this._setValue(key, values[key]);\n    }\n    return this;\n  }\n\n  _setValue(key, value) {\n    const layout = this.layout[key];\n    assert(layout, 'UniformLayoutStd140 illegal argument');\n    const typedArray = this.typedArray[layout.type];\n    if (layout.size === 1) {\n      // single value -> just set it\n      typedArray[layout.offset] = value;\n    } else {\n      // vector/matrix -> copy the supplied (typed) array, starting from offset\n      typedArray.set(value, layout.offset);\n    }\n  }\n\n  _addUniform(key, uniformType) {\n    const definition = UNIFORM_TYPES[uniformType];\n    assert(definition, ERR_ARGUMENT);\n    const [type, count] = definition;\n\n    // First, align (bump) current offset to an even multiple of current object (1, 2, 4)\n    this.size = this._alignTo(this.size, count);\n    // Use the aligned size as the offset of the current uniform.\n    const offset = this.size;\n    // Then, add our object's padded size ((1, 2, multiple of 4) to the current offset\n    this.size += count;\n\n    this.layout[key] = {type, size: count, offset};\n  }\n\n  // Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes)\n  _alignTo(size, count) {\n    switch (count) {\n    case 1: return size; // Pad upwards to even multiple of 2\n    case 2: return size + size % 2; // Pad upwards to even multiple of 2\n    default: return size + (4 - size % 4) % 4; // Pad upwards to even multiple of 4\n    }\n  }\n}\n"],"file":"uniform-buffer-layout.js"}