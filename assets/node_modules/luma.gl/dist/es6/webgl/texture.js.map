{"version":3,"sources":["../../../src/webgl/texture.js"],"names":["GL","Resource","Buffer","withParameters","WebGLBuffer","isWebGL2","assertWebGL2Context","getKey","log","uid","isPowerOfTwo","assert","NPOT_MIN_FILTERS","LINEAR","NEAREST","TEXTURE_FORMATS","RGB","dataFormat","types","UNSIGNED_BYTE","UNSIGNED_SHORT_5_6_5","RGBA","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","ALPHA","LUMINANCE","LUMINANCE_ALPHA","isFormatSupported","gl","format","info","gl1","undefined","gl2","value","getExtension","isLinearFilteringSupported","FLOAT","HALF_FLOAT","Texture","isSupported","linearFiltering","supported","constructor","opts","id","handle","target","hasFloatTexture","textureUnit","toString","width","height","initialize","data","pixels","type","border","recreate","parameters","pixelStore","unpackFlipY","mipmaps","_deduceParameters","compressed","DEFAULT_TEXTURE_SETTINGS","UNPACK_FLIP_Y_WEBGL","glSettings","Object","assign","_isNPOT","warn","_updateForNPOT","setImageData","generateMipmap","setParameters","resize","params","bindTexture","level","offset","dataType","_getDataType","texImage2D","bindBuffer","PIXEL_UNPACK_BUFFER","compressedTexImage2D","setSubImageData","x","y","ndarray","shape","compressedTexSubImage2D","texSubImage2D","ArrayBuffer","isView","GL_PIXEL_UNPACK_BUFFER","copyFramebuffer","framebuffer","internalFormat","bind","copyTexImage2D","unbind","getActiveUnit","getParameter","ACTIVE_TEXTURE","TEXTURE0","Error","activeTexture","setImage3D","internalformat","depth","texImage3D","textureFormat","_deduceImageSize","size","ImageData","HTMLImageElement","naturalWidth","naturalHeight","HTMLCanvasElement","HTMLVideoElement","videoWidth","videoHeight","_createHandle","createTexture","_deleteHandle","deleteTexture","_getParameter","pname","TEXTURE_WIDTH","TEXTURE_HEIGHT","getTexParameter","_setParameter","param","_getNPOTParam","TEXTURE_MIN_LOD","TEXTURE_MAX_LOD","texParameterf","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","indexOf"],"mappings":"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","sourcesContent":["/* eslint-disable no-inline-comments, max-len */\nimport GL from '../constants';\n\nimport Resource from './resource';\nimport Buffer from './buffer';\n\nimport {withParameters} from '../webgl-context/context-state';\n\nimport {WebGLBuffer} from '../webgl-utils';\nimport {isWebGL2, assertWebGL2Context, getKey} from '../webgl-utils';\n\nimport {log, uid, isPowerOfTwo} from '../utils';\nimport assert from '../utils/assert';\n\n// Supported min filters for NPOT texture.\nconst NPOT_MIN_FILTERS = [GL.LINEAR, GL.NEAREST];\n\n// const S3TC = 'WEBGL_compressed_texture_s3tc';\n// const PVRTC = 'WEBGL_compressed_texture_pvrtc';\n// const ES3 = 'WEBGL_compressed_texture_es3';\n// const ETC1 = 'WEBGL_compressed_texture_etc1';\n// const SRGB = 'EXT_sRGB';\n// const DEPTH = 'WEBGL_depth_texture';\n\n// Legal combinations for internalFormat, format and type\nexport const TEXTURE_FORMATS = {\n  // Unsized texture format - more performance\n  [GL.RGB]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5]},\n  [GL.RGBA]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4, GL.UNSIGNED_SHORT_5_5_5_1]},\n  [GL.ALPHA]: {dataFormat: GL.ALPHA, types: [GL.UNSIGNED_BYTE]},\n  [GL.LUMINANCE]: {dataFormat: GL.LUMINANCE, types: [GL.UNSIGNED_BYTE]},\n  [GL.LUMINANCE_ALPHA]: {dataFormat: GL.LUMINANCE_ALPHA, types: [GL.UNSIGNED_BYTE]}\n\n  // [GL.DEPTH_COMPONENT]: {types: [GL.UNSIGNED_SHORT, GL.UNSIGNED_INT, GL.UNSIGNED_INT_24_8], gl1: DEPTH},\n  // [GL.DEPTH_STENCIL]: {gl1: DEPTH},\n\n  // Sized texture format - more performance\n  // R\n  // [GL.R8]: {dataFormat: GL.RED, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // [GL.R16F]: {dataFormat: GL.RED, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.R32F]: {dataFormat: GL.RED, types: [GL.FLOAT], gl2: true},\n  // [GL.R8UI]: {dataFormat: GL.RED_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RG\n  // [GL.RG8]: {dataFormat: GL.RG, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // [GL.RG16F]: {dataFormat: GL.RG, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RG32F]: {dataFormat: GL.RG, types: [GL.FLOAT], gl2: true},\n  // [GL.RG8UI]: {dataFormat: GL.RG_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RGB\n  // [GL.RGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.SRGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.RGB565]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5], gl2: true},\n  // [GL.R11F_G11F_B10F]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_INT_10F_11F_11F_REV, GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RGB9_E5]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_half_float'},\n  // [GL.RGB16F]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_float'},\n  // [GL.RGB32F]: {dataFormat: GL.RGB, types: [GL.FLOAT], gl2: true},\n  // [GL.RGB8UI]: {dataFormat: GL.RGB_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RGBA\n  // [GL.RGBA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.SRGB8_ALPHA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.RGB5_A1]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_5_5_1], gl2: true},\n  // [GL.RGBA4]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4], gl2: true},\n  // [GL.RGBA16F]: {dataFormat: GL.RGBA, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RGBA32F]: {dataFormat: GL.RGBA, types: [GL.FLOAT], gl2: true},\n  // [GL.RGBA8UI]: {dataFormat: GL.RGBA_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true}\n\n  // Compressed formats\n\n  // WEBGL_compressed_texture_s3tc\n\n  // [GL.COMPRESSED_RGB_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT3_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT5_EXT]: {compressed: true, gl1: S3TC},\n\n  // WEBGL_compressed_texture_es3\n\n  // [GL.COMPRESSED_R11_EAC]: {compressed: true, gl1: ES3}, // RED\n  // [GL.COMPRESSED_SIGNED_R11_EAC]: {compressed: true, gl1: ES3}, // RED\n  // [GL.COMPRESSED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG\n  // [GL.COMPRESSED_SIGNED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG\n  // [GL.COMPRESSED_RGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB\n  // [GL.COMPRESSED_RGBA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RBG\n  // [GL.COMPRESSED_SRGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB\n  // [GL.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RGBA\n  // [GL.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA\n  // [GL.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA\n  /* WebGL2 guaranteed availability compressed formats?\n  COMPRESSED_R11_EAC RED\n  COMPRESSED_SIGNED_R11_EAC RED\n  COMPRESSED_RG11_EAC RG\n  COMPRESSED_SIGNED_RG11_EAC RG\n  COMPRESSED_RGB8_ETC2 RGB\n  COMPRESSED_SRGB8_ETC2 RGB\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA\n  COMPRESSED_RGBA8_ETC2_EAC RGBA\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\n  */\n\n  // WEBGL_compressed_texture_pvrtc\n\n  // [GL.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n\n  // WEBGL_compressed_texture_etc1\n\n  // [GL.COMPRESSED_RGB_ETC1_WEBGL]: {compressed: true, gl1: ETC1},\n\n  // WEBGL_compressed_texture_atc\n\n  // [GL.COMPRESSED_RGB_ATC_WEBGL]: {compressed: true, gl1: ETC1},\n  // [GL.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: {compressed: true, gl1: ETC1},\n  // [GL.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: {compressed: true, gl1: ETC1}\n};\n\nfunction isFormatSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n  if (!info) {\n    return false;\n  }\n  if (info.gl1 === undefined && info.gl2 === undefined) { // No info - always supported\n    return true;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  return typeof value === 'string' ? gl.getExtension(value) : value;\n}\n\nfunction isLinearFilteringSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n  switch (info && info.types[0]) {\n  // Both WebGL1 and WebGL2?\n  case GL.FLOAT: return gl.getExtension('OES_texture_float_linear');\n  // Not in WebGL2?\n  case GL.HALF_FLOAT: return gl.getExtension('OES_texture_half_float_linear');\n  default: return true;\n  }\n}\n\nexport default class Texture extends Resource {\n\n  static isSupported(gl, {format, linearFiltering} = {}) {\n    let supported = true;\n    if (format) {\n      supported = supported && isFormatSupported(gl, format);\n      supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));\n    }\n    return supported;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n  constructor(gl, opts) {\n    const {\n      id = uid('texture'),\n      handle,\n      target\n      // , magFilter, minFilter, wrapS, wrapT\n    } = opts;\n\n    super(gl, {id, handle});\n\n    this.target = target;\n    this.hasFloatTexture = gl.getExtension('OES_texture_float');\n    this.textureUnit = undefined;\n  }\n\n  toString() {\n    return `Texture(${this.id},${this.width}x${this.height})`;\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(opts = {}) {\n    let data = opts.data;\n\n    const {\n      pixels = null,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0,\n      recreate = false,\n      parameters = {},\n      pixelStore = {},\n      // Deprecated parameters\n      unpackFlipY = true\n    } = opts;\n\n    let {mipmaps = true} = opts;\n\n    // pixels variable is for API compatibility purpose\n    if (!data) {\n      // TODO - This looks backwards? Commenting out for now until we decide\n      // which prop to use\n      // log.deprecated('data', 'pixels')();\n      data = pixels;\n    }\n\n    let {width, height, dataFormat} = opts;\n\n    // Deduce width and height\n    ({width, height, dataFormat} = this._deduceParameters({\n      format, type, dataFormat, compressed: false, data, width, height\n    }));\n\n    // Store opts for accessors\n    this.width = width;\n    this.height = height;\n    this.format = format;\n    this.type = type;\n    this.dataFormat = dataFormat;\n    this.border = border;\n    this.mipmaps = mipmaps;\n\n    // Note: luma.gl defaults to GL.UNPACK_FLIP_Y_WEBGL = true;\n    // TODO - compare v4 and v3\n    const DEFAULT_TEXTURE_SETTINGS = {\n      // Pixel store\n      [GL.UNPACK_FLIP_Y_WEBGL]: unpackFlipY\n    };\n    const glSettings = Object.assign({}, DEFAULT_TEXTURE_SETTINGS, pixelStore);\n\n    if (this._isNPOT()) {\n\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      mipmaps = false;\n\n      this._updateForNPOT(parameters);\n    }\n\n    this.setImageData({data, width, height, format, type, dataFormat, border, mipmaps, parameters: glSettings});\n\n    if (mipmaps) {\n      this.generateMipmap();\n    }\n\n    // Set texture sampler parameters\n    this.setParameters(parameters);\n\n    // TODO - Store data to enable auto recreate on context loss\n    if (recreate) {\n      this.data = data;\n    }\n  }\n\n  // If size has changed, reinitializes with current format\n  // note clears image and mipmaps\n  resize({width, height}) {\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        type: this.type,\n        dataFormat: this.dataFormat,\n        border: this.border,\n        mipmaps: false\n      });\n    }\n    return this;\n  }\n\n  // Call to regenerate mipmaps after modifying texture(s)\n  generateMipmap(params = {}) {\n    this.gl.bindTexture(this.target, this.handle);\n    withParameters(this.gl, params, () => {\n      this.gl.generateMipmap(this.target);\n    });\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  /*\n   * Allocates storage\n   * @param {*} pixels -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} width -\n   * @param {GLint} height -\n   * @param {GLint} mipMapLevel -\n   * @param {GLenum} format - format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  /* eslint-disable max-len, max-statements, complexity */\n  setImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    width,\n    height,\n    level = 0,\n    format = GL.RGBA,\n    type,\n    dataFormat,\n    offset = 0,\n    border = 0,\n    compressed = false,\n    parameters = {}\n  }) {\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format, type, dataFormat, compressed, data, width, height}));\n\n    const {gl} = this;\n    gl.bindTexture(this.target, this.handle);\n\n    let dataType = null;\n    ({data, dataType} = this._getDataType({data, compressed}));\n\n    withParameters(this.gl, parameters, () => {\n      switch (dataType) {\n      case 'null':\n        gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n        break;\n      case 'typed-array':\n        // Looks like this assert is not necessary, as offset is ignored under WebGL1\n        // assert((offset === 0 || isWebGL2(gl)), 'offset supported in WebGL2 only');\n        gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data, offset);\n        break;\n      case 'buffer':\n        // WebGL2 enables creating textures directly from a WebGL buffer\n        assertWebGL2Context(gl);\n        gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle || data);\n        gl.texImage2D(target, level, format, width, height, border, format, type, offset);\n        break;\n      case 'browser-object':\n        gl.texImage2D(target, level, format, format, type, data);\n        break;\n      case 'compressed':\n        gl.compressedTexImage2D(this.target, level, format, width, height, border, data);\n        break;\n      default:\n        assert(false, 'Unknown image data type');\n      }\n    });\n\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Redefines an area of an existing texture\n   * Note: does not allocate storage\n   */\n  /*\n   * Redefines an area of an existing texture\n   * @param {*} pixels, data -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} x - xOffset from where texture to be updated\n   * @param {GLint} y - yOffset from where texture to be updated\n   * @param {GLint} width - width of the sub image to be updated\n   * @param {GLint} height - height of the sub image to be updated\n   * @param {GLint} level - mip level to be updated\n   * @param {GLenum} format - internal format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer or ArrayBufferView\n   * @param {GLenum} dataFormat - format of image data.\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  setSubImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    x = 0,\n    y = 0,\n    width,\n    height,\n    level = 0,\n    format = GL.RGBA,\n    type,\n    dataFormat,\n    compressed = false,\n    offset = 0,\n    border = 0,\n    parameters = {}\n  }) {\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format, type, dataFormat, compressed, data, width, height}));\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    // Support ndarrays\n    if (data && data.data) {\n      const ndarray = data;\n      data = ndarray.data;\n      width = ndarray.shape[0];\n      height = ndarray.shape[1];\n    }\n\n    // Support buffers\n    if (data instanceof Buffer) {\n      data = data.handle;\n    }\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      // TODO - x,y parameters\n      if (compressed) {\n        this.gl.compressedTexSubImage2D(target,\n          level, x, y, width, height, format, data);\n      } else if (data === null) {\n        this.gl.texSubImage2D(target,\n          level, format, width, height, border, dataFormat, type, null);\n      } else if (ArrayBuffer.isView(data)) {\n        this.gl.texSubImage2D(target,\n          level, x, y, width, height, format, type, data, offset);\n      } else if (data instanceof WebGLBuffer) {\n        // WebGL2 allows us to create texture directly from a WebGL buffer\n        assertWebGL2Context(this.gl);\n        // This texImage2D signature uses currently bound GL_PIXEL_UNPACK_BUFFER\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data);\n        this.gl.texSubImage2D(target,\n          level, format, width, height, border, format, type, offset);\n        this.gl.bindBuffer(GL.GL_PIXEL_UNPACK_BUFFER, null);\n      } else {\n        // Assume data is a browser supported object (ImageData, Canvas, ...)\n        this.gl.texSubImage2D(target, level, x, y, format, type, data);\n      }\n    });\n\n    this.gl.bindTexture(this.target, null);\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Defines a two-dimensional texture image or cube-map texture image with\n   * pixels from the current framebuffer (rather than from client memory).\n   * (gl.copyTexImage2D wrapper)\n   *\n   * Note that binding a texture into a Framebuffer's color buffer and\n   * rendering can be faster.\n   */\n  copyFramebuffer({\n    target = this.target,\n    framebuffer,\n    offset = 0,\n    x = 0,\n    y = 0,\n    width,\n    height,\n    level = 0,\n    internalFormat = GL.RGBA,\n    border = 0\n  }) {\n    if (framebuffer) {\n      framebuffer.bind();\n    }\n\n    // target\n    this.bind();\n    this.gl.copyTexImage2D(\n      this.target, level, internalFormat, x, y, width, height, border);\n    this.unbind();\n\n    if (framebuffer) {\n      framebuffer.unbind();\n    }\n  }\n\n  getActiveUnit() {\n    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n\n  bind(textureUnit = this.textureUnit) {\n    if (textureUnit === undefined) {\n      throw new Error('Texture.bind: must specify texture unit');\n    }\n    this.textureUnit = textureUnit;\n    this.gl.activeTexture(GL.TEXTURE0 + textureUnit);\n    this.gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n\n  unbind() {\n    if (this.textureUnit === undefined) {\n      throw new Error('Texture.unbind: texture unit not specified');\n    }\n    this.gl.activeTexture(GL.TEXTURE0 + this.textureUnit);\n    this.gl.bindTexture(this.target, null);\n    return this.textureUnit;\n  }\n\n  // PRIVATE METHODS\n\n  _getDataType({data, compressed = false}) {\n    if (compressed) {\n      return {data, dataType: 'compressed'};\n    }\n    if (data === null) {\n      return {data, dataType: 'null'};\n    }\n    if (ArrayBuffer.isView(data)) {\n      return {data, dataType: 'typed-array'};\n    }\n    if (data instanceof Buffer) {\n      return {data: data.handle, dataType: 'buffer'};\n    }\n    if (data instanceof WebGLBuffer) {\n      return {data, dataType: 'buffer'};\n    }\n    // Assume data is a browser supported object (ImageData, Canvas, ...)\n    return {data, dataType: 'browser-object'};\n  }\n\n  // Image 3D copies from Typed Array or WebGLBuffer\n  setImage3D({\n    level = 0,\n    internalformat = GL.RGBA,\n    width,\n    height,\n    depth = 1,\n    border = 0,\n    format,\n    type = GL.UNSIGNED_BYTE,\n    offset = 0,\n    pixels\n  }) {\n    if (ArrayBuffer.isView(pixels)) {\n      this.gl.texImage3D(\n        this.target, level, internalformat,\n        width, height, depth, border, format, type, pixels);\n      return this;\n    }\n\n    if (pixels instanceof Buffer) {\n      this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, pixels.handle);\n      this.gl.texImage3D(\n        this.target, level, internalformat,\n        width, height, depth, border, format, type, offset);\n    }\n\n    return this;\n  }\n\n  /* Copied from texture-2d.js\n  // WebGL2\n  setPixels(opts = {}) {\n    const {\n      buffer,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n\n    // This signature of texImage2D uses currently bound GL_PIXEL_UNPACK_BUFFER\n    gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);\n    // And as always, we must also bind the texture itself\n    this.bind();\n\n    gl.texImage2D(gl.TEXTURE_2D,\n      mipmapLevel, format, width, height, border, format, type, buffer.target);\n\n    this.unbind();\n    gl.bindBuffer(GL.GL_PIXEL_UNPACK_BUFFER, null);\n    return this;\n  }\n\n  setImageDataFromCompressedBuffer(opts) {\n    const {\n      buffer,\n      // offset = 0,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      internalFormat = GL.RGBA,\n      // format = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n    gl.compressedTexImage2D(this.target,\n      mipmapLevel, internalFormat, width, height, border, buffer);\n    // gl.compressedTexSubImage2D(target,\n    //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n    return this;\n  }\n\n  copySubImage(opts) {\n    const {\n      // pixels,\n      // offset = 0,\n      // x,\n      // y,\n      // width,\n      // height,\n      // mipmapLevel = 0,\n      // internalFormat = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      // border = 0\n    } = opts;\n\n    // if (pixels instanceof ArrayBufferView) {\n    //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);\n    // }\n    // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);\n    // // Additional signature in a WebGL 2 context:\n    // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);\n  }\n  */\n\n  // HELPER METHODS\n\n  _deduceParameters(opts) {\n    const {format, data} = opts;\n    let {width, height, dataFormat, type, compressed} = opts;\n\n    // Deduce format and type from format\n    const textureFormat = TEXTURE_FORMATS[format];\n    dataFormat = dataFormat || (textureFormat && textureFormat.dataFormat);\n    type = type || (textureFormat && textureFormat.types[0]);\n\n    // Deduce compression from format\n    compressed = compressed || (textureFormat && textureFormat.compressed);\n\n    ({width, height} = this._deduceImageSize({data, width, height}));\n\n    return {dataFormat, type, compressed, width, height, format, data};\n  }\n\n  /* global ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement */\n  _deduceImageSize({data, width, height}) {\n    let size;\n\n    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n      size = {width: data.naturalWidth, height: data.naturalHeight};\n    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n      size = {width: data.videoWidth, height: data.videoHeight};\n    } else if (!data) {\n      size = {width: width >= 0 ? width : 1, height: height >= 0 ? height : 1};\n    } else {\n      size = {width, height};\n    }\n\n    assert(size, 'Could not deduced texture size');\n    assert(width === undefined || size.width === width, 'Deduced texture width does not match supplied width');\n    assert(height === undefined || size.height === height, 'Deduced texture height does not match supplied height');\n\n    return size;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTexture();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTexture(this.handle);\n  }\n\n  _getParameter(pname) {\n    switch (pname) {\n    case GL.TEXTURE_WIDTH:\n      return this.width;\n    case GL.TEXTURE_HEIGHT:\n      return this.height;\n    default:\n      this.gl.bindTexture(this.target, this.handle);\n      const value = this.gl.getTexParameter(this.target, pname);\n      this.gl.bindTexture(this.target, null);\n      return value;\n    }\n  }\n\n  _setParameter(pname, param) {\n    this.gl.bindTexture(this.target, this.handle);\n\n    // NOTE: Apply NPOT workaround\n    param = this._getNPOTParam(pname, param);\n\n    // Apparently there are some integer/float conversion rules that made\n    // the WebGL committe expose two parameter setting functions in JavaScript.\n    // For now, pick the float version for parameters specified as GLfloat.\n    switch (pname) {\n    case GL.TEXTURE_MIN_LOD:\n    case GL.TEXTURE_MAX_LOD:\n      this.gl.texParameterf(this.handle, pname, param);\n      break;\n\n    case GL.TEXTURE_WIDTH:\n    case GL.TEXTURE_HEIGHT:\n      throw new Error('Cannot set emulated parameter');\n\n    default:\n      this.gl.texParameteri(this.target, pname, param);\n      break;\n    }\n\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  _isNPOT() {\n    return (!isWebGL2(this.gl) && (!isPowerOfTwo(this.width) || (!isPowerOfTwo(this.height))));\n  }\n\n  // Update default settings which are not supported by NPOT textures.\n  _updateForNPOT(parameters) {\n    if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n      parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_S to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_T to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n    }\n  }\n\n  _getNPOTParam(pname, param) {\n    if (this._isNPOT()) {\n      switch (pname) {\n      case GL.TEXTURE_MIN_FILTER:\n        if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n          log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n          param = GL.LINEAR;\n        }\n        break;\n      case GL.TEXTURE_WRAP_S:\n      case GL.TEXTURE_WRAP_T:\n        if (param !== GL.CLAMP_TO_EDGE) {\n          log.warn(`texture: ${this} is Non-Power-Of-Two, ${getKey(this.gl, pname)} to CLAMP_TO_EDGE`)();\n          param = GL.CLAMP_TO_EDGE;\n        }\n        break;\n      default:\n        break;\n      }\n    }\n    return param;\n  }\n}\n"],"file":"texture.js"}