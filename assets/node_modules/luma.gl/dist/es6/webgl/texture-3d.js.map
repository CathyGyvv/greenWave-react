{"version":3,"sources":["../../../src/webgl/texture-3d.js"],"names":["GL","isWebGL2","assertWebGL2Context","withParameters","Texture","Buffer","Texture3D","isSupported","gl","constructor","opts","Object","assign","target","TEXTURE_3D","width","height","depth","seal","setImageData","generateMipmap","initialize","pixels","settings","setImage3D","setParameters","level","internalformat","RGBA","border","format","type","UNSIGNED_BYTE","offset","ArrayBuffer","isView","texImage3D","bindBuffer","PIXEL_UNPACK_BUFFER","handle"],"mappings":"AAAA,OAAOA,EAAP,MAAe,cAAf;AACA,SAAQC,QAAR,EAAkBC,mBAAlB,QAA4C,gBAA5C;AACA,SAAQC,cAAR,QAA6B,gCAA7B;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,eAAe,MAAMC,SAAN,SAAwBF,OAAxB,CAAgC;AAE7C,SAAOG,WAAP,CAAmBC,EAAnB,EAAuB;AACrB,WAAOP,SAASO,EAAT,CAAP;AACD;AAED;;;;;;;;;;;;;;AAYAC,cAAYD,EAAZ,EAAgBE,OAAO,EAAvB,EAA2B;AACzBR,wBAAoBM,EAApB;AACA,UAAMA,EAAN,EAAUG,OAAOC,MAAP,CAAc,EAAd,EAAkBF,IAAlB,EAAwB;AAACG,cAAQH,KAAKG,MAAL,IAAeb,GAAGc;AAA3B,KAAxB,CAAV;AAEA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,KAAL,GAAa,IAAb;AACAN,WAAOO,IAAP,CAAY,IAAZ;AAEA,SAAKC,YAAL,CAAkBT,IAAlB;;AACA,QAAIA,KAAKU,cAAT,EAAyB;AACvB,WAAKA,cAAL;AACD;AACF;;AAEDC,aAAWX,OAAO,EAAlB,EAAsB;AACpB,SAAKA,IAAL,GAAYC,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKF,IAAvB,EAA6BA,IAA7B,CAAZ;AADoB,kBAEO,KAAKA,IAFZ;AAAA,UAEbY,MAFa,SAEbA,MAFa;AAAA,UAELC,QAFK,SAELA,QAFK;;AAGpB,QAAIA,QAAJ,EAAc;AACZpB,qBAAeoB,QAAf,EAAyB,MAAM;AAC7B,YAAID,MAAJ,EAAY;AACV,eAAKE,UAAL,CAAgB,KAAKd,IAArB;AACD;AACF,OAJD;AAKA,WAAKe,aAAL,CAAmBf,IAAnB;AACD;AACF,GA5C4C,CA8C7C;AAEA;;;AACAc,aAAW;AACTE,YAAQ,CADC;AAETC,qBAAiB3B,GAAG4B,IAFX;AAGTb,SAHS;AAITC,UAJS;AAKTC,YAAQ,CALC;AAMTY,aAAS,CANA;AAOTC,UAPS;AAQTC,WAAO/B,GAAGgC,aARD;AASTC,aAAS,CATA;AAUTX;AAVS,GAAX,EAWG;AACD,QAAIY,YAAYC,MAAZ,CAAmBb,MAAnB,CAAJ,EAAgC;AAC9B,WAAKd,EAAL,CAAQ4B,UAAR,CACE,KAAKvB,MADP,EAEEa,KAFF,EAESC,cAFT,EAGEZ,KAHF,EAGSC,MAHT,EAGiBC,KAHjB,EAGwBY,MAHxB,EAGgCC,MAHhC,EAGwCC,IAHxC,EAG8CT,MAH9C;AAIA;AACD;;AACD,QAAIA,kBAAkBjB,MAAtB,EAA8B;AAC5B,WAAKG,EAAL,CAAQ6B,UAAR,CAAmBrC,GAAGsC,mBAAtB,EAA2ChB,OAAOiB,MAAlD;AACA,WAAK/B,EAAL,CAAQ4B,UAAR,CACE,KAAKvB,MADP,EAEEa,KAFF,EAESC,cAFT,EAGEZ,KAHF,EAGSC,MAHT,EAGiBC,KAHjB,EAGwBY,MAHxB,EAGgCC,MAHhC,EAGwCC,IAHxC,EAG8CE,MAH9C;AAIA,WAAKzB,EAAL,CAAQ6B,UAAR,CAAmBrC,GAAGsC,mBAAtB,EAA2ChB,OAAOiB,MAAlD;AACD;AACF;;AA5E4C","sourcesContent":["import GL from '../constants';\nimport {isWebGL2, assertWebGL2Context} from '../webgl-utils';\nimport {withParameters} from '../webgl-context/context-state';\nimport Texture from '../webgl/texture';\nimport Buffer from './buffer';\n\nexport default class Texture3D extends Texture {\n\n  static isSupported(gl) {\n    return isWebGL2(gl);\n  }\n\n  /**\n   * @classdesc\n   * 3D WebGL Texture\n   * Note: Constructor will initialize your texture.\n   *\n   * @class\n   * @param {WebGLRenderingContext} gl - gl context\n   * @param {Image|ArrayBuffer|null} opts= - named options\n   * @param {Image|ArrayBuffer|null} opts.data= - buffer\n   * @param {GLint} width - width of texture\n   * @param {GLint} height - height of texture\n   */\n  constructor(gl, opts = {}) {\n    assertWebGL2Context(gl);\n    super(gl, Object.assign({}, opts, {target: opts.target || GL.TEXTURE_3D}));\n\n    this.width = null;\n    this.height = null;\n    this.depth = null;\n    Object.seal(this);\n\n    this.setImageData(opts);\n    if (opts.generateMipmap) {\n      this.generateMipmap();\n    }\n  }\n\n  initialize(opts = {}) {\n    this.opts = Object.assign({}, this.opts, opts);\n    const {pixels, settings} = this.opts;\n    if (settings) {\n      withParameters(settings, () => {\n        if (pixels) {\n          this.setImage3D(this.opts);\n        }\n      });\n      this.setParameters(opts);\n    }\n  }\n\n  // WebGL2\n\n  // Image 3D copies from Typed Array or WebGLBuffer\n  setImage3D({\n    level = 0,\n    internalformat = GL.RGBA,\n    width,\n    height,\n    depth = 1,\n    border = 0,\n    format,\n    type = GL.UNSIGNED_BYTE,\n    offset = 0,\n    pixels\n  }) {\n    if (ArrayBuffer.isView(pixels)) {\n      this.gl.texImage3D(\n        this.target,\n        level, internalformat,\n        width, height, depth, border, format, type, pixels);\n      return;\n    }\n    if (pixels instanceof Buffer) {\n      this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, pixels.handle);\n      this.gl.texImage3D(\n        this.target,\n        level, internalformat,\n        width, height, depth, border, format, type, offset);\n      this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, pixels.handle);\n    }\n  }\n}\n"],"file":"texture-3d.js"}