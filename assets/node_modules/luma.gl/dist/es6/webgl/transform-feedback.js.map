{"version":3,"sources":["../../../src/webgl/transform-feedback.js"],"names":["Resource","isWebGL2","assertWebGL2Context","assert","GL_TRANSFORM_FEEDBACK_BUFFER","GL_TRANSFORM_FEEDBACK","TranformFeedback","isSupported","gl","isHandle","handle","isTransformFeedback","constructor","opts","buffers","Object","seal","initialize","varyingMap","bindBuffers","clear","_unbindBuffers","bufferName","buffer","index","Number","isFinite","begin","primitiveMode","_bindBuffers","bindTransformFeedback","beginTransformFeedback","pause","pauseTransformFeedback","resume","resumeTransformFeedback","end","endTransformFeedback","bindBuffer","offset","size","unbind","undefined","bindBufferBase","bindBufferRange","unbindBuffer","bufferIndex","_createHandle","createTransformFeedback","_deleteHandle","deleteTransformFeedback"],"mappings":"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","sourcesContent":["import Resource from './resource';\nimport {isWebGL2, assertWebGL2Context} from '../webgl-utils';\nimport assert from '../utils/assert';\n\nconst GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;\nconst GL_TRANSFORM_FEEDBACK = 0x8E22;\n\nexport default class TranformFeedback extends Resource {\n\n  static isSupported(gl) {\n    return isWebGL2(gl);\n  }\n\n  static isHandle(handle) {\n    return this.gl.isTransformFeedback(this.handle);\n  }\n\n  /**\n   * @class\n   * @param {WebGL2RenderingContext} gl - context\n   * @param {Object} opts - options\n   */\n  constructor(gl, opts = {}) {\n    assertWebGL2Context(gl);\n    super(gl, opts);\n    this.buffers = {};\n    Object.seal(this);\n\n    this.initialize(opts);\n  }\n\n  initialize({buffers = {}, varyingMap = {}}) {\n    this.bindBuffers(buffers, {clear: true, varyingMap});\n  }\n\n  bindBuffers(buffers = {}, {clear = false, varyingMap = {}} = {}) {\n    if (clear) {\n      this._unbindBuffers();\n      this.buffers = {};\n    }\n    for (const bufferName in buffers) {\n      const buffer = buffers[bufferName];\n      const index = Number.isFinite(Number(bufferName)) ?\n        Number(bufferName) : varyingMap[bufferName];\n      assert(Number.isFinite(index));\n      this.buffers[index] = buffer;\n    }\n  }\n\n  // TODO: Activation is tightly coupled to the current program. Since we try to encapsulate\n  // program.use, should we move these methods (begin/pause/resume/end) to the Program?\n  begin(primitiveMode) {\n    this._bindBuffers();\n    this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n    this.gl.beginTransformFeedback(primitiveMode);\n    return this;\n  }\n\n  pause() {\n    // Rebinding to same handle seem to cause an issue , first found in Chrome version 67.\n    // this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n    this.gl.pauseTransformFeedback();\n    this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, null);\n    this._unbindBuffers();\n    return this;\n  }\n\n  resume() {\n    this._bindBuffers();\n    this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n    this.gl.resumeTransformFeedback();\n    return this;\n  }\n\n  end() {\n    // Rebinding to same handle seem to cause an issue , first found in Chrome version 67.\n    // this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n    this.gl.endTransformFeedback();\n    this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, null);\n    this._unbindBuffers();\n    return this;\n  }\n\n  bindBuffer({index, buffer, offset = 0, size}) {\n    // Need to avoid chrome bug where buffer that is already bound to a different target\n    // cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.\n    buffer.unbind();\n    this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n    if (size === undefined) {\n      this.gl.bindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER, index, buffer.handle);\n    } else {\n      this.gl.bindBufferRange(GL_TRANSFORM_FEEDBACK_BUFFER, index, buffer.handle, offset, size);\n    }\n    return this;\n  }\n\n  unbindBuffer({index}) {\n    this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n    this.gl.bindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER, index, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  // See https://github.com/KhronosGroup/WebGL/issues/2346\n  // If it was true that having a buffer on an unused TF was a problem\n  // it would make the entire concept of transform feedback objects pointless.\n  // The whole point of them is like VertexArrayObjects.\n  // You set them up with all in outputs at init time and\n  // then in one call you can setup all the outputs just before drawing.\n  // Since the point of transform feedback is to generate data that will\n  // then be used as inputs to attributes it makes zero sense you'd\n  // have to unbind them from every unused transform feedback object\n  // before you could use them in an attribute. If that was the case\n  // there would be no reason to setup transform feedback objects ever.\n  // You'd always use the default because you'd always have to bind and\n  // unbind all the buffers.\n  _bindBuffers() {\n    for (const bufferIndex in this.buffers) {\n      this.bindBuffer({buffer: this.buffers[bufferIndex], index: Number(bufferIndex)});\n    }\n  }\n\n  _unbindBuffers() {\n    for (const bufferIndex in this.buffers) {\n      this.unbindBuffer({buffer: this.buffers[bufferIndex], index: Number(bufferIndex)});\n    }\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTransformFeedback();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTransformFeedback(this.handle);\n  }\n}\n"],"file":"transform-feedback.js"}