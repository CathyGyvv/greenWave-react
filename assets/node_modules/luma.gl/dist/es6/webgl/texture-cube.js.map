{"version":3,"sources":["../../../src/webgl/texture-cube.js"],"names":["GL","Texture","assert","FACES","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","TextureCube","constructor","gl","opts","Object","assign","target","TEXTURE_CUBE_MAP","initialize","seal","format","RGBA","mipmaps","width","height","type","UNSIGNED_BYTE","dataFormat","_deduceParameters","_deduceImageSize","data","setCubeMapImageData","generateMipmap","subImage","face","x","y","mipmapLevel","_subImage","pixels","border","bind","texImage2D","index","undefined","activeTexture","TEXTURE0","bindTexture","handle","unbind"],"mappings":"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","sourcesContent":["import GL from '../constants';\nimport Texture from './texture';\nimport assert from '../utils/assert';\n\nconst FACES = [\n  GL.TEXTURE_CUBE_MAP_POSITIVE_X,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_X,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Y,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Z,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Z\n];\n\nexport default class TextureCube extends Texture {\n  constructor(gl, opts = {}) {\n    super(gl, Object.assign({}, opts, {target: GL.TEXTURE_CUBE_MAP}));\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(opts = {}) {\n    const {\n      format = GL.RGBA,\n      mipmaps = true\n    } = opts;\n\n    let {\n      width = 1,\n      height = 1,\n      type = GL.UNSIGNED_BYTE,\n      dataFormat\n    } = opts;\n\n    // Deduce width and height based on one of the faces\n    ({type, dataFormat} = this._deduceParameters({format, type, dataFormat}));\n    ({width, height} = this._deduceImageSize({\n      data: opts[GL.TEXTURE_CUBE_MAP_POSITIVE_X], width, height\n    }));\n\n    // Enforce cube\n    assert(width === height);\n\n    // Temporarily apply any pixel store paramaters and build textures\n    // withParameters(this.gl, opts, () => {\n    //   for (const face of CUBE_MAP_FACES) {\n    //     this.setImageData({\n    //       target: face,\n    //       data: opts[face],\n    //       width, height, format, type, dataFormat, border, mipmaps\n    //     });\n    //   }\n    // });\n\n    this.setCubeMapImageData(opts);\n\n    // Called here so that GL.\n    // TODO - should genMipmap() be called on the cubemap or on the faces?\n    if (mipmaps) {\n      this.generateMipmap(opts);\n    }\n\n    // Store opts for accessors\n    this.opts = opts;\n  }\n\n  subImage({face, data, x = 0, y = 0, mipmapLevel = 0}) {\n    return this._subImage({target: face, data, x, y, mipmapLevel});\n  }\n\n  /* eslint-disable max-statements, max-len */\n  setCubeMapImageData({\n    width,\n    height,\n    pixels,\n    data,\n    border = 0,\n    format = GL.RGBA,\n    type = GL.UNSIGNED_BYTE,\n    generateMipmap = false\n  }) {\n    const {gl} = this;\n    pixels = pixels || data;\n    this.bind();\n    if (this.width || this.height) {\n      for (const face of FACES) {\n        gl.texImage2D(face, 0, format, width, height, border, format, type, pixels[face]);\n      }\n    } else {\n      for (const face of FACES) {\n        gl.texImage2D(face, 0, format, format, type, pixels[face]);\n      }\n    }\n  }\n\n  bind({index} = {}) {\n    if (index !== undefined) {\n      this.gl.activeTexture(GL.TEXTURE0 + index);\n    }\n    this.gl.bindTexture(GL.TEXTURE_CUBE_MAP, this.handle);\n    return index;\n  }\n\n  unbind() {\n    this.gl.bindTexture(GL.TEXTURE_CUBE_MAP, null);\n    return this;\n  }\n}\n\nTextureCube.FACES = FACES;\n"],"file":"texture-cube.js"}