{"version":3,"sources":["../../../src/webgl/program.js"],"names":["GL","VertexArray","Resource","Texture","Framebuffer","parseUniformName","getUniformSetter","VertexShader","FragmentShader","Buffer","withParameters","assertWebGL2Context","isWebGL2","getPrimitiveDrawMode","log","uid","isObjectEmpty","assert","LOG_PROGRAM_PERF_PRIORITY","GL_INTERLEAVED_ATTRIBS","GL_SEPARATE_ATTRIBS","Program","constructor","gl","opts","initialize","vertexAttributes","getDefaultArray","Object","seal","_setId","id","vs","fs","defaultUniforms","varyings","bufferMode","transformFeedbackVaryings","handle","varyingMap","getVaryingMap","_compileAndLink","_isCached","checkAttributeBindings","vertexArray","filledLocations","attributeName","_attributeToLocationMap","location","_warnedLocations","warn","delete","reset","unsetBuffers","use","useProgram","draw","drawMode","TRIANGLES","vertexCount","offset","start","end","isIndexed","indexType","UNSIGNED_SHORT","isInstanced","instanceCount","transformFeedback","uniforms","samplers","parameters","bind","primitiveMode","begin","setUniforms","ext","drawElementsInstanced","isNaN","drawElementsRange","drawElements","drawArraysInstanced","drawArrays","setAttributes","attributes","clear","drawParams","clearBindings","_sortBuffersByLocation","locations","elements","length","attribute","disable","isGeneric","_setAttributeToGeneric","array","value","_setAttributeToBuffer","buffer","getBuffer","layout","assign","instanced","type","setBuffers","buffers","deprecated","bufferName","_attributeCount","i","bindBuffer","ELEMENT_ARRAY_BUFFER","uniformName","uniform","uniformSetter","_uniformSetters","sampler","texture","textureIndex","undefined","_textureIndexCounter","uniformBlockBinding","blockIndex","blockBinding","getAttributeCount","_getParameter","ACTIVE_ATTRIBUTES","getAttributeLocation","getAttribLocation","getAttributeInfo","getActiveAttrib","getUniformCount","ACTIVE_UNIFORMS","getUniformInfo","index","getActiveUniform","getUniformLocation","name","getUniformValue","getUniform","getActiveUniforms","uniformIndices","pname","getVarying","program","result","getTransformFeedbackVarying","getFragDataLocation","varyingName","getAttachedShaders","getUniformBlockIndex","blockName","getActiveUniformBlockParameter","setGeneric","divisor","setBuffer","setDivisor","enable","attachShader","time","_getName","linkProgram","timeEnd","debug","priority","validateProgram","linked","getProgramParameter","LINK_STATUS","Error","getProgramInfoLog","_queryAttributeLocations","_queryUniformLocations","Array","target","_print","_areAllAttributesEnabled","isEnabled","_createHandle","createProgram","_deleteHandle","deleteProgram","programName","getName","replace","_getOptionsFromHandle","shaderHandles","shaderHandle","getShaderParameter","SHADER_TYPE","VERTEX_SHADER","FRAGMENT_SHADER","_uniformCount","info","parsedName","isArray","getUniformDescriptors","uniformDescriptors","descriptor","indexIncrement","varying"],"mappings":"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","sourcesContent":["/* eslint-disable no-inline-comments */\nimport GL from '../constants';\nimport VertexArray from './vertex-array';\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport {parseUniformName, getUniformSetter} from './uniforms';\nimport {VertexShader, FragmentShader} from './shader';\nimport Buffer from './buffer';\nimport {withParameters} from '../webgl-context/context-state';\nimport {assertWebGL2Context, isWebGL2} from '../webgl-utils';\nimport {getPrimitiveDrawMode} from '../webgl-utils/attribute-utils';\nimport {log, uid, isObjectEmpty} from '../utils';\nimport assert from '../utils/assert';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 3;\n\n// const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;\n// const GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;\n// MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS : 0x8C80,\n// TRANSFORM_FEEDBACK_BUFFER_START: 0x8C84,\n// TRANSFORM_FEEDBACK_BUFFER_SIZE : 0x8C85,\n// TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 0x8C88,\n// MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 0x8C8A,\n// MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 0x8C8B,\nconst GL_INTERLEAVED_ATTRIBS = 0x8C8C;\nconst GL_SEPARATE_ATTRIBS = 0x8C8D;\n\nexport default class Program extends Resource {\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n    this.initialize(opts);\n    this.vertexAttributes = VertexArray.getDefaultArray(gl);\n    Object.seal(this);\n\n    this._setId(opts.id);\n  }\n\n  initialize({vs, fs, defaultUniforms, varyings, bufferMode = GL_SEPARATE_ATTRIBS} = {}) {\n    // Create shaders if needed\n    this.vs = typeof vs === 'string' ? new VertexShader(this.gl, vs) : vs;\n    this.fs = typeof fs === 'string' ? new FragmentShader(this.gl, fs) : fs;\n\n    assert(this.vs instanceof VertexShader, 'Program: bad vertex shader');\n    assert(this.fs instanceof FragmentShader, 'Program: bad fragment shader');\n\n    this.defaultUniforms = defaultUniforms;\n\n    // Setup varyings if supplied\n    if (varyings) {\n      assertWebGL2Context(this.gl);\n      this.varyings = varyings;\n      this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n      this.varyingMap = getVaryingMap(varyings, bufferMode);\n    } else {\n      this.varyingMap = {};\n    }\n\n    this._compileAndLink();\n\n    // Experimental flag to avoid deleting Program object while it is cached\n    this._isCached = false;\n\n    return this;\n  }\n\n  // Generates warning if a vertex shader attribute is not setup.\n  checkAttributeBindings({vertexArray}) {\n    const filledLocations = vertexArray ?\n      vertexArray.filledLocations : this.vertexAttributes.filledLocations;\n    for (const attributeName in this._attributeToLocationMap) {\n      const location = this._attributeToLocationMap[attributeName];\n      if (!filledLocations[location] && !this._warnedLocations[location]) {\n        // throw new Error(`Program ${this.id}: ` +\n        //   `Attribute ${location}:${attributeName} not supplied`);\n        log.warn(`Program ${this.id}: Attribute ${location}:${attributeName} not supplied`)();\n        this._warnedLocations[location] = true;\n      }\n    }\n    return this;\n  }\n\n  delete(opts = {}) {\n    if (this._isCached) {\n      // This object is cached, do not delete\n      return this;\n    }\n    return super.delete(opts);\n  }\n\n  reset() {\n    this.unsetBuffers();\n    // TODO - reset uniforms and attributes to initial state\n  }\n\n  use() {\n    this.gl.useProgram(this.handle);\n    return this;\n  }\n\n  // A good thing about webGL is that there are so many ways to draw things,\n  // e.g. depending on whether data is indexed and/or isInstanced.\n  // This function unifies those into a single call with simple parameters\n  // that have sane defaults.\n  draw({\n    drawMode = GL.TRIANGLES,\n    vertexCount,\n    offset = 0,\n    start,\n    end,\n    isIndexed = false,\n    indexType = GL.UNSIGNED_SHORT,\n    isInstanced = false,\n    instanceCount = 0,\n    vertexArray = null,\n    transformFeedback = null,\n    uniforms = {},\n    samplers = {},\n    parameters = {}\n  }) {\n    vertexArray = vertexArray || VertexArray.getDefaultArray(this.gl);\n    vertexArray.bind(() => {\n\n      this.gl.useProgram(this.handle);\n\n      if (transformFeedback) {\n        const primitiveMode = getPrimitiveDrawMode(drawMode);\n        transformFeedback.begin(primitiveMode);\n      }\n\n      this.setUniforms(uniforms, samplers);\n\n      withParameters(this.gl, parameters,\n        () => {\n          // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n          if (isIndexed && isInstanced) {\n            this.ext.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n          } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n            this.gl.drawElementsRange(drawMode, start, end, vertexCount, indexType, offset);\n          } else if (isIndexed) {\n            this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n          } else if (isInstanced) {\n            this.ext.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n          } else {\n            this.gl.drawArrays(drawMode, offset, vertexCount);\n          }\n        }\n      );\n\n      // this.gl.useProgram(null);\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n\n    });\n\n    return this;\n  }\n\n  /**\n   * Attach a map of Buffers values to a program\n   * Only attributes with names actually present in the linked program\n   * will be updated. Other supplied buffers will be ignored.\n   *\n   * @param {Object} attributes - An object map with attribute names being keys\n   *  and values are expected to be instances of Attribute.\n   * @returns {Program} Returns itself for chaining.\n   */\n  setAttributes(attributes, {clear = true, drawParams = {}} = {}) {\n    if (clear) {\n      this.vertexAttributes.clearBindings();\n    }\n\n    // indexing is autodetected - buffer with target gl.ELEMENT_ARRAY_BUFFER\n    // index type is saved for drawElement calls\n    drawParams.isInstanced = false;\n    drawParams.isIndexed = false;\n    drawParams.indexType = null;\n\n    const {locations, elements} = this._sortBuffersByLocation(attributes);\n\n    // Process locations in order\n    for (let location = 0; location < locations.length; ++location) {\n      const attributeName = locations[location];\n      const attribute = attributes[attributeName];\n      // DISABLE MISSING ATTRIBUTE\n      if (!attribute) {\n        this.vertexAttributes.disable(location);\n      } else if (attribute.isGeneric) {\n        this._setAttributeToGeneric({location, array: attribute.value});\n      } else {\n        this._setAttributeToBuffer({location, buffer: attribute.getBuffer(), layout: attribute});\n        Object.assign(drawParams, {\n          isInstanced: attribute.instanced > 0\n        });\n      }\n    }\n\n    // SET ELEMENTS ARRAY BUFFER\n    if (elements) {\n      const attribute = attributes[elements];\n      attribute.getBuffer().bind();\n      drawParams.isIndexed = true;\n      drawParams.indexType = attribute.type;\n    }\n\n    return this;\n  }\n\n  /**\n   * Attach a map of Buffers values to a program\n   * Only attributes with names actually present in the linked program\n   * will be updated. Other supplied buffers will be ignored.\n   *\n   * @param {Object} buffers - An object map with attribute names being keys\n   *  and values are expected to be instances of Buffer.\n   * @returns {Program} Returns itself for chaining.\n   */\n  /* eslint-disable max-statements */\n  setBuffers(buffers, {clear = true, drawParams = {}} = {}) {\n    log.deprecated('Program: `setBuffers`', '`setAttributes`');\n\n    if (clear) {\n      this.vertexAttributes.clearBindings();\n    }\n\n    // indexing is autodetected - buffer with target gl.ELEMENT_ARRAY_BUFFER\n    // index type is saved for drawElement calls\n    drawParams.isInstanced = false;\n    drawParams.isIndexed = false;\n    drawParams.indexType = null;\n\n    const {locations, elements} = this._sortBuffersByLocation(buffers);\n\n    // Process locations in order\n    for (let location = 0; location < locations.length; ++location) {\n      const bufferName = locations[location];\n      const buffer = buffers[bufferName];\n      // DISABLE MISSING ATTRIBUTE\n      if (!buffer) {\n        this.vertexAttributes.disable(location);\n      } else if (buffer instanceof Buffer) {\n        this._setAttributeToBuffer({location, buffer, layout: buffer.layout});\n        Object.assign(drawParams, {\n          isInstanced: buffer.layout.instanced > 0\n        });\n      } else {\n        this._setAttributeToGeneric({location, array: buffer});\n      }\n    }\n\n    // SET ELEMENTS ARRAY BUFFER\n    if (elements) {\n      const buffer = buffers[elements];\n      buffer.bind();\n      drawParams.isIndexed = true;\n      drawParams.indexType = buffer.layout.type;\n    }\n\n    return this;\n  }\n  /* eslint-enable max-statements */\n\n  /*\n   * @returns {Program} Returns itself for chaining.\n   */\n  unsetBuffers() {\n    const length = this._attributeCount;\n    for (let i = 1; i < length; ++i) {\n      // this.vertexAttributes.setDivisor(i, 0);\n      this.vertexAttributes.disable(i);\n    }\n\n    // Clear elements buffer\n    this.gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, null);\n    return this;\n  }\n\n  /**\n   * Apply a set of uniform values to a program\n   * Only uniforms with names actually present in the linked program\n   * will be updated.\n   * other uniforms will be ignored\n   *\n   * @param {Object} uniformMap - An object with names being keys\n   * @returns {Program} - returns itself for chaining.\n   */\n  /* eslint-disable max-depth */\n  setUniforms(uniforms, samplers = {}) {\n    for (const uniformName in uniforms) {\n      let uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n      const sampler = samplers[uniformName];\n\n      if (uniformSetter) {\n        if (uniform instanceof Framebuffer) {\n          uniform = uniform.texture;\n        }\n        if (uniform instanceof Texture) {\n          if (uniformSetter.textureIndex === undefined) {\n            uniformSetter.textureIndex = this._textureIndexCounter++;\n          }\n\n          // Bind texture to index\n          const texture = uniform;\n          const {textureIndex} = uniformSetter;\n\n          texture.bind(textureIndex);\n\n          // Bind a sampler (if supplied) to index\n          if (sampler) {\n            sampler.bind(textureIndex);\n          }\n\n          // Set the uniform sampler to the texture index\n          uniformSetter(textureIndex);\n        } else {\n          // Just set the value\n          uniformSetter(uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n  /* eslint-enable max-depth */\n\n  // Binds a uniform block (`blockIndex`) to a specific binding point (`blockBinding`)\n  uniformBlockBinding(blockIndex, blockBinding) {\n    assertWebGL2Context(this.gl);\n    this.gl.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n  }\n\n  // setTransformFeedbackBuffers(buffers) {\n  //   for (const buffer of buffers) {\n  //     buffer.bindBase()\n  //   }\n  // }\n\n  /**\n   * ATTRIBUTES API\n   * (Locations are numeric indices)\n   * @return {Number} count\n   */\n  getAttributeCount() {\n    return this._getParameter(GL.ACTIVE_ATTRIBUTES);\n  }\n\n  /**\n   * Returns location (index) of a name\n   * @param {String} attributeName - name of an attribute\n   *   (matches name in a linked shader)\n   * @returns {Number} - // array of actual attribute names from shader linking\n   */\n  getAttributeLocation(attributeName) {\n    return this.gl.getAttribLocation(this.handle, attributeName);\n  }\n\n  /**\n   * Returns an object with info about attribute at index \"location\"/\n   * @param {int} location - index of an attribute\n   * @returns {WebGLActiveInfo} - info about an active attribute\n   *   fields: {name, size, type}\n   */\n  getAttributeInfo(location) {\n    return this.gl.getActiveAttrib(this.handle, location);\n  }\n\n  /**\n   * UNIFORMS API\n   * (Locations are numeric indices)\n   * @return {Number} count\n   */\n  getUniformCount() {\n    return this._getParameter(GL.ACTIVE_UNIFORMS);\n  }\n\n  /*\n   * @returns {WebGLActiveInfo} - object with {name, size, type}\n   */\n  getUniformInfo(index) {\n    return this.gl.getActiveUniform(this.handle, index);\n  }\n\n  /*\n   * @returns {WebGLUniformLocation} - opaque object representing location\n   * of uniform, used by setter methods\n   */\n  getUniformLocation(name) {\n    return this.gl.getUniformLocation(this.handle, name);\n  }\n\n  getUniformValue(location) {\n    return this.gl.getUniform(this.handle, location);\n  }\n\n  /* eslint-disable max-len */\n  // Rretrieves information about active uniforms identifed by their indices (`uniformIndices`)\n  // For valid `pname` values check :\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms\n  getActiveUniforms(uniformIndices, pname) {\n    return this.gl.getActiveUniforms(this.handle, uniformIndices, pname);\n  }\n  /* eslint-enable max-len */\n\n  // WebGL2\n  /**\n   * @param {GLuint} index\n   * @return {WebGLActiveInfo} - object with {name, size, type}\n   */\n  getVarying(program, index) {\n    const result = this.gl.getTransformFeedbackVarying(program, index);\n    return result;\n  }\n\n  // Retrieves the assigned color number binding for the user-defined varying\n  // out variable name for program. program must have previously been linked.\n  getFragDataLocation(varyingName) {\n    assertWebGL2Context(this.gl);\n    return this.gl.getFragDataLocation(this.handle, varyingName);\n  }\n\n  // @returns {WebGLShader[]} - array of attached WebGLShader objects\n  getAttachedShaders() {\n    return this.gl.getAttachedShaders(this.handle);\n  }\n\n  // Retrieves the index of a uniform block\n  getUniformBlockIndex(blockName) {\n    assertWebGL2Context(this.gl);\n    return this.gl.getUniformBlockIndex(this.handle, blockName);\n  }\n\n  /* eslint-disable max-len */\n  // Retrieves information about an active uniform block (`blockIndex`)\n  // For valid `pname` values check :\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter\n  getActiveUniformBlockParameter(blockIndex, pname) {\n    assertWebGL2Context(this.gl);\n    return this.gl.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n  }\n  /* eslint-enable max-len */\n\n  // PRIVATE METHODS\n\n  _setAttributeToGeneric({location, array}) {\n    this.vertexAttributes.setGeneric({location, array});\n    this.vertexAttributes.disable(location, true);\n  }\n\n  _setAttributeToBuffer({location, buffer, layout}) {\n    const divisor = layout.instanced ? 1 : 0;\n    this.vertexAttributes.setBuffer({location, buffer, layout});\n    this.vertexAttributes.setDivisor(location, divisor);\n    this.vertexAttributes.enable(location);\n  }\n\n  _compileAndLink() {\n    const {gl} = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n\n    // Avoid checking program linking error in production\n    if (gl.debug || log.priority > 0) {\n      gl.validateProgram(this.handle);\n      const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n      if (!linked) {\n        throw new Error(`Error linking ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n\n    this._queryAttributeLocations();\n    this._queryUniformLocations();\n  }\n\n  _sortBuffersByLocation(buffers) {\n    let elements = null;\n    let locations = [];\n\n    // Reutrn early if no buffers to be bound.\n    if (isObjectEmpty(buffers)) {\n      return {locations, elements};\n    }\n\n    locations = new Array(this._attributeCount);\n    for (const bufferName in buffers) {\n      const buffer = buffers[bufferName];\n      const location = this._attributeToLocationMap[bufferName];\n      if (location === undefined) {\n        if (buffer.target === GL.ELEMENT_ARRAY_BUFFER && elements) {\n          throw new Error(`${this._print(bufferName)} duplicate GL.ELEMENT_ARRAY_BUFFER`);\n        } else if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n          elements = bufferName;\n        } else if (!this._warnedLocations[location]) {\n          log.log(2, `${this._print(bufferName)} not used`)();\n          this._warnedLocations[location] = true;\n        }\n      } else {\n        if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n          throw new Error(`${this._print(bufferName)}:${location} ` +\n            'has both location and type gl.ELEMENT_ARRAY_BUFFER');\n        }\n        locations[location] = bufferName;\n      }\n    }\n    return {locations, elements};\n  }\n\n  // Check that all active attributes are enabled\n  _areAllAttributesEnabled() {\n    const length = this._attributeCount;\n    for (let i = 0; i < length; ++i) {\n      if (!this.vertexAttributes.isEnabled(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  _print(bufferName) {\n    return `Program ${this.id}: Attribute ${bufferName}`;\n  }\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? `${programName}-program` : 'program';\n    return programName;\n  }\n\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n      switch (type) {\n      case GL.VERTEX_SHADER:\n        opts.vs = new VertexShader({handle: shaderHandle});\n        break;\n      case GL.FRAGMENT_SHADER:\n        opts.fs = new FragmentShader({handle: shaderHandle});\n        break;\n      default:\n      }\n    }\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  // query attribute locations and build name to location map.\n  _queryAttributeLocations() {\n    this._attributeToLocationMap = {};\n    this._attributeCount = this.getAttributeCount();\n    for (let location = 0; location < this._attributeCount; location++) {\n      const name = this.getAttributeInfo(location).name;\n      this._attributeToLocationMap[name] = this.getAttributeLocation(name);\n    }\n    this._warnedLocations = {};\n  }\n\n  // query uniform locations and build name to setter map.\n  _queryUniformLocations() {\n    const {gl} = this;\n    this._uniformSetters = {};\n    this._uniformCount = this.getUniformCount();\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.getUniformInfo(i);\n      const parsedName = parseUniformName(info.name);\n      const location = this.getUniformLocation(parsedName.name);\n      this._uniformSetters[parsedName.name] =\n        getUniformSetter(gl, location, info, parsedName.isArray);\n    }\n    this._textureIndexCounter = 0;\n  }\n\n  _setId(id) {\n    // If program is not named, name it after shader names\n    if (!id) {\n      const programName = this._getName();\n      // TODO - this.id will already have been initialized\n      this.id = uid(programName);\n    }\n  }\n}\n\n// create uniform setters\n// Map of uniform names to setter functions\nexport function getUniformDescriptors(gl, program) {\n  const uniformDescriptors = {};\n  const length = program.getUniformCount();\n  for (let i = 0; i < length; i++) {\n    const info = program.getUniformInfo(i);\n    const location = program.getUniformLocation(info.name);\n    const descriptor = getUniformSetter(gl, location, info);\n    uniformDescriptors[descriptor.name] = descriptor;\n  }\n  return uniformDescriptors;\n}\n\n// Get a map of buffer indices\nexport function getVaryingMap(varyings, bufferMode) {\n  const varyingMap = {};\n  let index = 0;\n  assert(bufferMode === GL_SEPARATE_ATTRIBS || bufferMode === GL_INTERLEAVED_ATTRIBS);\n  const indexIncrement = bufferMode === GL_SEPARATE_ATTRIBS ? 1 : 0;\n  for (const varying of varyings) {\n    varyingMap[varying] = index;\n    index += indexIncrement;\n  }\n  return varyingMap;\n}\n"],"file":"program.js"}