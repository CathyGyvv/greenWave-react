{"version":3,"sources":["../../../src/geometry/geometry.js"],"names":["uid","assert","DRAW_MODE","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","getDrawMode","drawMode","mode","Geometry","constructor","opts","id","vertexCount","undefined","attributes","name","needsRedraw","userData","Object","seal","setAttributes","setNeedsRedraw","redraw","getNeedsRedraw","clearRedrawFlags","setVertexCount","getVertexCount","indices","value","length","vertices","positions","hasAttribute","attributeName","Boolean","getAttribute","attribute","getArray","getAttributes","ArrayBuffer","isView","_print","_autoDetectAttribute","assign","instanced","category","size","isIndexed","Uint16Array","Uint32Array"],"mappings":"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","sourcesContent":["import {uid} from '../utils';\nimport assert from '../utils/assert';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n                       // Each vertex connects to the previous and the first vertex in the fan.\n};\n\n// Helper function to handle string draw modes - when using this library without WebGL constants\nexport function getDrawMode(drawMode) {\n  const mode = typeof drawMode === 'string' ?\n    DRAW_MODE[drawMode] || DRAW_MODE.TRIANGLES :\n    drawMode;\n  assert(mode >= 0 && mode <= DRAW_MODE.TRIANGLE_FAN, 'Illegal drawMode');\n  return mode;\n}\n\nexport default class Geometry {\n\n  constructor(opts = {}) {\n    const {\n      id,\n      drawMode = DRAW_MODE.TRIANGLES,\n      vertexCount = undefined,\n      attributes\n    } = opts;\n\n    this.id = id || uid(this.constructor.name);\n    this.drawMode = getDrawMode(drawMode);\n    this.vertexCount = vertexCount;\n    this.attributes = {};\n    this.needsRedraw = true;\n    this.userData = {};\n    Object.seal(this);\n\n    if (attributes) {\n      this.setAttributes(attributes);\n    }\n  }\n\n  setNeedsRedraw(redraw = true) {\n    this.needsRedraw = redraw;\n    return this;\n  }\n\n  getNeedsRedraw({clearRedrawFlags = false} = {}) {\n    let redraw = false;\n    redraw = redraw || this.needsRedraw;\n    this.needsRedraw = this.needsRedraw && !clearRedrawFlags;\n    return redraw;\n  }\n\n  setVertexCount(vertexCount) {\n    this.vertexCount = vertexCount;\n  }\n\n  getVertexCount() {\n    if (this.vertexCount !== undefined) {\n      return this.vertexCount;\n    } else if (this.attributes.indices) {\n      return this.attributes.indices.value.length;\n    } else if (this.attributes.vertices) {\n      return this.attributes.vertices.value.length / 3;\n    } else if (this.attributes.positions) {\n      return this.attributes.positions.value.length / 3;\n    }\n    return false;\n  }\n\n  hasAttribute(attributeName) {\n    return Boolean(this.attributes[attributeName]);\n  }\n\n  getAttribute(attributeName) {\n    const attribute = this.attributes[attributeName];\n    assert(attribute);\n    return attribute.value;\n  }\n\n  getArray(attributeName) {\n    const attribute = this.attributes[attributeName];\n    assert(attribute);\n    return attribute.value;\n  }\n\n  getAttributes() {\n    return this.attributes;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  setAttributes(attributes) {\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`);\n\n      this._autoDetectAttribute(attributeName, attribute);\n\n      this.attributes[attributeName] = Object.assign({}, attribute, {\n        instanced: attribute.instanced || 0\n      });\n    }\n    this.setNeedsRedraw();\n    return this;\n  }\n\n  // Check for well known attribute names\n  /* eslint-disable default-case, complexity */\n  _autoDetectAttribute(attributeName, attribute) {\n    let category;\n    switch (attributeName) {\n    case 'indices':\n      category = category || 'indices';\n      break;\n    case 'texCoords':\n    case 'texCoord1':\n    case 'texCoord2':\n    case 'texCoord3':\n      category = 'uvs';\n      break;\n    case 'vertices':\n    case 'positions':\n    case 'normals':\n    case 'pickingColors':\n      category = 'vectors';\n      break;\n    }\n\n    // Check for categorys\n    switch (category) {\n    case 'vectors':\n      attribute.size = attribute.size || 3;\n      break;\n    case 'uvs':\n      attribute.size = attribute.size || 2;\n      break;\n    case 'indices':\n      attribute.size = attribute.size || 1;\n      attribute.isIndexed = attribute.isIndexed === undefined ? true : attribute.isIndexed;\n      assert(\n        attribute.value instanceof Uint16Array ||\n        attribute.value instanceof Uint32Array,\n        'attribute array for \"indices\" must be of integer type'\n      );\n      break;\n    }\n\n    assert(attribute.size, `attribute ${attributeName} needs size`);\n  }\n  /* eslint-enable default-case, complexity */\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n}\n"],"file":"geometry.js"}