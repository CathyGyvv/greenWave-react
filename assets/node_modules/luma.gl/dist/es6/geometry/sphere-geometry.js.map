{"version":3,"sources":["../../../src/geometry/sphere-geometry.js"],"names":["Geometry","uid","SphereGeometry","constructor","opts","nlat","nlong","radius","id","Object","assign","attributes","getSphereAttributes","startLat","endLat","Math","PI","latRange","startLong","endLong","longRange","numVertices","value","n1","n2","n3","u","v","positions","Float32Array","normals","texCoords","indices","Uint16Array","y","x","index","i2","i3","theta","phi","sinTheta","sin","cosTheta","cos","sinPhi","cosPhi","ux","uy","uz","r","numVertsAround"],"mappings":"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","sourcesContent":["import Geometry from './geometry';\nimport {uid} from '../utils';\n\nexport default class SphereGeometry extends Geometry {\n  constructor(opts = {}) {\n    const {\n      nlat = 10,\n      nlong = 10,\n      radius = 1,\n      id = uid('sphere-geometry')\n    } = opts;\n\n    super(Object.assign({}, opts, {id, attributes: getSphereAttributes(nlat, nlong, radius)}));\n  }\n}\n\n// Primitives inspired by TDL http://code.google.com/p/webglsamples/,\n// copyright 2011 Google Inc. new BSD License\n// (http://www.opensource.org/licenses/bsd-license.php).\n/* eslint-disable max-statements, complexity */\nfunction getSphereAttributes(nlat, nlong, radius) {\n  const startLat = 0;\n  const endLat = Math.PI;\n  const latRange = endLat - startLat;\n  const startLong = 0;\n  const endLong = 2 * Math.PI;\n  const longRange = endLong - startLong;\n  const numVertices = (nlat + 1) * (nlong + 1);\n\n  if (typeof radius === 'number') {\n    const value = radius;\n    radius = (n1, n2, n3, u, v) => value;\n  }\n\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n  const texCoords = new Float32Array(numVertices * 2);\n  const indices = new Uint16Array(nlat * nlong * 6);\n\n  // Create positions, normals and texCoords\n  for (let y = 0; y <= nlat; y++) {\n    for (let x = 0; x <= nlong; x++) {\n\n      const u = x / nlong;\n      const v = y / nlat;\n\n      const index = x + y * (nlong + 1);\n      const i2 = index * 2;\n      const i3 = index * 3;\n\n      const theta = longRange * u;\n      const phi = latRange * v;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n      const ux = cosTheta * sinPhi;\n      const uy = cosPhi;\n      const uz = sinTheta * sinPhi;\n\n      const r = radius(ux, uy, uz, u, v);\n\n      positions[i3 + 0] = r * ux;\n      positions[i3 + 1] = r * uy;\n      positions[i3 + 2] = r * uz;\n\n      normals[i3 + 0] = ux;\n      normals[i3 + 1] = uy;\n      normals[i3 + 2] = uz;\n\n      texCoords[i2 + 0] = u;\n      texCoords[i2 + 1] = v;\n    }\n  }\n\n  // Create indices\n  const numVertsAround = nlat + 1;\n  for (let x = 0; x < nlat; x++) {\n    for (let y = 0; y < nlong; y++) {\n      const index = (x * nlong + y) * 6;\n\n      indices[index + 0] = y * numVertsAround + x;\n      indices[index + 1] = y * numVertsAround + x + 1;\n      indices[index + 2] = (y + 1) * numVertsAround + x;\n\n      indices[index + 3] = (y + 1) * numVertsAround + x;\n      indices[index + 4] = y * numVertsAround + x + 1;\n      indices[index + 5] = (y + 1) * numVertsAround + x + 1;\n    }\n  }\n\n  return {\n    positions,\n    indices,\n    normals,\n    texCoords\n  };\n}\n"],"file":"sphere-geometry.js"}