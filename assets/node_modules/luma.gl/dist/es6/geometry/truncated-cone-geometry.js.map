{"version":3,"sources":["../../../src/geometry/truncated-cone-geometry.js"],"names":["Geometry","INDEX_OFFSETS","x","y","z","TruncatedConeGeometry","constructor","opts","bottomRadius","topRadius","height","nradial","nvertical","verticalAxis","topCap","bottomCap","extra","numVertices","slant","Math","atan2","msin","sin","mcos","cos","mpi","PI","cosSlant","sinSlant","start","end","vertsAroundEdge","positions","Float32Array","normals","texCoords","indices","Uint16Array","indexOffset","i3","i2","i","v","ringRadius","j","index","Object","assign","attributes"],"mappings":"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","sourcesContent":["import Geometry from './geometry';\n\nconst INDEX_OFFSETS = {\n  x: [2, 0, 1],\n  y: [0, 1, 2],\n  z: [1, 2, 0]\n};\n\nexport default class TruncatedConeGeometry extends Geometry {\n\n  // Primitives inspired by TDL http://code.google.com/p/webglsamples/,\n  // copyright 2011 Google Inc. new BSD License\n  // (http://www.opensource.org/licenses/bsd-license.php).\n  /* eslint-disable max-statements, complexity */\n  constructor(opts = {}) {\n    const {\n      bottomRadius = 0,\n      topRadius = 0,\n      height = 1,\n      nradial = 10,\n      nvertical = 10,\n      verticalAxis = 'y',\n      topCap = false,\n      bottomCap = false\n    } = opts;\n\n    const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n    const numVertices = (nradial + 1) * (nvertical + 1 + extra);\n\n    const slant = Math.atan2(bottomRadius - topRadius, height);\n    const msin = Math.sin;\n    const mcos = Math.cos;\n    const mpi = Math.PI;\n    const cosSlant = mcos(slant);\n    const sinSlant = msin(slant);\n    const start = topCap ? -2 : 0;\n    const end = nvertical + (bottomCap ? 2 : 0);\n    const vertsAroundEdge = nradial + 1;\n\n    const positions = new Float32Array(numVertices * 3);\n    const normals = new Float32Array(numVertices * 3);\n    const texCoords = new Float32Array(numVertices * 2);\n    const indices = new Uint16Array(nradial * (nvertical + extra) * 6);\n    const indexOffset = INDEX_OFFSETS[verticalAxis];\n\n    let i3 = 0;\n    let i2 = 0;\n    for (let i = start; i <= end; i++) {\n      let v = i / nvertical;\n      let y = height * v;\n      let ringRadius;\n\n      if (i < 0) {\n        y = 0;\n        v = 1;\n        ringRadius = bottomRadius;\n      } else if (i > nvertical) {\n        y = height;\n        v = 1;\n        ringRadius = topRadius;\n      } else {\n        ringRadius = bottomRadius +\n          (topRadius - bottomRadius) * (i / nvertical);\n      }\n      if (i === -2 || i === nvertical + 2) {\n        ringRadius = 0;\n        v = 0;\n      }\n      y -= height / 2;\n      for (let j = 0; j < vertsAroundEdge; j++) {\n        const sin = msin(j * mpi * 2 / nradial);\n        const cos = mcos(j * mpi * 2 / nradial);\n\n        positions[i3 + indexOffset[0]] = sin * ringRadius;\n        positions[i3 + indexOffset[1]] = y;\n        positions[i3 + indexOffset[2]] = cos * ringRadius;\n\n        normals[i3 + indexOffset[0]] = (i < 0 || i > nvertical) ? 0 : (sin * cosSlant);\n        normals[i3 + indexOffset[1]] = (i < 0) ? -1 : (i > nvertical ? 1 : sinSlant);\n        normals[i3 + indexOffset[2]] = (i < 0 || i > nvertical) ? 0 : (cos * cosSlant);\n\n        texCoords[i2 + 0] = j / nradial;\n        texCoords[i2 + 1] = v;\n\n        i2 += 2;\n        i3 += 3;\n      }\n    }\n\n    for (let i = 0; i < nvertical + extra; i++) {\n      for (let j = 0; j < nradial; j++) {\n        const index = (i * nradial + j) * 6;\n        indices[index + 0] = vertsAroundEdge * (i + 0) + 0 + j;\n        indices[index + 1] = vertsAroundEdge * (i + 0) + 1 + j;\n        indices[index + 2] = vertsAroundEdge * (i + 1) + 1 + j;\n        indices[index + 3] = vertsAroundEdge * (i + 0) + 0 + j;\n        indices[index + 4] = vertsAroundEdge * (i + 1) + 1 + j;\n        indices[index + 5] = vertsAroundEdge * (i + 1) + 0 + j;\n      }\n    }\n\n    super(Object.assign({}, opts, {\n      attributes: {\n        positions,\n        normals,\n        texCoords,\n        indices\n      }\n    }));\n  }\n}\n"],"file":"truncated-cone-geometry.js"}