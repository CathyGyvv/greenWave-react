{"version":3,"sources":["../../../src/core/pick-models.js"],"names":["clear","isWebGL","log","Group","assert","ILLEGAL_ARG","getDevicePixelRatio","window","devicePixelRatio","pickModels","gl","models","position","uniforms","parameters","settings","useDevicePixelRatio","useDevicePixels","framebuffer","deprecated","x","y","resize","width","canvas","height","dpr","deviceX","deviceY","group","children","traverseReverse","model","isPickable","color","depth","setUniforms","picking_uActive","draw","readPixels","format","RGBA","type","UNSIGNED_BYTE","isPicked"],"mappings":";;;;;;;;AAAA;AACA,SAAQA,KAAR,EAAeC,OAAf,QAA6B,UAA7B;AACA,SAAQC,GAAR,QAAkB,UAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,MAAMC,cAAc,0BAApB;;AAEA,SAASC,mBAAT,GAA+B;AAC7B,SAAO,OAAOC,MAAP,KAAkB,WAAlB,GAAgCA,OAAOC,gBAAvC,GAA0D,CAAjE;AACD;;AAED,eAAe,SAASC,UAAT,CAAoBC,EAApB,EAAwB;AACrCC,QADqC;AAErCC,UAFqC;AAGrCC,aAAW,EAH0B;AAGtB;AACfC,eAAa,EAJwB;AAKrCC,UALqC;AAMrCC,wBAAsB,IANe;AAMT;AAC5BC,oBAAkB,IAPmB;AAQrCC;AARqC,CAAxB,EASZ;AACDd,SAAOH,QAAQS,EAAR,CAAP,EAAoBL,WAApB;AACAD,SAAOc,WAAP,EAAoBb,WAApB;AACAD,SAAOQ,QAAP,EAAiBP,WAAjB;;AACA,MAAIW,wBAAwB,IAA5B,EAAkC;AAChCd,QAAIiB,UAAJ,CAAe,qBAAf,EAAsC,iBAAtC;AACAF,sBAAkBD,mBAAlB;AACD;;AAPA,mCAScJ,QATd;AAAA,QASMQ,CATN;AAAA,QASSC,CATT,iBAWD;;;AACAH,cAAYI,MAAZ,CAAmB;AAACC,WAAOb,GAAGc,MAAH,CAAUD,KAAlB;AAAyBE,YAAQf,GAAGc,MAAH,CAAUC;AAA3C,GAAnB,EAZC,CAcD;AACA;;AACA,QAAMC,MAAMT,kBAAkBX,qBAAlB,GAA0C,CAAtD,CAhBC,CAiBD;;AACA,QAAMqB,UAAUP,IAAIM,GAApB;AACA,QAAME,UAAUlB,GAAGc,MAAH,CAAUC,MAAV,GAAmBJ,IAAIK,GAAvC,CAnBC,CAqBD;AACA;AACA;AACA;AACA;;AACA,QAAMG,QAAQ,IAAI1B,KAAJ,CAAU;AAAC2B,cAAUnB;AAAX,GAAV,CAAd;AACA,SAAOkB,MAAME,eAAN,CAAsBC,SAAS;AAEpC,QAAIA,MAAMC,UAAN,EAAJ,EAAwB;AACtB;AACAjC,YAAMU,EAAN,EAAU;AAACQ,mBAAD;AAAcgB,eAAO,IAArB;AAA2BC,eAAO;AAAlC,OAAV,EAFsB,CAItB;;AACA;;AACAH,YAAMI,WAAN,CAAkB;AAACC,yBAAiB;AAAlB,OAAlB;AACAL,YAAMM,IAAN,CAAW;AAACzB,gBAAD;AAAWC,kBAAX;AAAuBC,gBAAvB;AAAiCG;AAAjC,OAAX;AACAc,YAAMI,WAAN,CAAkB;AAACC,yBAAiB;AAAlB,OAAlB,EARsB,CAUtB;;AACA,YAAMH,QAAQhB,YAAYqB,UAAZ,CAAuB;AACnCnB,WAAGO,OADgC;AAEnCN,WAAGO,OAFgC;AAGnCL,eAAO,CAH4B;AAInCE,gBAAQ,CAJ2B;AAKnCe,gBAAQ9B,GAAG+B,IALwB;AAMnCC,cAAMhC,GAAGiC;AAN0B,OAAvB,CAAd;AAQA,YAAMC,WAAWV,MAAM,CAAN,MAAa,CAAb,IAAkBA,MAAM,CAAN,MAAa,CAA/B,IAAoCA,MAAM,CAAN,MAAa,CAAlE,CAnBsB,CAqBtB;;AACA,UAAIU,QAAJ,EAAc;AACZ,eAAO;AACLZ,eADK;AAELE,eAFK;AAGLd,WAHK;AAILC,WAJK;AAKLM,iBALK;AAMLC;AANK,SAAP;AAQD;AACF;;AAED,WAAO,IAAP;AACD,GArCM,CAAP,CA3BC,CAiED;AACD","sourcesContent":["/* global window */\nimport {clear, isWebGL} from '../webgl';\nimport {log} from '../utils';\nimport Group from './group';\nimport assert from '../utils/assert';\n\nconst ILLEGAL_ARG = 'Illegal argument to pick';\n\nfunction getDevicePixelRatio() {\n  return typeof window !== 'undefined' ? window.devicePixelRatio : 1;\n}\n\nexport default function pickModels(gl, {\n  models,\n  position,\n  uniforms = {}, // eslint-disable-line\n  parameters = {},\n  settings,\n  useDevicePixelRatio = null, // deprecated\n  useDevicePixels = true,\n  framebuffer\n}) {\n  assert(isWebGL(gl), ILLEGAL_ARG);\n  assert(framebuffer, ILLEGAL_ARG);\n  assert(position, ILLEGAL_ARG);\n  if (useDevicePixelRatio !== null) {\n    log.deprecated('useDevicePixelRatio', 'useDevicePixels')();\n    useDevicePixels = useDevicePixelRatio;\n  }\n\n  const [x, y] = position;\n\n  // Match our picking framebuffer with the size of the canvas drawing buffer\n  framebuffer.resize({width: gl.canvas.width, height: gl.canvas.height});\n\n  // Compensate for devicePixelRatio\n  // Note: this assumes the canvas framebuffer has been matched\n  const dpr = useDevicePixels ? getDevicePixelRatio() : 1;\n  // Reverse the y coordinate\n  const deviceX = x * dpr;\n  const deviceY = gl.canvas.height - y * dpr;\n\n  // return withParameters(gl, {\n  //   // framebuffer,\n  //   // // We are only interested in one pixel, no need to render anything else\n  //   // scissorTest: {x: deviceX, y: deviceY, w: 1, h: 1}\n  // }, () => {\n  const group = new Group({children: models});\n  return group.traverseReverse(model => {\n\n    if (model.isPickable()) {\n      // Clear the frame buffer\n      clear(gl, {framebuffer, color: true, depth: true});\n\n      // Render picking colors\n      /* eslint-disable camelcase */\n      model.setUniforms({picking_uActive: 1});\n      model.draw({uniforms, parameters, settings, framebuffer});\n      model.setUniforms({picking_uActive: 0});\n\n      // Sample Read color in the central pixel, to be mapped as a picking color\n      const color = framebuffer.readPixels({\n        x: deviceX,\n        y: deviceY,\n        width: 1,\n        height: 1,\n        format: gl.RGBA,\n        type: gl.UNSIGNED_BYTE});\n\n      const isPicked = color[0] !== 0 || color[1] !== 0 || color[2] !== 0;\n\n      // Add the information to the stack\n      if (isPicked) {\n        return {\n          model,\n          color,\n          x,\n          y,\n          deviceX,\n          deviceY\n        };\n      }\n    }\n\n    return null;\n  });\n  // });\n}\n"],"file":"pick-models.js"}