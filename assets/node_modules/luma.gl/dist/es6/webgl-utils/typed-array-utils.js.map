{"version":3,"sources":["../../../src/webgl-utils/typed-array-utils.js"],"names":["GL_BYTE","GL_UNSIGNED_BYTE","GL_SHORT","GL_UNSIGNED_SHORT","GL_INT","GL_UNSIGNED_INT","GL_FLOAT","GL_UNSIGNED_SHORT_4_4_4_4","GL_UNSIGNED_SHORT_5_5_5_1","GL_UNSIGNED_SHORT_5_6_5","ERR_TYPE_DEDUCTION","getGLTypeFromTypedArray","arrayOrType","type","ArrayBuffer","isView","constructor","Float32Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray","Int8Array","Int16Array","Int32Array","Error","getTypedArrayFromGLType","glType","clamped","flipRows","data","width","height","bytesPerPixel","temp","bytesPerRow","y","topOffset","bottomOffset","set","subarray","copyWithin","scalePixels","newWidth","Math","round","newHeight","newData","x","c"],"mappings":"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","sourcesContent":["// GL Constants\nconst GL_BYTE = 0x1400;\nconst GL_UNSIGNED_BYTE = 0x1401;\nconst GL_SHORT = 0x1402;\nconst GL_UNSIGNED_SHORT = 0x1403;\nconst GL_INT = 0x1404;\nconst GL_UNSIGNED_INT = 0x1405;\nconst GL_FLOAT = 0x1406;\nconst GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;\nconst GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;\nconst GL_UNSIGNED_SHORT_5_6_5 = 0x8363;\n\nconst ERR_TYPE_DEDUCTION = 'Failed to deduce GL constant from typed array';\n\n// Converts TYPED ARRAYS to corresponding GL constant\n// Used to auto deduce gl parameter types\nexport function getGLTypeFromTypedArray(arrayOrType) {\n  // If typed array, look up constructor\n  const type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n  switch (type) {\n  case Float32Array: return GL_FLOAT;\n  case Uint16Array: return GL_UNSIGNED_SHORT;\n  case Uint32Array: return GL_UNSIGNED_INT;\n  case Uint8Array: return GL_UNSIGNED_BYTE;\n  case Uint8ClampedArray: return GL_UNSIGNED_BYTE;\n  case Int8Array: return GL_BYTE;\n  case Int16Array: return GL_SHORT;\n  case Int32Array: return GL_INT;\n  default:\n    throw new Error(ERR_TYPE_DEDUCTION);\n  }\n}\n\n// Converts GL constant to corresponding TYPED ARRAY\n// Used to auto deduce gl parameter types\n\n/* eslint-disable complexity */\nexport function getTypedArrayFromGLType(glType, {clamped = true} = {}) {\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n  case GL_FLOAT:\n    return Float32Array;\n  case GL_UNSIGNED_SHORT:\n  case GL_UNSIGNED_SHORT_5_6_5:\n  case GL_UNSIGNED_SHORT_4_4_4_4:\n  case GL_UNSIGNED_SHORT_5_5_5_1:\n    return Uint16Array;\n  case GL_UNSIGNED_INT:\n    return Uint32Array;\n  case GL_UNSIGNED_BYTE:\n    return clamped ? Uint8ClampedArray : Uint8Array;\n  case GL_BYTE:\n    return Int8Array;\n  case GL_SHORT:\n    return Int16Array;\n  case GL_INT:\n    return Int32Array;\n  default:\n    throw new Error('Failed to deduce typed array type from GL constant');\n  }\n}\n/* eslint-enable complexity */\n\n// Flip rows (can be used on arrays returned from `Framebuffer.readPixels`)\n// https://stackoverflow.com/questions/41969562/\n// how-can-i-flip-the-result-of-webglrenderingcontext-readpixels\nexport function flipRows({data, width, height, bytesPerPixel = 4, temp}) {\n  const bytesPerRow = width * bytesPerPixel;\n\n  // make a temp buffer to hold one row\n  temp = temp || new Uint8Array(bytesPerRow);\n  for (let y = 0; y < height / 2; ++y) {\n    const topOffset = y * bytesPerRow;\n    const bottomOffset = (height - y - 1) * bytesPerRow;\n    // make copy of a row on the top half\n    temp.set(data.subarray(topOffset, topOffset + bytesPerRow));\n    // copy a row from the bottom half to the top\n    data.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n    // copy the copy of the top half row to the bottom half\n    data.set(temp, bottomOffset);\n  }\n}\n\nexport function scalePixels({data, width, height}) {\n  const newWidth = Math.round(width / 2);\n  const newHeight = Math.round(height / 2);\n  const newData = new Uint8Array(newWidth * newHeight * 4);\n  for (let y = 0; y < newHeight; y++) {\n    for (let x = 0; x < newWidth; x++) {\n      for (let c = 0; c < 4; c++) {\n        newData[(y * newWidth + x) * 4 + c] = data[(y * 2 * width + x * 2) * 4 + c];\n      }\n    }\n  }\n  return {data: newData, width: newWidth, height: newHeight};\n}\n"],"file":"typed-array-utils.js"}