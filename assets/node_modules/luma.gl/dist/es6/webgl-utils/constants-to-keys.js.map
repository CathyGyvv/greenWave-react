{"version":3,"sources":["../../../src/webgl-utils/constants-to-keys.js"],"names":["assert","getKeyValue","gl","name","number","Number","isNaN","replace","value","undefined","getKey","key","String","getKeyType"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,iBAAnB,C,CAEA;;AACA,OAAO,SAASC,WAAT,CAAqBC,EAArB,EAAyBC,IAAzB,EAA+B;AACpC;AACA,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAOA,IAAP;AACD,GAJmC,CAMpC;;;AACA,QAAMC,SAASC,OAAOF,IAAP,CAAf;;AACA,MAAI,CAACG,MAAMF,MAAN,CAAL,EAAoB;AAClB,WAAOA,MAAP;AACD,GAVmC,CAYpC;;;AACAD,SAAOA,KAAKI,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAAP;AACA,QAAMC,QAAQN,GAAGC,IAAH,CAAd;AACAH,SAAOQ,UAAUC,SAAjB,EAA6B,mCAAkCN,IAAK,EAApE;AACA,SAAOK,KAAP;AACD;AAED,OAAO,SAASE,MAAT,CAAgBR,EAAhB,EAAoBM,KAApB,EAA2B;AAChCA,UAAQH,OAAOG,KAAP,CAAR;;AACA,OAAK,MAAMG,GAAX,IAAkBT,EAAlB,EAAsB;AACpB,QAAIA,GAAGS,GAAH,MAAYH,KAAhB,EAAuB;AACrB,aAAQ,MAAKG,GAAI,EAAjB;AACD;AACF;;AACD,SAAOC,OAAOJ,KAAP,CAAP;AACD;AAED,OAAO,SAASK,UAAT,CAAoBX,EAApB,EAAwBM,KAAxB,EAA+B;AACpCR,SAAOQ,UAAUC,SAAjB,EAA4B,eAA5B;AACAD,UAAQH,OAAOG,KAAP,CAAR;;AACA,OAAK,MAAMG,GAAX,IAAkBT,EAAlB,EAAsB;AACpB,QAAIA,GAAGS,GAAH,MAAYH,KAAhB,EAAuB;AACrB,aAAQ,MAAKG,GAAI,EAAjB;AACD;AACF;;AACD,SAAOC,OAAOJ,KAAP,CAAP;AACD","sourcesContent":["import assert from '../utils/assert';\n\n// Resolve a WebGL enumeration name (returns itself if already a number)\nexport function getKeyValue(gl, name) {\n  // If not a string, return (assume number)\n  if (typeof name !== 'string') {\n    return name;\n  }\n\n  // If string converts to number, return number\n  const number = Number(name);\n  if (!isNaN(number)) {\n    return number;\n  }\n\n  // Look up string, after removing any 'GL.' or 'gl.' prefix\n  name = name.replace(/^.*\\./, '');\n  const value = gl[name];\n  assert(value !== undefined, `Accessing undefined constant GL.${name}`);\n  return value;\n}\n\nexport function getKey(gl, value) {\n  value = Number(value);\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `gl.${key}`;\n    }\n  }\n  return String(value);\n}\n\nexport function getKeyType(gl, value) {\n  assert(value !== undefined, 'undefined key');\n  value = Number(value);\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `gl.${key}`;\n    }\n  }\n  return String(value);\n}\n"],"file":"constants-to-keys.js"}