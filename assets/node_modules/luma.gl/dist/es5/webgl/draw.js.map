{"version":3,"sources":["../../../src/webgl/draw.js"],"names":["draw","gl","drawMode","GL","TRIANGLES","vertexCount","offset","isIndexed","indexType","UNSIGNED_SHORT","isInstanced","instanceCount","extension","getExtension","webgl2","isWebGL2","context","suffix","drawElements","drawArrays"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;;;AALA;AACA;AACA;AAKA;AACA;AACA;AACA;AACO,SAASA,IAAT,CAAcC,EAAd,QAQJ;AAAA,2BAPDC,QAOC;AAAA,MAPDA,QAOC,8BAPUC,mBAAGC,SAOb;AAAA,MANDC,WAMC,QANDA,WAMC;AAAA,yBALDC,MAKC;AAAA,MALDA,MAKC,4BALQ,CAKR;AAAA,4BAJDC,SAIC;AAAA,MAJDA,SAIC,+BAJW,KAIX;AAAA,4BAHDC,SAGC;AAAA,MAHDA,SAGC,+BAHWL,mBAAGM,cAGd;AAAA,8BAFDC,WAEC;AAAA,MAFDA,WAEC,iCAFa,KAEb;AAAA,gCADDC,aACC;AAAA,MADDA,aACC,mCADe,CACf;AACD,sCAAmBV,EAAnB;AAEA,MAAMW,YAAYX,GAAGY,YAAH,CAAgB,wBAAhB,CAAlB,CAHC,CAKD;;AACA,MAAIH,WAAJ,EAAiB;AACf,QAAMI,SAASC,SAASd,EAAT,CAAf;;AACA,QAAMW,aAAYX,GAAGY,YAAH,CAAgB,wBAAhB,CAAlB;;AACA,QAAMG,UAAUF,SAASb,EAAT,GAAcW,UAA9B;AACA,QAAMK,SAASH,SAAS,EAAT,GAAc,OAA7B;AACA,QAAMI,eAAe,0BAA0BD,MAA/C;AACA,QAAME,aAAa,wBAAwBF,MAA3C;;AAEA,QAAIV,SAAJ,EAAe;AACbS,cAAQE,YAAR,EACEhB,QADF,EACYG,WADZ,EACyBG,SADzB,EACoCF,MADpC,EAC4CK,aAD5C;AAGD,KAJD,MAIO;AACLK,cAAQG,UAAR,EACEjB,QADF,EACYI,MADZ,EACoBD,WADpB,EACiCM,aADjC;AAGD;AACF,GAjBD,MAiBO,IAAIJ,SAAJ,EAAe;AACpBN,OAAGiB,YAAH,CAAgBhB,QAAhB,EAA0BG,WAA1B,EAAuCG,SAAvC,EAAkDF,MAAlD;AACD,GAFM,MAEA;AACLL,OAAGkB,UAAH,CAAcjB,QAAd,EAAwBI,MAAxB,EAAgCD,WAAhC;AACD;AACF","sourcesContent":["/* eslint-disable */\n// TODO - generic draw call\n// One of the good things about GL is that there are so many ways to draw things\nimport GL from '../constants';\nimport {assertWebGLContext, assertWebGL2Context, getKeyValue} from '../webgl-utils';\nimport assert from '../utils/assert';\n\n// A good thing about webGL is that there are so many ways to draw things,\n// e.g. depending on whether data is indexed and/or isInstanced.\n// This function unifies those into a single call with simple parameters\n// that have sane defaults.\nexport function draw(gl, {\n  drawMode = GL.TRIANGLES,\n  vertexCount,\n  offset = 0,\n  isIndexed = false,\n  indexType = GL.UNSIGNED_SHORT,\n  isInstanced = false,\n  instanceCount = 0\n}) {\n  assertWebGLContext(gl);\n\n  const extension = gl.getExtension('ANGLE_instanced_arrays');\n\n  // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n  if (isInstanced) {\n    const webgl2 = isWebGL2(gl);\n    const extension = gl.getExtension('ANGLE_instanced_arrays');\n    const context = webgl2 ? gl : extension;\n    const suffix = webgl2 ? '' : 'ANGLE';\n    const drawElements = 'drawElementsInstanced' + suffix;\n    const drawArrays = 'drawArraysInstanced' + suffix;\n\n    if (isIndexed) {\n      context[drawElements](\n        drawMode, vertexCount, indexType, offset, instanceCount\n      );\n    } else {\n      context[drawArrays](\n        drawMode, offset, vertexCount, instanceCount\n      );\n    }\n  } else if (isIndexed) {\n    gl.drawElements(drawMode, vertexCount, indexType, offset);\n  } else {\n    gl.drawArrays(drawMode, offset, vertexCount);\n  }\n}\n"],"file":"draw.js"}