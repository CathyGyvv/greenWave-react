{"version":3,"sources":["../../../src/webgl/vertex-array.js"],"names":["OES_vertex_array_object","GL_ELEMENT_ARRAY_BUFFER","GL_VERTEX_ATTRIB_ARRAY_ENABLED","GL_VERTEX_ATTRIB_ARRAY_SIZE","GL_VERTEX_ATTRIB_ARRAY_STRIDE","GL_VERTEX_ATTRIB_ARRAY_TYPE","GL_VERTEX_ATTRIB_ARRAY_NORMALIZED","GL_VERTEX_ATTRIB_ARRAY_POINTER","GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","GL_VERTEX_ATTRIB_ARRAY_INTEGER","GL_VERTEX_ATTRIB_ARRAY_DIVISOR","PARAMETERS","ERR_ELEMENTS","VertexArray","gl","getParameter","MAX_VERTEX_ATTRIBS","getExtension","luma","defaultVertexArray","handle","opts","elements","buffers","locations","names","drawParameters","_bound","_filledLocations","Object","seal","initialize","setLocations","setBuffers","clear","setElements","location","buffer","target","layout","undefined","bind","ARRAY_BUFFER","size","type","normalized","stride","offset","integer","vertexAttribPointer","vertexAttribIPointer","clearBindings","_getLocations","ext","bindVertexArray","bufferData","_getBufferAndLayout","setBuffer","setDivisor","instanced","enable","disable","bindBuffer","disableZero","disableVertexAttribArray","enableVertexAttribArray","divisor","vertexAttribDivisor","array","constructor","Float32Array","_setGenericFloatArray","Int32Array","_setGenericIntArray","Uint32Array","_setGenericUintArray","setGenericValues","v0","v1","v2","v3","arguments","length","vertexAttrib1f","vertexAttrib2f","vertexAttrib3f","vertexAttrib4f","funcOrHandle","value","isInstanced","isIndexed","indexType","forEach","bufferName","Number","isFinite","Array","_attributeCount","fill","_warn","log","warn","_print","assign","vertexAttrib1fv","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttribI1iv","vertexAttribI2iv","vertexAttribI3iv","vertexAttribI4iv","vertexAttribI1uiv","vertexAttribI2uiv","vertexAttribI3uiv","vertexAttribI4uiv","createVertexArray","deleteVertexArray","pname","result","getVertexAttribOffset","getVertexAttrib","MAX_ATTRIBUTES","map","_","parameter","Resource"],"mappings":"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","sourcesContent":["// WebGL2 VertexArray Objects Helper\nimport Resource from './resource';\nimport {isWebGL2, getKey} from '../webgl-utils';\nimport {log, assert} from '../utils';\n\n/* eslint-disable camelcase */\nconst OES_vertex_array_object = 'OES_vertex_array_object';\n\nconst GL_ELEMENT_ARRAY_BUFFER = 0x8893;\n\n// const GL_CURRENT_VERTEX_ATTRIB = 0x8626;\n\nconst GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;\nconst GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;\nconst GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;\nconst GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;\nconst GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;\nconst GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;\nconst GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;\n\nconst GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;\nconst GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;\n\nconst PARAMETERS = [\n  GL_VERTEX_ATTRIB_ARRAY_ENABLED,\n  GL_VERTEX_ATTRIB_ARRAY_SIZE,\n  GL_VERTEX_ATTRIB_ARRAY_STRIDE,\n  GL_VERTEX_ATTRIB_ARRAY_TYPE,\n  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED,\n  GL_VERTEX_ATTRIB_ARRAY_POINTER,\n  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING,\n\n  GL_VERTEX_ATTRIB_ARRAY_INTEGER,\n  GL_VERTEX_ATTRIB_ARRAY_DIVISOR\n];\n\nconst ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\n\nexport default class VertexArray extends Resource {\n\n  static isSupported(gl) {\n    return isWebGL2(gl) || gl.getExtension(OES_vertex_array_object);\n  }\n\n  static getDefaultArray(gl) {\n    gl.luma = gl.luma || {};\n    if (!gl.luma.defaultVertexArray) {\n      gl.luma.defaultVertexArray = new VertexArray(gl, {handle: null});\n    }\n    return gl.luma.defaultVertexArray;\n  }\n\n  static getMaxAttributes(gl) {\n    return gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n  }\n\n  get MAX_ATTRIBUTES() {\n    return this.gl.getParameter(this.gl.MAX_VERTEX_ATTRIBS);\n  }\n\n  // Create a VertexArray\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    this.elements = null;\n    this.buffers = {}; // new Array(this.MAX_VERTEX_ATTRIBS).fill(null);\n    this.locations = {};\n    this.names = {};\n    this.drawParameters = {};\n\n    this._bound = false;\n    this._filledLocations = {};\n    Object.seal(this);\n\n    this.initialize(opts);\n  }\n\n  initialize({\n    buffers = {},\n    elements = null,\n    locations = {}\n  } = {}) {\n    this.setLocations(locations);\n    this.setBuffers(buffers, {clear: true});\n    this.setElements(elements);\n  }\n\n  get filledLocations() {\n    return this._filledLocations;\n  }\n\n  // Set a location in vertex attributes array to a buffer\n  setBuffer({\n    location,\n    buffer,\n    target,\n    layout\n  } = {}) {\n    const {gl} = this;\n\n    // Copy main data characteristics from buffer\n    target = target !== undefined ? target : buffer.target;\n    layout = layout !== undefined ? layout : buffer.layout;\n    assert(target, 'setBuffer needs target');\n    assert(layout, 'setBuffer called on uninitialized buffer');\n    this._filledLocations[location] = true;\n\n    this.bind(() => {\n      // a non-zero named buffer object must be bound to the GL_ARRAY_BUFFER target\n      buffer.bind({target: gl.ARRAY_BUFFER});\n\n      const {size, type, normalized, stride, offset} = layout;\n      // Attach _bound ARRAY_BUFFER with specified buffer format to location\n      if (!layout.integer) {\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n      } else {\n        // specifies *integer* data formats and locations of vertex attributes\n        assert(isWebGL2(gl));\n        gl.vertexAttribIPointer(location, size, type, stride, offset);\n      }\n    });\n\n  }\n\n  // Set (bind) an array or map of vertex array buffers, either in numbered or\n  // named locations. (named locations requires `locations` to have been provided).\n  // For names that are not present in `location`, the supplied buffers will be ignored.\n  // if a single buffer of type GL.ELEMENT_ARRAY_BUFFER is present, it will be set as elements\n  // @param {Object} buffers - An object map with attribute names being keys\n  //   and values are expected to be instances of Buffer.\n  setBuffers(buffers, {clear = true} = {}) {\n    if (clear) {\n      this.clearBindings();\n    }\n    const {locations, elements} = this._getLocations(buffers);\n\n    this.ext.bindVertexArray(this.handle);\n\n    // Process locations in order\n    for (const location in locations) {\n      const bufferData = locations[location];\n      if (bufferData) {\n        const {buffer, layout} = this._getBufferAndLayout(bufferData);\n        this.setBuffer({location, buffer, layout});\n        this.setDivisor(location, layout.instanced ? 1 : 0);\n        this.enable(location);\n      } else {\n        // DISABLE MISSING ATTRIBUTE\n        this.disable(location);\n      }\n    }\n    this.buffers = buffers;\n\n    this.ext.bindVertexArray(null);\n\n    if (elements) {\n      this.setElements(elements);\n    }\n  }\n\n  // Register an optional buffer name to location mapping\n  setLocations(locations) {\n    this.locations = locations;\n    this.names = {};\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering. Must be GL.ELEMENT_ARRAY_BUFFER\n  setElements(elements) {\n    assert(!elements || elements.target === GL_ELEMENT_ARRAY_BUFFER, ERR_ELEMENTS);\n\n    this.ext.bindVertexArray(this.handle);\n    this.gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER, elements && elements.handle);\n    this.ext.bindVertexArray(null);\n\n    this.elements = elements;\n    return this;\n  }\n\n  clearBindings({disableZero = false} = {}) {\n    this.bind(() => {\n      for (const location in this._filledLocations) {\n        if (this._filledLocations[location] && (location > 0 || disableZero)) {\n          this.gl.disableVertexAttribArray(location);\n        }\n      }\n      this._filledLocations = {};\n    });\n  }\n\n  // Enable an attribute\n  enable(location) {\n    this.bind(() => {\n      this.gl.enableVertexAttribArray(location);\n    });\n  }\n\n  // Disable an attribute\n  // Perf penalty when disabling attribute 0:\n  // https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-\n  // this-has-significant-performance-penalt\n  disable(location, disableZero = false) {\n    if (location > 0 || disableZero) {\n      this.bind(() => {\n        this.gl.disableVertexAttribArray(location);\n      });\n    }\n  }\n\n  // Set the frequency divisor used for instanced rendering.\n  setDivisor(location, divisor) {\n    this.bind(() => {\n      this.ext.vertexAttribDivisor(location, divisor);\n    });\n  }\n\n  // Specify values for generic vertex attributes\n  setGeneric({location, array}) {\n    this._filledLocations[location] = true;\n    switch (array.constructor) {\n    case Float32Array:\n      this._setGenericFloatArray(location, array);\n      break;\n    case Int32Array:\n      this._setGenericIntArray(location, array);\n      break;\n    case Uint32Array:\n      this._setGenericUintArray(location, array);\n      break;\n    default:\n      this.setGenericValues(location, ...array);\n    }\n  }\n\n  // Specify values for generic vertex attributes\n  setGenericValues(location, v0, v1, v2, v3) {\n    const {gl} = this;\n    switch (arguments.length - 1) {\n    case 1: gl.vertexAttrib1f(location, v0); break;\n    case 2: gl.vertexAttrib2f(location, v0, v1); break;\n    case 3: gl.vertexAttrib3f(location, v0, v1, v2); break;\n    case 4: gl.vertexAttrib4f(location, v0, v1, v2, v3); break;\n    default: assert(false);\n    }\n\n    // assert(gl instanceof WebGL2RenderingContext, 'WebGL2 required');\n    // Looks like these will check how many arguments were supplied?\n    // gl.vertexAttribI4i(location, v0, v1, v2, v3);\n    // gl.vertexAttribI4ui(location, v0, v1, v2, v3);\n  }\n\n  bind(funcOrHandle = this.handle) {\n    if (typeof funcOrHandle !== 'function') {\n      this.bindVertexArray(funcOrHandle);\n      return this;\n    }\n\n    let value;\n\n    if (!this._bound) {\n      this.ext.bindVertexArray(this.handle);\n      this._bound = true;\n\n      value = funcOrHandle();\n\n      this.ext.bindVertexArray(null);\n      this._bound = false;\n    } else {\n      value = funcOrHandle();\n    }\n\n    return value;\n  }\n\n  // PRIVATE\n\n  // Auto detect draw parameters from the complement of buffers provided\n  _deduceDrawParameters() {\n    // indexing is autodetected - buffer with target gl.ELEMENT_ARRAY_BUFFER\n    // index type is saved for drawElement calls\n    let isInstanced = false;\n    let isIndexed = false;\n    let indexType = null;\n\n    // Check if we have an elements array buffer\n    if (this.elements) {\n      isIndexed = true;\n      indexType = this.elements.layout.type;\n    }\n\n    // Check if any instanced buffers\n    this.buffers.forEach(buffer => {\n      if (buffer.layout.instanced > 0) {\n        isInstanced = true;\n      }\n    });\n\n    return {isInstanced, isIndexed, indexType};\n  }\n  //         this._filledLocations[bufferName] = true;\n\n  _getLocations(buffers) {\n    // Try to extract elements and locations\n    let elements = null;\n    const locations = {};\n\n    for (const bufferName in buffers) {\n      const buffer = buffers[bufferName];\n\n      // Check if this is an elements array\n      if (buffer && buffer.target === GL_ELEMENT_ARRAY_BUFFER) {\n        assert(!elements, 'Duplicate GL.ELEMENT_ARRAY_BUFFER');\n        // assert(location === undefined, 'GL.ELEMENT_ARRAY_BUFFER assigned to location');\n        elements = buffer;\n      }\n\n      let location = Number(bufferName);\n      // if key is a number, interpret as the location\n      // if key is not a location number, assume it is a named buffer, look it up in supplied map\n      if (!Number.isFinite(location)) {\n        location = this.locations[bufferName];\n      }\n      assert(Number.isFinite(location));\n\n      assert(!locations[location], `Duplicate attribute for binding point ${location}`);\n      locations[location] = buffer;\n    }\n\n    return {locations, elements};\n  }\n\n  _sortBuffersByLocation(buffers) {\n    // Try to extract elements and locations\n    let elements = null;\n    const locations = new Array(this._attributeCount).fill(null);\n\n    for (const bufferName in buffers) {\n      const buffer = buffers[bufferName];\n\n      // Check if this is an elements arrau\n      if (buffer.target === GL_ELEMENT_ARRAY_BUFFER) {\n        assert(!elements, 'Duplicate GL.ELEMENT_ARRAY_BUFFER');\n        // assert(location === undefined, 'GL.ELEMENT_ARRAY_BUFFER assigned to location');\n        elements = buffer;\n      } else if (!this._warn[bufferName]) {\n        log.warn(2, `${this._print(bufferName)} not used`)();\n        this._warn[bufferName] = true;\n      }\n\n      let location = Number(bufferName);\n      // if key is a number, interpret as the location\n      // if key is not a location number, assume it is a named buffer, look it up in supplied map\n      if (!Number.isFinite(location)) {\n        location = this.locations[bufferName];\n      }\n      locations[location] = bufferName;\n      assert(locations[location] === null, `Duplicate attribute for binding point ${location}`);\n      locations[location] = location;\n    }\n\n    return {locations, elements};\n  }\n\n  _getBufferAndLayout(bufferData) {\n    // Check if buffer was supplied\n    let buffer;\n    let layout;\n    if (bufferData.handle) {\n      buffer = bufferData;\n      layout = bufferData.layout;\n    } else {\n      buffer = bufferData.buffer;\n      layout = Object.assign({}, buffer.layout, bufferData.layout || {}, bufferData);\n    }\n    return {buffer, layout};\n  }\n\n  // TODO - this doesn't minimize well, choose one of the two API styles?\n  _setGenericFloatArray(location, array) {\n    const {gl} = this;\n    switch (array.length) {\n    case 1: gl.vertexAttrib1fv(location, array); break;\n    case 2: gl.vertexAttrib2fv(location, array); break;\n    case 3: gl.vertexAttrib3fv(location, array); break;\n    case 4: gl.vertexAttrib4fv(location, array); break;\n    default: assert(false);\n    }\n  }\n\n  _setGenericIntArray(location, array) {\n    const {gl} = this;\n    assert(isWebGL2(gl));\n    switch (array.length) {\n    case 1: gl.vertexAttribI1iv(location, array); break;\n    case 2: gl.vertexAttribI2iv(location, array); break;\n    case 3: gl.vertexAttribI3iv(location, array); break;\n    case 4: gl.vertexAttribI4iv(location, array); break;\n    default: assert(false);\n    }\n  }\n\n  _setGenericUintArray(location, array) {\n    const {gl} = this;\n    assert(isWebGL2(gl));\n    switch (array.length) {\n    case 1: gl.vertexAttribI1uiv(location, array); break;\n    case 2: gl.vertexAttribI2uiv(location, array); break;\n    case 3: gl.vertexAttribI3uiv(location, array); break;\n    case 4: gl.vertexAttribI4uiv(location, array); break;\n    default: assert(false);\n    }\n  }\n\n  // RESOURCE IMPLEMENTATION\n\n  _createHandle() {\n    return this.ext.createVertexArray();\n  }\n\n  _deleteHandle(handle) {\n    this.ext.deleteVertexArray(handle);\n    return [this.elements];\n    // return [this.elements, ...this.buffers];\n  }\n\n  // Generic getter for information about a vertex attribute at a given position\n  // @param {GLuint} location - index of the vertex attribute.\n  // @param {GLenum} pname - specifies the information to query.\n  // @returns {*} - requested vertex attribute information (specified by pname)\n  _getParameter(pname, {location}) {\n    assert(Number.isFinite(location));\n\n    this.ext.bindVertexArray(this.handle);\n\n    // Let the polyfill intercept the query\n    let result;\n    switch (pname) {\n    case GL_VERTEX_ATTRIB_ARRAY_POINTER:\n      result = this.gl.getVertexAttribOffset(location, pname);\n      break;\n    default:\n      result = this.ext.getVertexAttrib(location, pname);\n    }\n\n    this.ext.bindVertexArray(null);\n    return result;\n  }\n\n  _getData() {\n    return new Array(this.MAX_ATTRIBUTES).fill(0).map((_, location) => {\n      const result = {};\n      PARAMETERS.forEach(parameter => {\n        result[getKey(this.gl, parameter)] = this.getParameter(parameter, {location});\n      });\n      return result;\n    });\n  }\n\n  _bind(handle) {\n    this.ext.bindVertexArray(handle);\n  }\n}\n"],"file":"vertex-array.js"}