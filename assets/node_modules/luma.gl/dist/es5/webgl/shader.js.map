{"version":3,"sources":["../../../src/webgl/shader.js"],"names":["ERR_SOURCE","GL_FRAGMENT_SHADER","GL_VERTEX_SHADER","GL_COMPILE_STATUS","GL_SHADER_TYPE","Shader","shaderType","gl","source","id","getTypeName","opts","initialize","shaderName","_compile","pname","getShaderParameter","handle","getShaderSource","extension","getExtension","getTranslatedShaderSource","shaderSource","compileShader","compileStatus","getParameter","infoLog","getShaderInfoLog","errors","warnings","log","error","warn","Error","deleteShader","type","getSource","Resource","VertexShader","createShader","FragmentShader"],"mappings":"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","sourcesContent":["import Resource from './resource';\nimport {parseGLSLCompilerError, getShaderName} from '../webgl-utils';\nimport {assertWebGLContext} from '../webgl-utils';\nimport {uid, log} from '../utils';\nimport assert from '../utils/assert';\n\nconst ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\n\nconst GL_FRAGMENT_SHADER = 0x8B30;\nconst GL_VERTEX_SHADER = 0x8B31;\nconst GL_COMPILE_STATUS = 0x8B81;\nconst GL_SHADER_TYPE = 0x8B4F;\n\n// For now this is an internal class\nexport class Shader extends Resource {\n\n  static getTypeName(shaderType) {\n    switch (shaderType) {\n    case GL_VERTEX_SHADER: return 'vertex-shader';\n    case GL_FRAGMENT_SHADER: return 'fragment-shader';\n    default: assert(false); return 'unknown';\n    }\n  }\n\n  /* eslint-disable max-statements */\n  constructor(gl, source, shaderType) {\n    assertWebGLContext(gl);\n    assert(typeof source === 'string', ERR_SOURCE);\n\n    super(gl, {id: getShaderName(source) || uid(Shader.getTypeName(shaderType))});\n\n    this.shaderType = shaderType;\n    this.source = source;\n\n    this.opts.source = source;\n    this.initialize(this.opts);\n  }\n\n  initialize({source}) {\n    const shaderName = getShaderName(source);\n    if (shaderName) {\n      this.id = uid(shaderName);\n    }\n    this._compile(source);\n    this.opts.source = source;\n  }\n\n  // Accessors\n\n  getParameter(pname) {\n    return this.gl.getShaderParameter(this.handle, pname);\n  }\n\n  toString() {\n    return `${this.getTypeName(this.shaderType)}:${this.id}`;\n  }\n\n  getName() {\n    return getShaderName(this.opts.source) || 'unnamed-shader';\n  }\n\n  getSource() {\n    return this.gl.getShaderSource(this.handle);\n  }\n\n  // Debug method - Returns translated source if available\n  getTranslatedSource() {\n    const extension = this.gl.getExtension('WEBGL_debug_shaders');\n    return extension ?\n      extension.getTranslatedShaderSource(this.handle) :\n      'No translated source available. WEBGL_debug_shaders not implemented';\n  }\n\n  // PRIVATE METHODS\n  _compile() {\n    this.gl.shaderSource(this.handle, this.source);\n    this.gl.compileShader(this.handle);\n\n    // TODO - For performance reasons, avoid checking shader compilation errors on production?\n    // TODO - Load log even when no error reported, to catch warnings?\n    // https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings\n    const compileStatus = this.getParameter(GL_COMPILE_STATUS);\n    if (!compileStatus) {\n      const infoLog = this.gl.getShaderInfoLog(this.handle);\n      const {shaderName, errors, warnings} =\n        parseGLSLCompilerError(infoLog, this.source, this.shaderType);\n      log.error(`GLSL compilation errors in ${shaderName}\\n${errors}`)();\n      log.warn(`GLSL compilation warnings in ${shaderName}\\n${warnings}`)();\n      throw new Error(`GLSL compilation errors in ${shaderName}`);\n    }\n  }\n\n  _deleteHandle() {\n    this.gl.deleteShader(this.handle);\n  }\n\n  _getOptsFromHandle() {\n    return {\n      type: this.getParameter(GL_SHADER_TYPE),\n      source: this.getSource()\n    };\n  }\n}\n\nexport class VertexShader extends Shader {\n  constructor(gl, source) {\n    super(gl, source, GL_VERTEX_SHADER);\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL_VERTEX_SHADER);\n  }\n}\n\nexport class FragmentShader extends Shader {\n  constructor(gl, source) {\n    super(gl, source, GL_FRAGMENT_SHADER);\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL_FRAGMENT_SHADER);\n  }\n}\n"],"file":"shader.js"}