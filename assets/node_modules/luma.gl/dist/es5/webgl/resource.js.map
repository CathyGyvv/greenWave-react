{"version":3,"sources":["../../../src/webgl/resource.js"],"names":["ERR_RESOURCE_METHOD_UNDEFINED","Resource","gl","opts","id","userData","ext","constructor","name","_handle","handle","undefined","_createHandle","_addStats","deleteChildren","children","_deleteHandle","_removeStats","filter","Boolean","forEach","child","delete","bind","pname","parameters","PARAMETERS","parameter","isWebgl2","parameterAvailable","getExtension","extension","webgl1Default","webgl1","webgl2Default","webgl2","defaultValue","_getParameter","keys","values","parameterKeys","Object","key","getParameter","type","value","Error","_setParameter","setParameter","luma","stats","resourceCount","resourceMap","created","active"],"mappings":"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","sourcesContent":["import luma from '../init';\nimport {polyfillContext} from '../webgl-context';\nimport {assertWebGLContext, isWebGL2, getKey, getKeyValue} from '../webgl-utils';\nimport {uid} from '../utils';\nimport assert from '../utils/assert';\n\nconst ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';\n\n// TODO - Handle context loss\n// function glGetContextLossCount(gl) {\n//   return (gl.luma && gl.luma.glCount) || 0;\n// }\n\nexport default class Resource {\n  constructor(gl, opts = {}) {\n    assertWebGLContext(gl);\n\n    const {id, userData = {}} = opts;\n    this.gl = gl;\n    this.ext = polyfillContext(gl);\n    this.id = id || uid(this.constructor.name);\n    this.userData = userData;\n    this.opts = opts;\n\n    // Set the handle\n    // If handle was provided, use it, otherwise create a new handle\n\n    // TODO - Stores the handle with context loss information\n    // this.glCount = glGetContextLossCount(this.gl);\n\n    // Default VertexArray needs to be created with null handle, so compare against undefined\n    this._handle = opts.handle;\n    if (this._handle === undefined) {\n      this._handle = this._createHandle();\n    }\n\n    this._addStats();\n  }\n\n  toString() {\n    return `${this.constructor.name}(${this.id})`;\n  }\n\n  get handle() {\n    // TODO - Add context loss handling\n    // Will regenerate and reinitialize the handle if necessary\n    // const glCount = glGetContextLossCount(this.gl);\n    // if (this.glCount !== glCount) {\n    //   this._handle = this._createHandle(this.opts);\n    //   this._glCount = glCount;\n    //   // Reinitialize object\n    //   this.initialize(this.opts);\n    // }\n    return this._handle;\n  }\n\n  delete({deleteChildren = false} = {}) {\n    // Delete this object, and get refs to any children\n    const children = this._handle && this._deleteHandle(this._handle);\n    this._handle = null;\n    this._removeStats();\n\n    // Optionally, recursively delete the children\n    if (children && deleteChildren) {\n      children.filter(Boolean).forEach(child => {\n        child.delete();\n      });\n    }\n\n    return this;\n  }\n\n  unbind() {\n    this.bind(null);\n  }\n\n  /**\n   * Query a Resource parameter\n   *\n   * @param {GLenum} pname\n   * @return {GLint|GLfloat|GLenum} param\n   */\n  getParameter(pname, opts = {}) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    const parameters = this.constructor.PARAMETERS || {};\n\n    // Use parameter definitions to handle unsupported parameters\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if we can query for this parameter\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        const webgl1Default = parameter.webgl1;\n        const webgl2Default = 'webgl2' in parameter ? parameter.webgl2 : parameter.webgl1;\n        const defaultValue = isWebgl2 ? webgl2Default : webgl1Default;\n        return defaultValue;\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // Attempt to query for it and let WebGL report errors\n    return this._getParameter(pname, opts);\n  }\n\n  // Many resources support a getParameter call -\n  // getParameters will get all parameters - slow but useful for debugging\n  getParameters(opts = {}) {\n    const {parameters, keys} = {};\n\n    // Get parameter definitions for this Resource\n    const PARAMETERS = this.constructor.PARAMETERS || {};\n\n    const isWebgl2 = isWebGL2(this.gl);\n\n    const values = {};\n\n    // Query all parameters if no list provided\n    const parameterKeys = parameters || Object.keys(PARAMETERS);\n\n    // WEBGL limits\n    for (const pname of parameterKeys) {\n      const parameter = PARAMETERS[pname];\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        parameter &&\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (parameterAvailable) {\n        const key = keys ? getKey(this.gl, pname) : pname;\n        values[key] = this.getParameter(pname, opts);\n        if (keys && parameter.type === 'GLenum') {\n          values[key] = getKey(this.gl, values[key]);\n        }\n      }\n    }\n\n    return values;\n  }\n\n  /**\n   * Update a Resource setting\n   *\n   * @todo - cache parameter to avoid issuing WebGL calls?\n   *\n   * @param {GLenum} pname - parameter (GL constant, value or key)\n   * @param {GLint|GLfloat|GLenum} value\n   * @return {Resource} returns self to enable chaining\n   */\n  setParameter(pname, value) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    const parameters = this.constructor.PARAMETERS || {};\n\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        throw new Error('Parameter not available on this platform');\n      }\n\n      // Handle string keys\n      if (parameter.type === 'GLenum') {\n        value = getKeyValue(value);\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // attempt to set it and let WebGL report errors\n    this._setParameter(pname, value);\n    return this;\n  }\n\n  /*\n   * Batch update resource parameters\n   * Assumes the subclass supports a setParameter call\n   */\n  setParameters(parameters) {\n    for (const pname in parameters) {\n      this.setParameter(pname, parameters[pname]);\n    }\n    return this;\n  }\n\n  // PUBLIC VIRTUAL METHODS\n  initialize(opts) {\n  }\n\n  // PROTECTED METHODS - These must be overridden by subclass\n  _createHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _deleteHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getOptsFromHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getParameter(pname, opts) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  /**\n   * @param {GLenum} pname\n   * @param {GLint|GLfloat|GLenum} param\n   * @return {Sampler} returns self to enable chaining\n   */\n  _setParameter(pname, value) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  // PRIVATE METHODS\n\n  _context() {\n    this.gl.luma = this.gl.luma || {};\n    return this.gl.luma;\n  }\n\n  _addStats() {\n    const name = this.constructor.name;\n\n    const {stats} = luma;\n    stats.resourceCount = stats.resourceCount || 0;\n    stats.resourceMap = stats.resourceMap || {};\n\n    // Resource creation stats\n    stats.resourceCount++;\n    stats.resourceMap[name] = stats.resourceMap[name] || {created: 0, active: 0};\n    stats.resourceMap[name].created++;\n    stats.resourceMap[name].active++;\n  }\n\n  _removeStats() {\n    const name = this.constructor.name;\n    const {stats} = luma;\n\n    stats.resourceMap[name].active--;\n  }\n}\n"],"file":"resource.js"}