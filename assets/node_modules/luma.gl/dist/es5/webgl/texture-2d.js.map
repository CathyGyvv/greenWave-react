{"version":3,"sources":["../../../src/webgl/texture-2d.js"],"names":["Texture2D","gl","opts","Texture","isSupported","Object","assign","target","TEXTURE_2D","initialize","seal","textureUnit","undefined","Error","activeTexture","TEXTURE0","bindTexture","handle","getParameter","GL","ACTIVE_TEXTURE"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;IAEqBA,S;;;;;;;gCAEAC,E,EAAIC,I,EAAM;AAC3B,aAAOC,iBAAQC,WAAR,CAAoBH,EAApB,EAAwBC,IAAxB,CAAP;AACD;AAED;;;;;;;;;;;;;;;AAYA,qBAAYD,EAAZ,EAA2B;AAAA;;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AACzB,wCAAmBD,EAAnB;AAEA,kHAAMA,EAAN,EAAUI,OAAOC,MAAP,CAAc,EAAd,EAAkBJ,IAAlB,EAAwB;AAACK,cAAQN,GAAGO;AAAZ,KAAxB,CAAV;;AAEA,UAAKC,UAAL,CAAgBP,IAAhB;;AAEAG,WAAOK,IAAP;AAPyB;AAQ1B,G,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;2BAEqC;AAAA,UAAhCC,WAAgC,uEAAlB,KAAKA,WAAa;AAAA,UAC5BV,EAD4B,GACtB,IADsB,CAC5BA,EAD4B;;AAEnC,UAAIU,gBAAgBC,SAApB,EAA+B;AAC7B,cAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD;;AACD,WAAKF,WAAL,GAAmBA,WAAnB;AACAV,SAAGa,aAAH,CAAiBb,GAAGc,QAAH,GAAcJ,WAA/B;AACAV,SAAGe,WAAH,CAAe,KAAKT,MAApB,EAA4B,KAAKU,MAAjC;AACA,aAAON,WAAP;AACD;;;6BAEQ;AAAA,UACAV,EADA,GACM,IADN,CACAA,EADA;;AAEP,UAAI,KAAKU,WAAL,KAAqBC,SAAzB,EAAoC;AAClC,cAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD;;AACDZ,SAAGa,aAAH,CAAiBb,GAAGc,QAAH,GAAc,KAAKJ,WAApC;AACAV,SAAGe,WAAH,CAAe,KAAKT,MAApB,EAA4B,IAA5B;AACA,aAAO,KAAKI,WAAZ;AACD;;;oCAEe;AACd,aAAO,KAAKV,EAAL,CAAQiB,YAAR,CAAqBC,mBAAGC,cAAxB,IAA0CD,mBAAGJ,QAApD;AACD;;;;EA9DoCZ,gB","sourcesContent":["import GL from '../constants';\nimport Texture from './texture';\nimport {assertWebGLContext} from '../webgl-utils';\n\nexport default class Texture2D extends Texture {\n\n  static isSupported(gl, opts) {\n    return Texture.isSupported(gl, opts);\n  }\n\n  /**\n   * @classdesc\n   * 2D WebGL Texture\n   * Note: Constructor will initialize your texture.\n   *\n   * @class\n   * @param {WebGLRenderingContext} gl - gl context\n   * @param {Image|ArrayBuffer|null} opts= - named options\n   * @param {Image|ArrayBuffer|null} opts.data= - buffer\n   * @param {GLint} width - width of texture\n   * @param {GLint} height - height of texture\n   */\n  constructor(gl, opts = {}) {\n    assertWebGLContext(gl);\n\n    super(gl, Object.assign({}, opts, {target: gl.TEXTURE_2D}));\n\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n\n  bind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n    if (textureUnit === undefined) {\n      throw new Error('Texture.bind: must specify texture unit');\n    }\n    this.textureUnit = textureUnit;\n    gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n\n  unbind() {\n    const {gl} = this;\n    if (this.textureUnit === undefined) {\n      throw new Error('Texture.unbind: texture unit not specified');\n    }\n    gl.activeTexture(gl.TEXTURE0 + this.textureUnit);\n    gl.bindTexture(this.target, null);\n    return this.textureUnit;\n  }\n\n  getActiveUnit() {\n    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;\n  }\n}\n"],"file":"texture-2d.js"}