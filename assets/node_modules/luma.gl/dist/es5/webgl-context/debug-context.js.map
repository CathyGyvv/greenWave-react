{"version":3,"sources":["../../../src/webgl-context/debug-context.js"],"names":["getContextData","gl","luma","enableDebug","debug","log","makeDebugContext","getDebugContext","getRealContext","data","realContext","global","WebGLDebug","warn","debugContext","WebGLDebugContext","onGLError","onValidateGLFunc","Object","assign","prototype","info","getFunctionString","functionName","functionArgs","args","glFunctionArgsToString","slice","length","err","errorMessage","glEnumToString","message","throw","Error","error","functionString","priority","break","isBreakpoint","every","indexOf","breakOn","arg","undefined"],"mappings":"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","sourcesContent":["// Depends on Khronos Debug support module being imported via \"luma.gl/debug\"\n\nimport {global} from '../utils/globals';\nimport {log} from '../utils';\n\n// Helper to get shared context data\nfunction getContextData(gl) {\n  gl.luma = gl.luma || {};\n  return gl.luma;\n}\n\n// Enable or disable debug checks in debug contexts\n// Non-debug contexts do not have checks (to ensure performance)\n// Turning off debug for debug contexts removes most of the performance penalty\nexport function enableDebug(debug) {\n  log.debug = debug;\n}\n\n// Returns (a potentially new) context with debug instrumentation turned off or on.\n// Note that this actually returns a new context\nexport function makeDebugContext(gl, {debug = true} = {}) {\n  if (gl === null) { // Return to ensure we don't create a context in this case.\n    return null;\n  }\n\n  return debug ? getDebugContext(gl) : getRealContext(gl);\n}\n\n// Returns the real context from either of the real/debug contexts\nexport function getRealContext(gl) {\n  if (gl === null) { // Return to ensure we don't create a context in this case.\n    return null;\n  }\n\n  const data = getContextData(gl);\n  // If the context has a realContext member, it is a debug context so return the realContext\n  return data.realContext ? data.realContext : gl;\n}\n\n// Returns the debug context from either of the real/debug contexts\nexport function getDebugContext(gl) {\n  if (gl === null) { // Return to ensure we don't create a context in this case.\n    return null;\n  }\n\n  if (!global.WebGLDebug) {\n    log.warn('WebGL debug mode activation failed. import \"luma.gl/debug\" to enable.')();\n    return gl;\n  }\n\n  const data = getContextData(gl);\n  // If this *is* a debug context, return itself\n  if (data.realContext) {\n    return gl;\n  }\n\n  // If this already has a debug context, return it.\n  if (data.debugContext) {\n    return data.debugContext;\n  }\n\n  // Create a new debug context\n  class WebGLDebugContext {}\n  const debugContext = global.WebGLDebug.makeDebugContext(gl, onGLError, onValidateGLFunc);\n  Object.assign(WebGLDebugContext.prototype, debugContext);\n\n  // Store the debug context\n  data.debugContext = debugContext;\n  debugContext.debug = true;\n  debugContext.gl = gl;\n\n  log.info('debug context actived.');\n\n  // Return it\n  return debugContext;\n}\n\n// DEBUG TRACING\n\nfunction getFunctionString(functionName, functionArgs) {\n  let args = global.WebGLDebug.glFunctionArgsToString(functionName, functionArgs);\n  args = `${args.slice(0, 100)}${args.length > 100 ? '...' : ''}`;\n  return `gl.${functionName}(${args})`;\n}\n\nfunction onGLError(err, functionName, args) {\n  const errorMessage = global.WebGLDebug.glEnumToString(err);\n  const functionArgs = global.WebGLDebug.glFunctionArgsToString(functionName, args);\n  const message = `${errorMessage} in gl.${functionName}(${functionArgs})`;\n  if (log.throw) {\n    throw new Error(message);\n  } else {\n    log.error(message)();\n    debugger; // eslint-disable-line\n  }\n}\n\n// Don't generate function string until it is needed\nfunction onValidateGLFunc(functionName, functionArgs) {\n  let functionString;\n  if (log.priority >= 4) {\n    functionString = getFunctionString(functionName, functionArgs);\n    log.info(4, functionString)();\n  }\n\n  if (log.break) {\n    functionString = functionString || getFunctionString(functionName, functionArgs);\n    const isBreakpoint = log.break &&\n      log.break.every(breakOn => functionString.indexOf(breakOn) !== -1);\n    if (isBreakpoint) {\n      debugger; // eslint-disable-line\n    }\n  }\n\n  for (const arg of functionArgs) {\n    if (arg === undefined) {\n      functionString = functionString || getFunctionString(functionName, functionArgs);\n      if (log.throw) {\n        throw new Error(`Undefined argument: ${functionString}`);\n      } else {\n        log.error(`Undefined argument: ${functionString}`);\n        debugger; // eslint-disable-line\n      }\n    }\n  }\n}\n"],"file":"debug-context.js"}