{"version":3,"sources":["../../../src/webgl-context/create-browser-context.js"],"names":["createBrowserContext","canvas","opts","onError","onContextCreationError","error","statusMessage","addEventListener","webgl1","webgl2","gl","getContext","removeEventListener","trackContextCreation","onContextCreate","onContextCreated","HTMLCanvasElement","prototype","getContextSpy","type","context","bind","call","WebGLRenderingContext"],"mappings":";;;;;;;;AACA;;;;;;AACA;;AAEA;;;;AAIO,SAASA,oBAAT,OAIJ;AAAA,MAHDC,MAGC,QAHDA,MAGC;AAAA,uBAFDC,IAEC;AAAA,MAFDA,IAEC,0BAFM,EAEN;AAAA,0BADDC,OACC;AAAA,MADDA,OACC,6BADS;AAAA,WAAW,IAAX;AAAA,GACT;;AACD;AACA,WAASC,sBAAT,CAAgCC,KAAhC,EAAuC;AACrCF,qCAA0BE,MAAMC,aAAN,IAAuB,eAAjD;AACD;;AACDL,SAAOM,gBAAP,CAAwB,2BAAxB,EAAqDH,sBAArD,EAA6E,KAA7E;AALC,oBAOsCF,IAPtC,CAOMM,MAPN;AAAA,MAOMA,MAPN,4BAOe,IAPf;AAAA,qBAOsCN,IAPtC,CAOqBO,MAPrB;AAAA,MAOqBA,MAPrB,6BAO8B,IAP9B;AAQD,MAAIC,KAAK,IAAT,CARC,CASD;;AACA,MAAID,MAAJ,EAAY;AACVC,SAAKA,MAAMT,OAAOU,UAAP,CAAkB,QAAlB,EAA4BT,IAA5B,CAAX;AACAQ,SAAKA,MAAMT,OAAOU,UAAP,CAAkB,qBAAlB,EAAyCT,IAAzC,CAAX;AACD;;AACD,MAAIM,MAAJ,EAAY;AACVE,SAAKA,MAAMT,OAAOU,UAAP,CAAkB,OAAlB,EAA2BT,IAA3B,CAAX;AACAQ,SAAKA,MAAMT,OAAOU,UAAP,CAAkB,oBAAlB,EAAwCT,IAAxC,CAAX;AACD;;AAEDD,SAAOW,mBAAP,CAA2B,2BAA3B,EAAwDR,sBAAxD,EAAgF,KAAhF;;AAEA,MAAI,CAACM,EAAL,EAAS;AACP,WAAOP,mCAA4BM,UAAU,CAACD,MAAX,GAAoB,QAApB,GAA+B,OAA3D,cAAP;AACD;;AAED,SAAOE,EAAP;AACD;AAED;;;;;;AAIO,SAASG,oBAAT,QAGJ;AAAA,oCAFDC,eAEC;AAAA,MAFDA,eAEC,sCAFiB;AAAA,WAAM,IAAN;AAAA,GAEjB;AAAA,qCADDC,gBACC;AAAA,MADDA,gBACC,uCADkB,YAAM,CAAE,CAC1B;AACD,uBAAOD,mBAAmBC,gBAA1B;;AACA,MAAI,OAAOC,iBAAP,KAA6B,WAAjC,EAA8C;AAC5C,QAAML,aAAaK,kBAAkBC,SAAlB,CAA4BN,UAA/C;;AACAK,sBAAkBC,SAAlB,CAA4BN,UAA5B,GAAyC,SAASO,aAAT,CAAuBC,IAAvB,EAA6BjB,IAA7B,EAAmC;AAC1E;AACA,UAAIkB,OAAJ;;AACA,UAAID,SAAS,OAAb,EAAsB;AACpBC,kBAAUN,gBAAgB;AAACb,kBAAQ,IAAT;AAAekB,oBAAf;AAAqBjB,oBAArB;AAA2BS,sBAAYA,WAAWU,IAAX,CAAgB,IAAhB;AAAvC,SAAhB,CAAV;AACD,OALyE,CAM1E;;;AACAD,gBAAUA,WAAWT,WAAWW,IAAX,CAAgB,IAAhB,EAAsBH,IAAtB,EAA4BjB,IAA5B,CAArB,CAP0E,CAQ1E;;AACA,sBAAIkB,OAAJ,EAAuBG,qBAAvB,GAA8C;AAC5CR,yBAAiB;AAACd,kBAAQ,IAAT;AAAemB,0BAAf;AAAwBD,oBAAxB;AAA8BjB;AAA9B,SAAjB;AACD;;AACD,aAAOkB,OAAP;AACD,KAbD;AAcD;AACF","sourcesContent":["// Create a WebGL context\nimport assert from '../utils/assert';\n/* global HTMLCanvasElement, WebGLRenderingContext */\n\n/**\n * Create a WebGL context for a canvas\n * Note calling this multiple time on the same canvas does return the same context\n */\nexport function createBrowserContext({\n  canvas,\n  opts = {}, // WebGLRenderingContext options\n  onError = message => null\n}) {\n  // See if we can extract any extra information about why context creation failed\n  function onContextCreationError(error) {\n    onError(`WebGL context: ${error.statusMessage || 'Unknown error'}`);\n  }\n  canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);\n\n  const {webgl1 = true, webgl2 = true} = opts;\n  let gl = null;\n  // Prefer webgl2 over webgl1, prefer conformant over experimental\n  if (webgl2) {\n    gl = gl || canvas.getContext('webgl2', opts);\n    gl = gl || canvas.getContext('experimental-webgl2', opts);\n  }\n  if (webgl1) {\n    gl = gl || canvas.getContext('webgl', opts);\n    gl = gl || canvas.getContext('experimental-webgl', opts);\n  }\n\n  canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);\n\n  if (!gl) {\n    return onError(`Failed to create ${webgl2 && !webgl1 ? 'WebGL2' : 'WebGL'} context`);\n  }\n\n  return gl;\n}\n\n/**\n * Installs a spy on Canvas.getContext\n * calls the provided callback with the {context}\n */\nexport function trackContextCreation({\n  onContextCreate = () => null,\n  onContextCreated = () => {}\n}) {\n  assert(onContextCreate || onContextCreated);\n  if (typeof HTMLCanvasElement !== 'undefined') {\n    const getContext = HTMLCanvasElement.prototype.getContext;\n    HTMLCanvasElement.prototype.getContext = function getContextSpy(type, opts) {\n      // Let intercepter create context\n      let context;\n      if (type === 'webgl') {\n        context = onContextCreate({canvas: this, type, opts, getContext: getContext.bind(this)});\n      }\n      // If not, create context\n      context = context || getContext.call(this, type, opts);\n      // Report it created\n      if (context instanceof WebGLRenderingContext) {\n        onContextCreated({canvas: this, context, type, opts});\n      }\n      return context;\n    };\n  }\n}\n"],"file":"create-browser-context.js"}