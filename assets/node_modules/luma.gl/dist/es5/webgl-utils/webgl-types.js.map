{"version":3,"sources":["../../../src/webgl-utils/webgl-types.js"],"names":["headlessTypes","isBrowser","module","require","error","console","message","warn","WebGLRenderingContext","DummyType","global","WebGLProgram","WebGLShader","WebGLBuffer","WebGLFramebuffer","WebGLRenderbuffer","WebGLTexture","WebGLUniformLocation","WebGLActiveInfo","WebGLShaderPrecisionFormat","webGLTypesAvailable","getWebGL2RenderingContext","WebGL2RenderingContextNotSupported","WebGL2RenderingContext","getImage","ImageNotSupported","Image"],"mappings":";;;;;;;AAUA;;AACA;;;;;;;;AAEA;AACO,IAAIA,gBAAgB,IAApB;;;AAEP,IAAI,CAACC,kBAAL,EAAgB;AACd,MAAI;AACF,4CAAgBC,OAAOC,OAAP,CAAe,SAAf,CAAhB;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACdC,YAAQD,KAAR,WAAiBA,MAAME,OAAvB;AACD;;AACDD,UAAQE,IAAR,CAAaP,iBAAiBA,cAAcQ,qBAA5C;AACD;;IAEKC,S;;;;WAaFT,iBAAiBU,e;iCAVnBF,qB;IAAAA,qB,sCAAwBC,S;6BACxBE,Y;IAAAA,Y,kCAAeF,S;4BACfG,W;IAAAA,W,iCAAcH,S;4BACdI,W;IAAAA,W,iCAAcJ,S;iCACdK,gB;IAAAA,gB,sCAAmBL,S;iCACnBM,iB;IAAAA,iB,sCAAoBN,S;6BACpBO,Y;IAAAA,Y,kCAAeP,S;iCACfQ,oB;IAAAA,oB,sCAAuBR,S;gCACvBS,e;IAAAA,e,qCAAkBT,S;iCAClBU,0B;IAAAA,0B,sCAA6BV,S;;;;;;;;;;;;AAGxB,IAAMW,sBACXZ,0BAA0BC,SAA1B,IACAE,iBAAiBF,SADjB,IAEAG,gBAAgBH,SAFhB,IAGAI,gBAAgBJ,SAHhB,IAIAK,qBAAqBL,SAJrB,IAKAM,sBAAsBN,SALtB,IAMAO,iBAAiBP,SANjB,IAOAQ,yBAAyBR,SAPzB,IAQAS,oBAAoBT,SARpB,IASAU,+BAA+BV,SAV1B,C,CAYP;AACA;AACA;;;;AACA,SAASY,yBAAT,GAAqC;AAAA,MAC7BC,kCAD6B;AAAA;AAAA;;AAEnC,SAAOZ,gBAAOa,sBAAP,IAAiCD,kCAAxC;AACD,C,CAED;;;AACA,SAASE,QAAT,GAAoB;AAAA,MACZC,iBADY;AAAA;AAAA;;AAElB,SAAOf,gBAAOgB,KAAP,IAAgBD,iBAAvB;AACD;;AAED,IAAMF,yBAAyBF,2BAA/B;;AACA,IAAMK,QAAQF,UAAd,C,CAEA","sourcesContent":["// WEBGL BUILT-IN TYPES\n// 1) Exports all WebGL constants as {GL}\n// 2) Enables app to \"import\" WebGL types\n//    - Importing these types makes them known to eslint etc.\n//    - Provides dummy types for WebGL2 when not available to streamline\n//      library code.\n//    - Exports types from headless gl when running under Node.js\n\n/* eslint-disable quotes, no-console */\n/* global console */\nimport {global} from '../utils/globals';\nimport isBrowser from '../utils/is-browser';\n\n// Load headless gl dynamically, if available\nexport let headlessTypes = null;\n\nif (!isBrowser) {\n  try {\n    headlessTypes = module.require('gl/wrap');\n  } catch (error) {\n    console.error(`${error.message}`);\n  }\n  console.warn(headlessTypes && headlessTypes.WebGLRenderingContext);\n}\n\nclass DummyType {}\n\nconst {\n  WebGLRenderingContext = DummyType,\n  WebGLProgram = DummyType,\n  WebGLShader = DummyType,\n  WebGLBuffer = DummyType,\n  WebGLFramebuffer = DummyType,\n  WebGLRenderbuffer = DummyType,\n  WebGLTexture = DummyType,\n  WebGLUniformLocation = DummyType,\n  WebGLActiveInfo = DummyType,\n  WebGLShaderPrecisionFormat = DummyType\n} = headlessTypes || global;\n\nexport const webGLTypesAvailable =\n  WebGLRenderingContext !== DummyType &&\n  WebGLProgram !== DummyType &&\n  WebGLShader !== DummyType &&\n  WebGLBuffer !== DummyType &&\n  WebGLFramebuffer !== DummyType &&\n  WebGLRenderbuffer !== DummyType &&\n  WebGLTexture !== DummyType &&\n  WebGLUniformLocation !== DummyType &&\n  WebGLActiveInfo !== DummyType &&\n  WebGLShaderPrecisionFormat !== DummyType;\n\n// Ensures that WebGL2RenderingContext is defined in non-WebGL2 environments\n// so that apps can test their gl contexts with instanceof\n// E.g. if (gl instanceof WebGL2RenderingContext) { }\nfunction getWebGL2RenderingContext() {\n  class WebGL2RenderingContextNotSupported {}\n  return global.WebGL2RenderingContext || WebGL2RenderingContextNotSupported;\n}\n\n// Ensure that Image is defined under Node.js\nfunction getImage() {\n  class ImageNotSupported {}\n  return global.Image || ImageNotSupported;\n}\n\nconst WebGL2RenderingContext = getWebGL2RenderingContext();\nconst Image = getImage();\n\n// Export the standard WebGL types\nexport {\n  Image,\n\n  WebGLRenderingContext,\n  WebGLProgram,\n  WebGLShader,\n  WebGLBuffer,\n  WebGLFramebuffer,\n  WebGLRenderbuffer,\n  WebGLTexture,\n  WebGLUniformLocation,\n  WebGLActiveInfo,\n  WebGLShaderPrecisionFormat,\n\n  WebGL2RenderingContext\n};\n"],"file":"webgl-types.js"}