{"version":3,"sources":["../../../src/webgl-utils/format-utils.js"],"names":["GL_ALPHA","GL_RGB","GL_RGBA","GL_UNSIGNED_BYTE","GL_UNSIGNED_SHORT_4_4_4_4","GL_UNSIGNED_SHORT_5_5_5_1","GL_UNSIGNED_SHORT_5_6_5","GL_FLOAT","glFormatToComponents","format","glTypeToBytes","type"],"mappings":";;;;;;;;AAAA;;;;AAEA,IAAMA,WAAW,MAAjB;AACA,IAAMC,SAAS,MAAf;AACA,IAAMC,UAAU,MAAhB;AACA,IAAMC,mBAAmB,MAAzB;AACA,IAAMC,4BAA4B,MAAlC;AACA,IAAMC,4BAA4B,MAAlC;AACA,IAAMC,0BAA0B,MAAhC;AACA,IAAMC,WAAW,MAAjB,C,CAEA;;AACO,SAASC,oBAAT,CAA8BC,MAA9B,EAAsC;AAC3C,UAAQA,MAAR;AACA,SAAKT,QAAL;AAAe,aAAO,CAAP;;AACf,SAAKC,MAAL;AAAa,aAAO,CAAP;;AACb,SAAKC,OAAL;AAAc,aAAO,CAAP;AACd;;AACA;AAAS,2BAAO,KAAP;AAAe,aAAO,CAAP;AALxB;AAOD,C,CAED;;;AACO,SAASQ,aAAT,CAAuBC,IAAvB,EAA6B;AAClC,UAAQA,IAAR;AACA,SAAKR,gBAAL;AACE,aAAO,CAAP;;AACF,SAAKG,uBAAL;AACA,SAAKF,yBAAL;AACA,SAAKC,yBAAL;AACE,aAAO,CAAP;;AACF,SAAKE,QAAL;AACE,aAAO,CAAP;AACF;;AACA;AAAS,2BAAO,KAAP;AAAe,aAAO,CAAP;AAVxB;AAYD","sourcesContent":["import assert from '../utils/assert';\n\nconst GL_ALPHA = 0x1906;\nconst GL_RGB = 0x1907;\nconst GL_RGBA = 0x1908;\nconst GL_UNSIGNED_BYTE = 0x1401;\nconst GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;\nconst GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;\nconst GL_UNSIGNED_SHORT_5_6_5 = 0x8363;\nconst GL_FLOAT = 0x1406;\n\n// Returns number of components in a specific readPixels WebGL format\nexport function glFormatToComponents(format) {\n  switch (format) {\n  case GL_ALPHA: return 1;\n  case GL_RGB: return 3;\n  case GL_RGBA: return 4;\n  // TODO: Add support for additional WebGL2 formats\n  default: assert(false); return 0;\n  }\n}\n\n// Return byte count for given readPixels WebGL type\nexport function glTypeToBytes(type) {\n  switch (type) {\n  case GL_UNSIGNED_BYTE:\n    return 1;\n  case GL_UNSIGNED_SHORT_5_6_5:\n  case GL_UNSIGNED_SHORT_4_4_4_4:\n  case GL_UNSIGNED_SHORT_5_5_5_1:\n    return 2;\n  case GL_FLOAT:\n    return 4;\n  // TODO: Add support for additional WebGL2 types\n  default: assert(false); return 0;\n  }\n}\n"],"file":"format-utils.js"}