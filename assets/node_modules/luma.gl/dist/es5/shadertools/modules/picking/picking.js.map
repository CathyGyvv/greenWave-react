{"version":3,"sources":["../../../../../src/shadertools/modules/picking/picking.js"],"names":["DEFAULT_HIGHLIGHT_COLOR","Uint8Array","DEFAULT_MODULE_OPTIONS","pickingSelectedColor","pickingHighlightColor","pickingThreshold","pickingActive","getUniforms","opts","uniforms","undefined","picking_uSelectedColorValid","selectedColor","picking_uSelectedColor","picking_uHighlightColor","picking_uThreshold","picking_uActive","vs","fs","name"],"mappings":";;;;;;AAAA,IAAMA,0BAA0B,IAAIC,UAAJ,CAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,GAAT,EAAc,GAAd,CAAf,CAAhC;AAEA,IAAMC,yBAAyB;AAC7BC,wBAAsB,IADO;AACD;AAC5BC,yBAAuBJ,uBAFM;AAEmB;AAChDK,oBAAkB,GAHW;AAI7BC,iBAAe,KAJc,CAIR;;AAJQ,CAA/B;AAOA;;AACA,SAASC,WAAT,GAAoD;AAAA,MAA/BC,IAA+B,uEAAxBN,sBAAwB;AAClD,MAAMO,WAAW,EAAjB;;AACA,MAAID,KAAKL,oBAAL,KAA8BO,SAAlC,EAA6C;AAC3C,QAAIF,KAAKL,oBAAL,KAA8B,IAAlC,EAAwC;AACtCM,eAASE,2BAAT,GAAuC,CAAvC;AACD,KAFD,MAEO;AACL,UAAMC,gBAAgB,CACpBJ,KAAKL,oBAAL,CAA0B,CAA1B,CADoB,EAEpBK,KAAKL,oBAAL,CAA0B,CAA1B,CAFoB,EAGpBK,KAAKL,oBAAL,CAA0B,CAA1B,CAHoB,CAAtB;AAKAM,eAASE,2BAAT,GAAuC,CAAvC;AACAF,eAASI,sBAAT,GAAkCD,aAAlC;AACD;AACF;;AACD,MAAIJ,KAAKJ,qBAAL,KAA+BM,SAAnC,EAA8C;AAC5CD,aAASK,uBAAT,GAAmCN,KAAKJ,qBAAxC;AACD,GAjBiD,CAkBlD;;;AACA,MAAII,KAAKH,gBAAL,KAA0BK,SAA9B,EAAyC;AACvCD,aAASM,kBAAT,GAA8BP,KAAKH,gBAAnC;AACD;;AACD,MAAIG,KAAKF,aAAL,KAAuBI,SAA3B,EAAsC;AACpCD,aAASO,eAAT,GAA2BR,KAAKF,aAAL,GAAqB,CAArB,GAAyB,CAApD;AACD;;AACD,SAAOG,QAAP;AACD;;AAED,IAAMQ,84BAAN;AA2BA,IAAMC,omCAAN;eAuCe;AACbC,QAAM,SADO;AAEbF,QAFa;AAGbC,QAHa;AAIbX;AAJa,C","sourcesContent":["const DEFAULT_HIGHLIGHT_COLOR = new Uint8Array([0, 255, 255, 255]);\n\nconst DEFAULT_MODULE_OPTIONS = {\n  pickingSelectedColor: null, //  Set to a picking color to visually highlight that item\n  pickingHighlightColor: DEFAULT_HIGHLIGHT_COLOR, // Color of visual highlight of \"selected\" item\n  pickingThreshold: 1.0,\n  pickingActive: false // Set to true when rendering to off-screen \"picking\" buffer\n};\n\n/* eslint-disable camelcase */\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS) {\n  const uniforms = {};\n  if (opts.pickingSelectedColor !== undefined) {\n    if (opts.pickingSelectedColor === null) {\n      uniforms.picking_uSelectedColorValid = 0;\n    } else {\n      const selectedColor = [\n        opts.pickingSelectedColor[0],\n        opts.pickingSelectedColor[1],\n        opts.pickingSelectedColor[2]\n      ];\n      uniforms.picking_uSelectedColorValid = 1;\n      uniforms.picking_uSelectedColor = selectedColor;\n    }\n  }\n  if (opts.pickingHighlightColor !== undefined) {\n    uniforms.picking_uHighlightColor = opts.pickingHighlightColor;\n  }\n  // TODO - major hack - decide on normalization and remove\n  if (opts.pickingThreshold !== undefined) {\n    uniforms.picking_uThreshold = opts.pickingThreshold;\n  }\n  if (opts.pickingActive !== undefined) {\n    uniforms.picking_uActive = opts.pickingActive ? 1 : 0;\n  }\n  return uniforms;\n}\n\nconst vs = `\\\nuniform vec3 picking_uSelectedColor;\nuniform float picking_uThreshold;\nuniform bool picking_uSelectedColorValid;\n\nvarying vec4 picking_vRGBcolor_Aselected;\n\nconst float COLOR_SCALE = 1. / 255.;\n\nbool isVertexPicked(vec3 vertexColor) {\n  return\n    picking_uSelectedColorValid &&\n    abs(vertexColor.r - picking_uSelectedColor.r) < picking_uThreshold &&\n    abs(vertexColor.g - picking_uSelectedColor.g) < picking_uThreshold &&\n    abs(vertexColor.b - picking_uSelectedColor.b) < picking_uThreshold;\n}\n\nvoid picking_setPickingColor(vec3 pickingColor) {\n  // Do the comparison with selected item color in vertex shader as it should mean fewer compares\n  picking_vRGBcolor_Aselected.a =\n    float(isVertexPicked(pickingColor));\n\n  // Stores the picking color so that the fragment shader can render it during picking\n  picking_vRGBcolor_Aselected.rgb = pickingColor * COLOR_SCALE;\n}\n`;\n\nconst fs = `\\\nuniform bool picking_uActive; // true during rendering to offscreen picking buffer\nuniform vec3 picking_uSelectedColor;\nuniform vec4 picking_uHighlightColor;\n\nvarying vec4 picking_vRGBcolor_Aselected;\n\nconst float COLOR_SCALE = 1. / 255.;\n\n/*\n * Returns highlight color if this item is selected.\n */\nvec4 picking_filterHighlightColor(vec4 color) {\n  bool selected = bool(picking_vRGBcolor_Aselected.a);\n  return selected ? (picking_uHighlightColor * COLOR_SCALE) : color;\n}\n\n/*\n * Returns picking color if picking enabled else unmodified argument.\n */\nvec4 picking_filterPickingColor(vec4 color) {\n  vec3 pickingColor = picking_vRGBcolor_Aselected.rgb;\n  if (picking_uActive && length(pickingColor) < 0.001) {\n    discard;\n  }\n  return picking_uActive ? vec4(pickingColor, 1.0) : color;\n}\n\n/*\n * Returns picking color if picking is enabled if not\n * highlight color if this item is selected, otherwise unmodified argument.\n */\nvec4 picking_filterColor(vec4 color) {\n  vec4 highightColor = picking_filterHighlightColor(color);\n  return picking_filterPickingColor(highightColor);\n}\n\n`;\n\nexport default {\n  name: 'picking',\n  vs,\n  fs,\n  getUniforms\n};\n"],"file":"picking.js"}