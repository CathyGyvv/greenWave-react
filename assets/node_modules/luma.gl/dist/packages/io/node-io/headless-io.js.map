{"version":3,"sources":["../../../../packages/io/node-io/headless-io.js"],"names":["compressImage","image","type","data","width","height","replace","getPixelsAsync","getPixels","loadImage","url","luma","globals","modules","savePixels","ndarray","nodeIO","readFile","writeFile"],"mappings":";;;;;;;;AAGA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;AATA;AACA;AACA;;AASA;;;;;;;;;AASO,SAASA,aAAT,CAAuBC,KAAvB,EAA4C;AAAA,MAAdC,IAAc,uEAAP,KAAO;AACjD,SAAO,yBAAW,sBAChBD,MAAME,IADU,EAEhB,CAACF,MAAMG,KAAP,EAAcH,MAAMI,MAApB,EAA4B,CAA5B,CAFgB,EAGhB,CAAC,CAAD,EAAIJ,MAAMG,KAAN,GAAc,CAAlB,EAAqB,CAArB,CAHgB,EAIhB,CAJgB,CAAX,EAIDF,KAAKI,OAAL,CAAa,QAAb,EAAuB,EAAvB,CAJC,CAAP;AAKD;;AAED,IAAMC,iBAAiB,sBAAUC,kBAAV,CAAvB;;AAEO,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;AAC7B,SAAOH,eAAeG,GAAf,CAAP;AACD;;AAEDC,cAAKC,OAAL,CAAaC,OAAb,CAAqBL,SAArB,GAAiCA,kBAAjC;AACAG,cAAKC,OAAL,CAAaC,OAAb,CAAqBC,UAArB,GAAkCA,mBAAlC;AACAH,cAAKC,OAAL,CAAaC,OAAb,CAAqBE,OAArB,GAA+BA,gBAA/B;AAEAJ,cAAKC,OAAL,CAAaI,MAAb,GAAsB;AACpBC,wBADoB;AAEpBC,0BAFoB;AAGpBlB,8BAHoB;AAIpBS;AAJoB,CAAtB","sourcesContent":["// Use stackgl modules for DOM-less reading and writing of images\n// NOTE: These are not dependencies of luma.gl.\n// They need to be imported by the app.\nimport savePixels from 'save-pixels';\nimport getPixels from 'get-pixels';\nimport ndarray from 'ndarray';\nimport {readFile, writeFile} from 'fs';\n\nimport {promisify} from '../../utils';\nimport luma from '../../init';\n\n/**\n * Returns data bytes representing a compressed image in PNG or JPG format,\n * This data can be saved using file system (f) methods or\n * used in a request.\n * @param {Image} image to save\n * @param {String} type='png' - png, jpg or image/png, image/jpg are valid\n * @param {String} opt.dataURI= - Whether to include a data URI header\n * @return {*} bytes\n */\nexport function compressImage(image, type = 'png') {\n  return savePixels(ndarray(\n    image.data,\n    [image.width, image.height, 4],\n    [4, image.width * 4, 1],\n    0), type.replace('image/', ''));\n}\n\nconst getPixelsAsync = promisify(getPixels);\n\nexport function loadImage(url) {\n  return getPixelsAsync(url);\n}\n\nluma.globals.modules.getPixels = getPixels;\nluma.globals.modules.savePixels = savePixels;\nluma.globals.modules.ndarray = ndarray;\n\nluma.globals.nodeIO = {\n  readFile,\n  writeFile,\n  compressImage,\n  loadImage\n};\n"],"file":"headless-io.js"}