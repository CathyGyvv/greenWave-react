{"version":3,"sources":["../../../../src/core/experimental/transform.js"],"names":["GL","Buffer","TransformFeedback","Model","isWebGL2","assertWebGL2Context","assert","log","PASS_THROUGH_FS","Transform","gl","opts","model","_buffersSwapable","currentIndex","sourceBuffers","Array","destinationBuffers","transformFeedbacks","_buffersToDelete","initialize","Object","seal","buffer","delete","vs","sourceDestinationMap","varyings","drawMode","POINTS","elementCount","index","varyingMap","varying","_bindBuffers","_buildModel","warn","setVertexCount","bufferName","assign","bindBuffers","nextIndex","sourceBufferName","destinationBufferName","uniforms","setAttributes","draw","transformFeedback","parameters","RASTERIZER_DISCARD","varyingName","sourceBuffer","bytes","type","usage","layout","push","fs","vsLines","split","indexOf","vertexCount","buffers","getVertexCount"],"mappings":"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","sourcesContent":["import GL from '../../constants';\nimport Buffer from '../../webgl/buffer';\nimport TransformFeedback from '../../webgl/transform-feedback';\nimport Model from '../model';\nimport {isWebGL2, assertWebGL2Context} from '../../webgl-utils';\nimport assert from '../../utils/assert';\nimport {log} from '../../utils';\n\nconst PASS_THROUGH_FS = `\\\nvoid main()\n{\n}\n`;\n\nexport default class Transform {\n\n  static isSupported(gl) {\n    // For now WebGL2 only\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, opts = {}) {\n    assertWebGL2Context(gl);\n\n    this.gl = gl;\n    this.model = null;\n    this._buffersSwapable = false;\n    this.currentIndex = 0;\n    this.sourceBuffers = new Array(2);\n    this.destinationBuffers = new Array(2);\n    this.transformFeedbacks = new Array(2);\n    this._buffersToDelete = [];\n\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  // Delete owned resources.\n  delete() {\n    for (const buffer of this._buffersToDelete) {\n      buffer.delete();\n    }\n    this.model.delete();\n  }\n\n  get elementCount() {\n    return this.model.getVertexCount();\n  }\n\n  initialize({\n    sourceBuffers = null,\n    destinationBuffers = null,\n    vs = null,\n    sourceDestinationMap = null,\n    varyings = null,\n    drawMode = GL.POINTS,\n    elementCount = null\n  }) {\n    assert(sourceBuffers && vs && varyings && elementCount);\n\n    // If destinationBuffers are not provided, sourceDestinationMap must be provided\n    // to create destinaitonBuffers with layout of corresponding source buffer.\n    assert(destinationBuffers || sourceDestinationMap);\n\n    if (sourceDestinationMap) {\n      this.sourceDestinationMap = sourceDestinationMap;\n      this._buffersSwapable = true;\n    }\n\n    let index = 0;\n    this.varyings = [];\n    this.varyingMap = {};\n    for (const varying of varyings) {\n      this.varyings[index] = varying;\n      this.varyingMap[varying] = index;\n      index++;\n    }\n\n    this._bindBuffers({sourceBuffers, destinationBuffers});\n    this._buildModel({vs, drawMode, elementCount});\n  }\n\n  // Update some or all buffer bindings.\n  update({\n    sourceBuffers = null,\n    destinationBuffers = null,\n    elementCount = this.elementCount\n  }) {\n    if (!sourceBuffers && !destinationBuffers) {\n      log.warn('Transform : no buffers updated')();\n      return this;\n    }\n\n    this.model.setVertexCount(elementCount);\n\n    const {currentIndex, varyingMap, _buffersSwapable, transformFeedbacks} = this;\n    for (const bufferName in destinationBuffers) {\n      assert(destinationBuffers[bufferName] instanceof Buffer);\n    }\n    Object.assign(this.sourceBuffers[currentIndex], sourceBuffers);\n    Object.assign(this.destinationBuffers[currentIndex], destinationBuffers);\n    transformFeedbacks[currentIndex].bindBuffers(\n      this.destinationBuffers[currentIndex], {varyingMap}\n    );\n\n    if (_buffersSwapable) {\n      const nextIndex = (currentIndex + 1) % 2;\n\n      for (const sourceBufferName in this.sourceDestinationMap) {\n        const destinationBufferName = this.sourceDestinationMap[sourceBufferName];\n        this.sourceBuffers[nextIndex][sourceBufferName] =\n          this.destinationBuffers[currentIndex][destinationBufferName];\n        this.destinationBuffers[nextIndex][destinationBufferName] =\n          this.sourceBuffers[currentIndex][sourceBufferName];\n        // make sure the new destination buffer is a Buffer object\n        assert(this.destinationBuffers[nextIndex][destinationBufferName] instanceof Buffer);\n      }\n      transformFeedbacks[nextIndex].bindBuffers(\n        this.destinationBuffers[nextIndex], {varyingMap}\n      );\n    }\n    return this;\n  }\n\n  // Run one transformfeedback loop.\n  run({uniforms = {}} = {}) {\n    const {model, transformFeedbacks, sourceBuffers, currentIndex} = this;\n    model.setAttributes(sourceBuffers[currentIndex]);\n    model.draw({\n      transformFeedback: transformFeedbacks[currentIndex],\n      uniforms,\n      parameters: {\n        [GL.RASTERIZER_DISCARD]: true\n      }\n    });\n  }\n\n  // Swap source and destination buffers.\n  swapBuffers() {\n    assert(this._buffersSwapable);\n    this.currentIndex = (this.currentIndex + 1) % 2;\n  }\n\n  // Return Buffer object for given varying name.\n  getBuffer(varyingName = null) {\n    const {destinationBuffers, currentIndex} = this;\n    assert(varyingName && destinationBuffers[currentIndex][varyingName]);\n    return destinationBuffers[currentIndex][varyingName];\n  }\n\n  // Private\n  // build source and destination buffers\n  _bindBuffers({\n    sourceBuffers = null,\n    destinationBuffers = null\n  }) {\n    const {_buffersSwapable} = this;\n    for (const bufferName in destinationBuffers) {\n      assert(destinationBuffers[bufferName] instanceof Buffer);\n    }\n    this.sourceBuffers[0] = Object.assign({}, sourceBuffers);\n    this.destinationBuffers[0] = Object.assign({}, destinationBuffers);\n\n    if (_buffersSwapable) {\n      this.sourceBuffers[1] = {};\n      this.destinationBuffers[1] = {};\n\n      for (const sourceBufferName in this.sourceDestinationMap) {\n        const destinationBufferName = this.sourceDestinationMap[sourceBufferName];\n        if (!this.destinationBuffers[0][destinationBufferName]) {\n          // Create new buffer with same layout and settings as source buffer\n          const sourceBuffer = this.sourceBuffers[0][sourceBufferName];\n          const {bytes, type, usage, layout} = sourceBuffer;\n          this.destinationBuffers[0][destinationBufferName] =\n            new Buffer(this.gl, {bytes, type, usage, layout});\n          this._buffersToDelete.push(this.destinationBuffers[0][destinationBufferName]);\n        }\n\n        this.sourceBuffers[1][sourceBufferName] =\n          this.destinationBuffers[0][destinationBufferName];\n        this.destinationBuffers[1][destinationBufferName] =\n          this.sourceBuffers[0][sourceBufferName];\n        // make sure the new destination buffer is a Buffer object\n        assert(this.destinationBuffers[1][destinationBufferName] instanceof Buffer);\n      }\n    }\n  }\n\n  // build Model and TransformFeedback objects\n  _buildModel({\n    vs, drawMode, elementCount\n  }) {\n    const {varyings, varyingMap, _buffersSwapable} = this;\n\n    // Append matching version string to FS.\n    let fs = PASS_THROUGH_FS;\n    const vsLines = vs.split('\\n');\n    if (vsLines[0].indexOf('#version ') === 0) {\n      fs = `\\\n${vsLines[0]}\n${PASS_THROUGH_FS}\n`;\n    }\n\n    this.model = new Model(this.gl, {\n      vs,\n      fs,\n      varyings,\n      drawMode,\n      vertexCount: elementCount\n    });\n    this.transformFeedbacks[0] = new TransformFeedback(this.gl, {\n      buffers: this.destinationBuffers[0],\n      varyingMap\n    });\n    if (_buffersSwapable) {\n      this.transformFeedbacks[1] = new TransformFeedback(this.gl, {\n        buffers: this.destinationBuffers[1],\n        varyingMap: this.varyingMap\n      });\n    }\n  }\n}\n"],"file":"transform.js"}