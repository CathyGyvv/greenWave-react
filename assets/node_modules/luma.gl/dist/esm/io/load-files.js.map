{"version":3,"sources":["../../../src/io/load-files.js"],"names":["assert","loadFile","loadImage","Program","Texture2D","Model","Geometry","noop","loadTexture","gl","url","opts","urls","onProgress","loadImages","Object","assign","then","images","map","img","i","id","data","loadFiles","every","count","Promise","all","promise","progress","length","total","loadTextures","params","Array","isArray","parameters","undefined","loadProgram","vs","fs","vsText","fsText","loadModel","file","parseModel","program","json","parseJSON","attributes","modelOptions","key","value","Uint16Array","Float32Array","geometry","JSON","parse","error","Error"],"mappings":"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","sourcesContent":["/* eslint-disable guard-for-in, complexity, no-try-catch */\nimport assert from '../utils/assert';\nimport {loadFile, loadImage} from './browser-load';\nimport {Program, Texture2D} from '../webgl';\nimport {Model} from '../core';\nimport {Geometry} from '../geometry';\n\nfunction noop() {}\n\nexport function loadTexture(gl, url, opts = {}) {\n  const {urls, onProgress = noop} = opts;\n  assert(typeof url === 'string', 'loadTexture: url must be string');\n\n  return loadImages(Object.assign({urls, onProgress}, opts))\n  .then(images => images.map((img, i) => {\n    return new Texture2D(gl, Object.assign({id: urls[i]}, opts, {data: img}));\n  }));\n}\n\n/*\n * Loads (Requests) multiple files asynchronously\n */\nexport function loadFiles(opts = {}) {\n  const {urls, onProgress = noop} = opts;\n  assert(urls.every(url => typeof url === 'string'), 'loadImages: {urls} must be array of strings');\n  let count = 0;\n  return Promise.all(urls.map(\n    url => {\n      const promise = loadFile(Object.assign({url}, opts));\n      promise.then(file => onProgress({\n        progress: ++count / urls.length,\n        count,\n        total: urls.length,\n        url\n      }));\n      return promise;\n    }\n  ));\n}\n\n/*\n * Loads (requests) multiple images asynchronously\n */\nexport function loadImages(opts = {}) {\n  const {urls, onProgress = noop} = opts;\n  assert(urls.every(url => typeof url === 'string'), 'loadImages: {urls} must be array of strings');\n  let count = 0;\n  return Promise.all(urls.map(\n    url => {\n      const promise = loadImage(url, opts);\n      promise.then(file => onProgress({\n        progress: ++count / urls.length,\n        count,\n        total: urls.length,\n        url\n      }));\n      return promise;\n    }\n  ));\n}\n\nexport function loadTextures(gl, opts = {}) {\n  const {urls, onProgress = noop} = opts;\n  assert(urls.every(url => typeof url === 'string'),\n    'loadTextures: {urls} must be array of strings');\n\n  return loadImages(Object.assign({urls, onProgress}, opts))\n  .then(images => images.map((img, i) => {\n    let params = Array.isArray(opts.parameters) ? opts.parameters[i] : opts.parameters;\n    params = params === undefined ? {} : params;\n    return new Texture2D(gl, Object.assign({id: urls[i]}, params, {data: img}));\n  }));\n}\n\nexport function loadProgram(gl, opts = {}) {\n  const {vs, fs, onProgress = noop} = opts;\n  return loadFiles(Object.assign({urls: [vs, fs], onProgress}, opts))\n  .then(\n    ([vsText, fsText]) => new Program(gl, Object.assign({vs: vsText, fs: fsText}, opts))\n  );\n}\n\n// Loads a simple JSON format\nexport function loadModel(gl, opts = {}) {\n  const {url, onProgress = noop} = opts;\n  return loadFiles(Object.assign({urls: [url], onProgress}, opts))\n  .then(([file]) => parseModel(gl, Object.assign({file}, opts)));\n}\n\nexport function parseModel(gl, opts = {}) {\n  const {file, program = new Program(gl)} = opts;\n  const json = typeof file === 'string' ? parseJSON(file) : file;\n  // Remove any attributes so that we can create a geometry\n  // TODO - change format to put these in geometry sub object?\n  const attributes = {};\n  const modelOptions = {};\n  for (const key in json) {\n    const value = json[key];\n    if (Array.isArray(value)) {\n      attributes[key] = key === 'indices' ? new Uint16Array(value) : new Float32Array(value);\n    } else {\n      modelOptions[key] = value;\n    }\n  }\n\n  return new Model(gl, Object.assign(\n    {program, geometry: new Geometry({attributes})},\n    modelOptions,\n    opts\n  ));\n}\n\nfunction parseJSON(file) {\n  try {\n    return JSON.parse(file);\n  } catch (error) {\n    throw new Error(`Failed to parse JSON: ${error}`);\n  }\n}\n"],"file":"load-files.js"}