{"version":3,"sources":["../../../src/webgl/framebuffer.js"],"names":["GL","Resource","Texture2D","Renderbuffer","Buffer","clear","clearBuffer","withParameters","getFeatures","getTypedArrayFromGLType","getGLTypeFromTypedArray","glFormatToComponents","glTypeToBytes","isWebGL2","assertWebGL2Context","flipRows","scalePixels","log","assert","GL_FRAMEBUFFER","GL_DRAW_FRAMEBUFFER","GL_READ_FRAMEBUFFER","GL_COLOR_ATTACHMENT0","GL_DEPTH_ATTACHMENT","GL_STENCIL_ATTACHMENT","GL_RENDERBUFFER","GL_TEXTURE_3D","GL_TEXTURE_2D_ARRAY","GL_TEXTURE_2D","GL_TEXTURE_CUBE_MAP","GL_TEXTURE_CUBE_MAP_POSITIVE_X","GL_DEPTH_BUFFER_BIT","GL_STENCIL_BUFFER_BIT","GL_COLOR_BUFFER_BIT","ERR_MULTIPLE_RENDERTARGETS","Framebuffer","gl","getParameter","MAX_COLOR_ATTACHMENTS","MAX_DRAW_BUFFERS","colorBufferFloat","colorBufferHalfFloat","supported","getExtension","luma","defaultFramebuffer","handle","attachments","opts","width","height","readBuffer","drawBuffers","initialize","Object","seal","color","depth","stencil","check","attachment","target","object","Array","isArray","resize","_createDefaultAttachments","update","clearAttachments","checkStatus","attach","prevHandle","bindFramebuffer","_setReadBuffer","_setDrawBuffers","undefined","drawingBufferWidth","drawingBufferHeight","id","attachmentPoint","newAttachments","keys","forEach","key","assign","descriptor","_unattach","_attachRenderbuffer","renderbuffer","texture","layer","level","_attachTexture","filter","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","Error","_getFrameBufferStatus","value","drawBuffer","x","y","format","RGBA","type","pixelArray","COLOR_ATTACHMENT0","FRONT","UNSIGNED_BYTE","ArrayType","clamped","components","readPixels","buffer","byteOffset","byteCount","bytes","size","bind","PIXEL_PACK_BUFFER","framebuffer","unbind","maxHeight","Number","MAX_SAFE_INTEGER","data","canvas","document","createElement","context","getContext","imageData","createImageData","set","putImageData","toDataURL","image","dataUrl","readDataUrl","Image","src","xoffset","yoffset","zoffset","mipmapLevel","prevBuffer","isFinite","copyTexSubImage2D","copyTexSubImage3D","srcFramebuffer","srcX0","srcY0","srcX1","srcY1","dstX0","dstY0","dstX1","dstY1","mask","NEAREST","prevDrawHandle","prevReadHandle","blitFramebuffer","invalidateAll","invalidateFramebuffer","pname","_getAttachmentParameterFallback","bindTexture","getFramebufferAttachmentParameter","parameters","constructor","ATTACHMENT_PARAMETERS","values","getAttachmentParameter","window","open","copyToDataUrl","priority","message","defaultAttachments","pixels","mipmaps","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","DEPTH_COMPONENT16","bindRenderbuffer","framebufferRenderbuffer","framebufferTextureLayer","face","mapIndexToCubeMapFace","framebufferTexture2D","BACK","ext","drawBuffersWEBGL","length","caps","FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER","webgl2","FRAMEBUFFER_ATTACHMENT_RED_SIZE","FRAMEBUFFER_ATTACHMENT_GREEN_SIZE","FRAMEBUFFER_ATTACHMENT_BLUE_SIZE","FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE","FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE","FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE","FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE","UNSIGNED_INT","FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING","EXT_sRGB","LINEAR","createFramebuffer","deleteFramebuffer","STATUS"],"mappings":"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","sourcesContent":["import GL from '../constants';\n\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport Buffer from './buffer';\nimport {clear, clearBuffer} from './clear';\n\nimport {withParameters} from '../webgl-context';\nimport {getFeatures} from '../webgl-context/context-features';\n\nimport {getTypedArrayFromGLType, getGLTypeFromTypedArray} from '../webgl-utils/typed-array-utils';\nimport {glFormatToComponents, glTypeToBytes} from '../webgl-utils/format-utils';\nimport {isWebGL2, assertWebGL2Context} from '../webgl-utils';\nimport {flipRows, scalePixels} from '../webgl-utils';\n\nimport {log} from '../utils';\nimport assert from '../utils/assert';\n\n// Local constants - will collapse during minification\nconst GL_FRAMEBUFFER = 0x8D40;\nconst GL_DRAW_FRAMEBUFFER = 0x8CA8;\nconst GL_READ_FRAMEBUFFER = 0x8CA9;\n\nconst GL_COLOR_ATTACHMENT0 = 0x8CE0;\nconst GL_DEPTH_ATTACHMENT = 0x8D00;\nconst GL_STENCIL_ATTACHMENT = 0x8D20;\n// const GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;\n\nconst GL_RENDERBUFFER = 0x8D41;\n\nconst GL_TEXTURE_3D = 0x806F;\nconst GL_TEXTURE_2D_ARRAY = 0x8C1A;\nconst GL_TEXTURE_2D = 0x0DE1;\nconst GL_TEXTURE_CUBE_MAP = 0x8513;\n\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\n\nconst GL_DEPTH_BUFFER_BIT = 0x00000100;\nconst GL_STENCIL_BUFFER_BIT = 0x00000400;\nconst GL_COLOR_BUFFER_BIT = 0x00004000;\n\nconst ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nexport default class Framebuffer extends Resource {\n\n  static isSupported(gl, {\n    colorBufferFloat,    // Whether floating point textures can be rendered and read\n    colorBufferHalfFloat // Whether half float textures can be rendered and read\n  } = {}) {\n    let supported = true;\n    supported = colorBufferFloat &&\n      gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'WEBGL_color_buffer_float');\n    supported = colorBufferHalfFloat &&\n      gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'EXT_color_buffer_half_float');\n    return supported;\n  }\n\n  // Create a Framebuffer wrapper for the default framebuffer (target === null)\n  static getDefaultFramebuffer(gl) {\n    gl.luma = gl.luma || {};\n    if (!gl.luma.defaultFramebuffer) {\n      gl.luma.defaultFramebuffer = new Framebuffer(gl, {handle: null, attachments: {}});\n    }\n    // TODO - can we query for and get a handle to the GL.FRONT renderbuffer?\n    return gl.luma.defaultFramebuffer;\n  }\n\n  get MAX_COLOR_ATTACHMENTS() {\n    return this.gl.getParameter(this.gl.MAX_COLOR_ATTACHMENTS);\n  }\n\n  get MAX_DRAW_BUFFERS() {\n    return this.gl.getParameter(this.gl.MAX_DRAW_BUFFERS);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // Public members\n    this.width = null;\n    this.height = null;\n    this.attachments = {};\n    this.readBuffer = GL_COLOR_ATTACHMENT0;\n    this.drawBuffers = [GL_COLOR_ATTACHMENT0];\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  get color() {\n    return this.attachments[GL_COLOR_ATTACHMENT0] || null;\n  }\n\n  get texture() {\n    return this.attachments[GL_COLOR_ATTACHMENT0] || null;\n  }\n\n  get depth() {\n    return this.attachments[GL_DEPTH_ATTACHMENT] || null;\n  }\n\n  get stencil() {\n    return this.attachments[GL_STENCIL_ATTACHMENT] || null;\n  }\n\n  initialize({\n    width = 1,\n    height = 1,\n    attachments = null,\n    color = true,\n    depth = true,\n    stencil = false,\n    check = true,\n    readBuffer,\n    drawBuffers\n  }) {\n    assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n\n    // Store actual width and height for diffing\n    this.width = width;\n    this.height = height;\n\n    // Resize any provided attachments - note that resize only resizes if needed\n    // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)\n    if (attachments) {\n      for (const attachment in attachments) {\n        const target = attachments[attachment];\n        const object = Array.isArray(target) ? target[0] : target;\n        object.resize({width, height});\n      }\n    } else {\n      // Create any requested default attachments\n      attachments = this._createDefaultAttachments({color, depth, stencil, width, height});\n    }\n\n    this.update({clearAttachments: true, attachments, readBuffer, drawBuffers});\n\n    // Checks that framebuffer was properly set up, if not, throws an explanatory error\n    if (attachments && check) {\n      this.checkStatus();\n    }\n  }\n\n  update({\n    attachments = {},\n    readBuffer,\n    drawBuffers,\n    clearAttachments = false\n  }) {\n    this.attach(attachments, {clearAttachments});\n\n    const {gl} = this;\n    // Multiple render target support, set read buffer and draw buffers\n    const prevHandle = gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);\n    if (readBuffer) {\n      this._setReadBuffer(readBuffer);\n    }\n    if (drawBuffers) {\n      this._setDrawBuffers(drawBuffers);\n    }\n    gl.bindFramebuffer(GL_FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // Attachment resize is expected to be a noop if size is same\n  resize({width, height} = {}) {\n    // for default framebuffer, just update the stored size\n    if (this.handle === null) {\n      assert(width === undefined && height === undefined);\n      this.width = this.gl.drawingBufferWidth;\n      this.height = this.gl.drawingBufferHeight;\n      return this;\n    }\n\n    if (width === undefined) {\n      width = this.gl.drawingBufferWidth;\n    }\n    if (height === undefined) {\n      height = this.gl.drawingBufferHeight;\n    }\n\n    if (width !== this.width && height !== this.height) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${width}x${height}`);\n    }\n    for (const attachmentPoint in this.attachments) {\n      this.attachments[attachmentPoint].resize({width, height});\n    }\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  // Attach from a map of attachments\n  attach(attachments, {\n    clearAttachments = false\n  } = {}) {\n    const newAttachments = {};\n\n    // Any current attachments need to be removed, add null values to map\n    if (clearAttachments) {\n      Object.keys(this.attachments).forEach(key => {\n        newAttachments[key] = null;\n      });\n    }\n\n    // Overlay the new attachments\n    Object.assign(newAttachments, attachments);\n\n    const prevHandle = this.gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);\n\n    // Walk the attachments\n    for (const attachment in newAttachments) {\n      // Ensure key is not undefined\n      assert(attachment !== 'undefined', 'Misspelled framebuffer binding point?');\n\n      const descriptor = newAttachments[attachment];\n      let object = descriptor;\n      if (!object) {\n        this._unattach({attachment});\n      } else if (object instanceof Renderbuffer) {\n        this._attachRenderbuffer({attachment, renderbuffer: object});\n      } else if (Array.isArray(descriptor)) {\n        const [texture, layer = 0, level = 0] = descriptor;\n        object = texture;\n        this._attachTexture({attachment, texture, layer, level});\n      } else {\n        this._attachTexture({attachment, texture: object, layer: 0, level: 0});\n      }\n\n      // Resize objects\n      if (object) {\n        object.resize({width: this.width, height: this.height});\n      }\n    }\n\n    this.gl.bindFramebuffer(GL_FRAMEBUFFER, prevHandle || null);\n\n    // Assign to attachments and remove any nulls to get a clean attachment map\n    Object.assign(this.attachments, attachments);\n    Object.keys(this.attachments).filter(key => !this.attachments[key]).forEach(key => {\n      delete this.attachments[key];\n    });\n  }\n\n  checkStatus() {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);\n    const status = gl.checkFramebufferStatus(GL_FRAMEBUFFER);\n    gl.bindFramebuffer(GL_FRAMEBUFFER, prevHandle || null);\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      throw new Error(_getFrameBufferStatus(status));\n    }\n    return this;\n  }\n\n  clear({\n    color,\n    depth,\n    stencil,\n    drawBuffers = []\n  } = {}) {\n    // Bind framebuffer and delegate to global clear functions\n    const prevHandle = this.gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);\n\n    if (color || depth || stencil) {\n      clear(this.gl, {color, depth, stencil});\n    }\n\n    drawBuffers.forEach((value, drawBuffer) => {\n      clearBuffer({drawBuffer, value});\n    });\n\n    this.gl.bindFramebuffer(GL_FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // NOTE: Slow requires roundtrip to GPU\n  // App can provide pixelArray or have it auto allocated by this method\n  // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n  //  newly allocated by this method unless provided by app.\n  readPixels({\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    format = GL.RGBA,\n    type, // Auto deduced from pixelArray or gl.UNSIGNED_BYTE\n    pixelArray = null,\n    attachment = GL_COLOR_ATTACHMENT0 // TODO - support gl.readBuffer\n  }) {\n    const {gl} = this;\n\n    // TODO - Set and unset gl.readBuffer\n    if (attachment === GL.COLOR_ATTACHMENT0 && this.handle === null) {\n      attachment = GL.FRONT;\n    }\n\n    // Deduce type and allocated pixelArray if needed\n    if (!pixelArray) {\n      // Allocate pixel array if not already available, using supplied type\n      type = type || gl.UNSIGNED_BYTE;\n      const ArrayType = getTypedArrayFromGLType(type, {clamped: false});\n      const components = glFormatToComponents(format);\n      // TODO - check for composite type (components = 1).\n      pixelArray = pixelArray || new ArrayType(width * height * components);\n    }\n\n    // Pixel array available, if necessary, deduce type from it.\n    type = type || getGLTypeFromTypedArray(pixelArray);\n\n    const prevHandle = this.gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);\n    this.gl.readPixels(x, y, width, height, format, type, pixelArray);\n    this.gl.bindFramebuffer(GL_FRAMEBUFFER, prevHandle || null);\n\n    return pixelArray;\n  }\n\n  // Reads data into provided buffer object asynchronously\n  // This function doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n  readPixelsToBuffer({\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    format = GL.RGBA,\n    type, // When not provided, auto deduced from buffer or GL.UNSIGNED_BYTE\n    buffer = null, // A new Buffer object is created when not provided.\n    byteOffset = 0 // byte offset in buffer object\n  }) {\n    const {gl} = this;\n\n    // Asynchronus read (PIXEL_PACK_BUFFER) is WebGL2 only feature\n    assertWebGL2Context(gl);\n\n    // deduce type if not available.\n    type = type || (buffer ? buffer.type : GL.UNSIGNED_BYTE);\n\n    if (!buffer) {\n      // Create new buffer with enough size\n      const components = glFormatToComponents(format);\n      const byteCount = glTypeToBytes(type);\n      const bytes = byteOffset + (width * height * components * byteCount);\n      buffer = new Buffer(gl, {\n        bytes,\n        type,\n        size: components\n      });\n    }\n\n    buffer.bind({target: GL.PIXEL_PACK_BUFFER});\n    withParameters(gl, {framebuffer: this}, () => {\n      gl.readPixels(x, y, width, height, format, type, byteOffset);\n    });\n    buffer.unbind({target: GL.PIXEL_PACK_BUFFER});\n\n    return buffer;\n  }\n\n  // Reads pixels as a dataUrl\n  copyToDataUrl({\n    attachment = GL_COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    maxHeight = Number.MAX_SAFE_INTEGER\n  } = {}) {\n    let data = this.readPixels({attachment});\n\n    // Scale down\n    let {width, height} = this;\n    while (height > maxHeight) {\n      ({data, width, height} = scalePixels({data, width, height}));\n    }\n\n    // Flip to top down coordinate system\n    flipRows({data, width, height});\n\n    /* global document */\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const context = canvas.getContext('2d');\n\n    // Copy the pixels to a 2D canvas\n    const imageData = context.createImageData(width, height);\n    imageData.data.set(data);\n    context.putImageData(imageData, 0, 0);\n\n    return canvas.toDataURL();\n  }\n\n  // Reads pixels into an HTML Image\n  copyToImage({\n    image = null,\n    attachment = GL_COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    maxHeight = Number.MAX_SAFE_INTEGER\n  } = {}) {\n    /* global Image */\n    const dataUrl = this.readDataUrl({attachment});\n    image = image || new Image();\n    image.src = dataUrl;\n    return image;\n  }\n\n  // copyToFramebuffer({width, height}) {\n  //   const scaleX = width / this.width;\n  //   const scaleY = height / this.height;\n  //   const scale = Math.min(scaleX, scaleY);\n  //   width = width * scale;\n  //   height = height * scale;\n  //   const scaledFramebuffer = new Framebuffer(this.gl, {width, height});\n  //   this.blit();\n  // }\n\n  // Copy a rectangle from a framebuffer attachment into a texture (at an offset)\n  copyToTexture({\n    // Target\n    texture,\n    target, // for cubemaps\n    xoffset = 0,\n    yoffset = 0,\n    zoffset = 0,\n    mipmapLevel = 0,\n\n    // Source\n    attachment = GL_COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    x = 0,\n    y = 0,\n    width, // defaults to texture width\n    height // defaults to texture height\n  }) {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);\n    const prevBuffer = gl.readBuffer(attachment);\n\n    width = Number.isFinite(width) ? width : texture.width;\n    height = Number.isFinite(height) ? height : texture.height;\n\n    // target\n    switch (texture.target) {\n    case GL_TEXTURE_2D:\n    case GL_TEXTURE_CUBE_MAP:\n      gl.copyTexSubImage2D(\n        target || texture.target,\n        mipmapLevel,\n        xoffset,\n        yoffset,\n        x,\n        y,\n        width,\n        height\n      );\n      break;\n    case GL_TEXTURE_2D_ARRAY:\n    case GL_TEXTURE_3D:\n      gl.copyTexSubImage3D(\n        target || texture.target,\n        mipmapLevel,\n        xoffset,\n        yoffset,\n        zoffset,\n        x,\n        y,\n        width,\n        height\n      );\n      break;\n    default:\n    }\n\n    gl.readBuffer(prevBuffer);\n    gl.bindFramebuffer(GL_FRAMEBUFFER, prevHandle || null);\n    return texture;\n  }\n\n  // WEBGL2 INTERFACE\n\n  // Copies a rectangle of pixels between framebuffers\n  blit({\n    srcFramebuffer,\n    attachment = GL_COLOR_ATTACHMENT0,\n    srcX0 = 0, srcY0 = 0, srcX1, srcY1,\n    dstX0 = 0, dstY0 = 0, dstX1, dstY1,\n    color = true,\n    depth = false,\n    stencil = false,\n    mask = 0,\n    filter = GL.NEAREST\n  }) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n\n    if (!srcFramebuffer.handle && attachment === GL_COLOR_ATTACHMENT0) {\n      attachment = GL.FRONT;\n    }\n\n    if (color) {\n      mask |= GL_COLOR_BUFFER_BIT;\n    }\n    if (depth) {\n      mask |= GL_DEPTH_BUFFER_BIT;\n    }\n    if (stencil) {\n      mask |= GL_STENCIL_BUFFER_BIT;\n    }\n    assert(mask);\n\n    srcX1 = srcX1 === undefined ? srcFramebuffer.width : srcX1;\n    srcY1 = srcY1 === undefined ? srcFramebuffer.height : srcY1;\n    dstX1 = dstX1 === undefined ? this.width : dstX1;\n    dstY1 = dstY1 === undefined ? this.height : dstY1;\n\n    const prevDrawHandle = gl.bindFramebuffer(GL_DRAW_FRAMEBUFFER, this.handle);\n    const prevReadHandle = gl.bindFramebuffer(GL_READ_FRAMEBUFFER, srcFramebuffer.handle);\n    gl.readBuffer(attachment);\n    gl.blitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);\n    gl.readBuffer(this.readBuffer);\n    gl.bindFramebuffer(GL_READ_FRAMEBUFFER, prevReadHandle || null);\n    gl.bindFramebuffer(GL_DRAW_FRAMEBUFFER, prevDrawHandle || null);\n\n    return this;\n  }\n\n  // signals to the GL that it need not preserve all pixels of a specified region\n  // of the framebuffer\n  invalidate({\n    attachments = [],\n    x = 0,\n    y = 0,\n    width,\n    height\n  }) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n    const prevHandle = gl.bindFramebuffer(GL_READ_FRAMEBUFFER, this.handle);\n    const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n    if (invalidateAll) {\n      gl.invalidateFramebuffer(GL_READ_FRAMEBUFFER, attachments);\n    } else {\n      gl.invalidateFramebuffer(GL_READ_FRAMEBUFFER, attachments, x, y, width, height);\n    }\n    gl.bindFramebuffer(GL_READ_FRAMEBUFFER, prevHandle);\n    return this;\n  }\n\n  // Return the value for `pname` of the specified attachment.\n  // The type returned is the type of the requested pname\n  getAttachmentParameter({\n    attachment = GL_COLOR_ATTACHMENT0,\n    pname\n  } = {}) {\n    let value = this._getAttachmentParameterFallback(pname);\n    if (value === null) {\n      this.gl.bindTexture(GL_FRAMEBUFFER, this.handle);\n      value = this.gl.getFramebufferAttachmentParameter(GL_FRAMEBUFFER, attachment, pname);\n      this.gl.bindTexture(GL_FRAMEBUFFER, null);\n    }\n    return value;\n  }\n\n  getAttachmentParameters(\n    attachment = GL_COLOR_ATTACHMENT0,\n    parameters = this.constructor.ATTACHMENT_PARAMETERS || {}\n  ) {\n    const values = {};\n    for (const pname in parameters) {\n      values[pname] = this.getAttachmentParameter(pname);\n    }\n    return this;\n  }\n\n  // DEBUG\n\n  // Note: Will only work when called in an event handler\n  show() {\n    /* global window */\n    if (typeof window !== 'undefined') {\n      window.open(this.copyToDataUrl(), 'luma-debug-texture');\n    }\n    return this;\n  }\n\n  log({priority = 0, message = ''} = {}) {\n    if (priority > log.priority || typeof window === 'undefined') {\n      return this;\n    }\n    message = message || `Framebuffer ${this.id}`;\n    const image = this.copyToDataUrl({maxHeight: 100});\n    log.image({priority, message, image}, message)();\n    return this;\n  }\n\n  // WEBGL INTERFACE\n  bind({target = GL_FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, this.handle);\n    return this;\n  }\n\n  unbind({target = GL_FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _createDefaultAttachments({color, depth, stencil, width, height}) {\n    let defaultAttachments = null;\n\n    // Add a color buffer if requested and not supplied\n    if (color) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL_COLOR_ATTACHMENT0] = new Texture2D(this.gl, {\n        pixels: null, // reserves texture memory, but texels are undefined\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE,\n        width,\n        height,\n        // Note: Mipmapping can be disabled by texture resource when we resize the texture\n        // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant\n        // behavior we always disable mipmaps.\n        mipmaps: false,\n        // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.\n        // Set WRAP modes that support NPOT textures too.\n        parameters: {\n          [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n          [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n        }\n      });\n    }\n\n    // Add a depth buffer if requested and not supplied\n    if (depth) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL_DEPTH_ATTACHMENT] =\n        new Renderbuffer(this.gl, {format: GL.DEPTH_COMPONENT16, width, height});\n    }\n\n    // TODO - handle stencil and combined depth and stencil\n\n    return defaultAttachments;\n  }\n\n  _unattach({attachment}) {\n    this.gl.bindRenderbuffer(GL_RENDERBUFFER, this.handle);\n    this.gl.framebufferRenderbuffer(GL_FRAMEBUFFER, attachment, GL_RENDERBUFFER, null);\n    delete this.attachments[attachment];\n  }\n\n  _attachRenderbuffer({attachment = GL_COLOR_ATTACHMENT0, renderbuffer}) {\n    const {gl} = this;\n    // TODO - is the bind needed?\n    // gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.handle);\n    gl.framebufferRenderbuffer(GL_FRAMEBUFFER, attachment, GL_RENDERBUFFER, renderbuffer.handle);\n    // TODO - is the unbind needed?\n    // gl.bindRenderbuffer(GL_RENDERBUFFER, null);\n\n    this.attachments[attachment] = renderbuffer;\n  }\n\n  // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`\n  // level = 0 - mipmapLevel (must be 0 in WebGL1)\n  _attachTexture({attachment = GL_COLOR_ATTACHMENT0, texture, layer, level}) {\n    const {gl} = this;\n    gl.bindTexture(texture.target, texture.handle);\n\n    switch (texture.target) {\n    case GL_TEXTURE_2D_ARRAY:\n    case GL_TEXTURE_3D:\n      gl.framebufferTextureLayer(GL_FRAMEBUFFER, attachment, texture.target, level, layer);\n      break;\n\n    case GL_TEXTURE_CUBE_MAP:\n      // layer must be a cubemap face (or if index, converted to cube map face)\n      const face = mapIndexToCubeMapFace(layer);\n      gl.framebufferTexture2D(GL_FRAMEBUFFER, attachment, face, texture.handle, level);\n      break;\n\n    case GL_TEXTURE_2D:\n      gl.framebufferTexture2D(GL_FRAMEBUFFER, attachment, GL_TEXTURE_2D, texture.handle, level);\n      break;\n\n    default:\n      assert(false, 'Illegal texture type');\n    }\n\n    gl.bindTexture(texture.target, null);\n    this.attachments[attachment] = texture;\n  }\n\n  // Expects framebuffer to be bound\n  _setReadBuffer(gl, readBuffer) {\n    if (isWebGL2(gl)) {\n      gl.readBuffer(readBuffer);\n    } else {\n      // Setting to color attachment 0 is a noop, so allow it in WebGL1\n      assert(readBuffer === GL_COLOR_ATTACHMENT0 || readBuffer === GL.BACK,\n        ERR_MULTIPLE_RENDERTARGETS);\n    }\n    this.readBuffer = readBuffer;\n  }\n\n  // Expects framebuffer to be bound\n  _setDrawBuffers(gl, drawBuffers) {\n    if (isWebGL2(gl)) {\n      gl.drawBuffers(drawBuffers);\n    } else {\n      const ext = gl.getExtension('WEBGL_draw_buffers');\n      if (ext) {\n        ext.drawBuffersWEBGL(drawBuffers);\n      } else {\n        // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1\n        assert(drawBuffers.length === 1 &&\n          (drawBuffers[0] === GL_COLOR_ATTACHMENT0 || drawBuffers[0] === GL.BACK),\n          ERR_MULTIPLE_RENDERTARGETS);\n      }\n    }\n    this.drawBuffers = drawBuffers;\n  }\n\n  // Attempt to provide workable defaults for WebGL2 symbols under WebGL1\n  // null means OK to query\n  /* eslint-disable complexity */\n  _getAttachmentParameterFallback(pname) {\n    const caps = getFeatures(this.gl);\n\n    switch (pname) {\n    case GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: // GLint\n      return !caps.webgl2 ? 0 : null;\n    case GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: // GLint\n      return !caps.webgl2 ? 8 : null;\n    case GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: // GLenum\n      return !caps.webgl2 ? GL.UNSIGNED_INT : null;\n    case GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:\n      return !caps.webgl2 && !caps.EXT_sRGB ? GL.LINEAR : null;\n    default:\n      return null;\n    }\n  }\n  /* eslint-enable complexity */\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteFramebuffer(this.handle);\n  }\n}\n\n// PUBLIC METHODS\n\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer) {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < GL_TEXTURE_CUBE_MAP_POSITIVE_X ?\n    layer + GL_TEXTURE_CUBE_MAP_POSITIVE_X :\n    layer;\n}\n\n// Helper METHODS\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status) {\n  // Use error mapping if installed\n  const STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || `Framebuffer error ${status}`;\n}\n"],"file":"framebuffer.js"}