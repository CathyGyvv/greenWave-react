{"version":3,"sources":["../../../src/webgl/transform-feedback.js"],"names":["Resource","isWebGL2","assertWebGL2Context","assert","GL_TRANSFORM_FEEDBACK_BUFFER","GL_TRANSFORM_FEEDBACK","TranformFeedback","gl","handle","isTransformFeedback","opts","buffers","Object","seal","initialize","varyingMap","bindBuffers","clear","_unbindBuffers","bufferName","buffer","index","Number","isFinite","primitiveMode","_bindBuffers","bindTransformFeedback","beginTransformFeedback","pauseTransformFeedback","resumeTransformFeedback","endTransformFeedback","offset","size","unbind","undefined","bindBufferBase","bindBufferRange","bufferIndex","bindBuffer","unbindBuffer","createTransformFeedback","deleteTransformFeedback"],"mappings":"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","sourcesContent":["import Resource from './resource';\nimport {isWebGL2, assertWebGL2Context} from '../webgl-utils';\nimport assert from '../utils/assert';\n\nconst GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;\nconst GL_TRANSFORM_FEEDBACK = 0x8E22;\n\nexport default class TranformFeedback extends Resource {\n\n  static isSupported(gl) {\n    return isWebGL2(gl);\n  }\n\n  static isHandle(handle) {\n    return this.gl.isTransformFeedback(this.handle);\n  }\n\n  /**\n   * @class\n   * @param {WebGL2RenderingContext} gl - context\n   * @param {Object} opts - options\n   */\n  constructor(gl, opts = {}) {\n    assertWebGL2Context(gl);\n    super(gl, opts);\n    this.buffers = {};\n    Object.seal(this);\n\n    this.initialize(opts);\n  }\n\n  initialize({buffers = {}, varyingMap = {}}) {\n    this.bindBuffers(buffers, {clear: true, varyingMap});\n  }\n\n  bindBuffers(buffers = {}, {clear = false, varyingMap = {}} = {}) {\n    if (clear) {\n      this._unbindBuffers();\n      this.buffers = {};\n    }\n    for (const bufferName in buffers) {\n      const buffer = buffers[bufferName];\n      const index = Number.isFinite(Number(bufferName)) ?\n        Number(bufferName) : varyingMap[bufferName];\n      assert(Number.isFinite(index));\n      this.buffers[index] = buffer;\n    }\n  }\n\n  // TODO: Activation is tightly coupled to the current program. Since we try to encapsulate\n  // program.use, should we move these methods (begin/pause/resume/end) to the Program?\n  begin(primitiveMode) {\n    this._bindBuffers();\n    this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n    this.gl.beginTransformFeedback(primitiveMode);\n    return this;\n  }\n\n  pause() {\n    // Rebinding to same handle seem to cause an issue , first found in Chrome version 67.\n    // this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n    this.gl.pauseTransformFeedback();\n    this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, null);\n    this._unbindBuffers();\n    return this;\n  }\n\n  resume() {\n    this._bindBuffers();\n    this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n    this.gl.resumeTransformFeedback();\n    return this;\n  }\n\n  end() {\n    // Rebinding to same handle seem to cause an issue , first found in Chrome version 67.\n    // this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n    this.gl.endTransformFeedback();\n    this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, null);\n    this._unbindBuffers();\n    return this;\n  }\n\n  bindBuffer({index, buffer, offset = 0, size}) {\n    // Need to avoid chrome bug where buffer that is already bound to a different target\n    // cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.\n    buffer.unbind();\n    this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n    if (size === undefined) {\n      this.gl.bindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER, index, buffer.handle);\n    } else {\n      this.gl.bindBufferRange(GL_TRANSFORM_FEEDBACK_BUFFER, index, buffer.handle, offset, size);\n    }\n    return this;\n  }\n\n  unbindBuffer({index}) {\n    this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);\n    this.gl.bindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER, index, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  // See https://github.com/KhronosGroup/WebGL/issues/2346\n  // If it was true that having a buffer on an unused TF was a problem\n  // it would make the entire concept of transform feedback objects pointless.\n  // The whole point of them is like VertexArrayObjects.\n  // You set them up with all in outputs at init time and\n  // then in one call you can setup all the outputs just before drawing.\n  // Since the point of transform feedback is to generate data that will\n  // then be used as inputs to attributes it makes zero sense you'd\n  // have to unbind them from every unused transform feedback object\n  // before you could use them in an attribute. If that was the case\n  // there would be no reason to setup transform feedback objects ever.\n  // You'd always use the default because you'd always have to bind and\n  // unbind all the buffers.\n  _bindBuffers() {\n    for (const bufferIndex in this.buffers) {\n      this.bindBuffer({buffer: this.buffers[bufferIndex], index: Number(bufferIndex)});\n    }\n  }\n\n  _unbindBuffers() {\n    for (const bufferIndex in this.buffers) {\n      this.unbindBuffer({buffer: this.buffers[bufferIndex], index: Number(bufferIndex)});\n    }\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTransformFeedback();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTransformFeedback(this.handle);\n  }\n}\n"],"file":"transform-feedback.js"}