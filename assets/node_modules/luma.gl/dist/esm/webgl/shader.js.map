{"version":3,"sources":["../../../src/webgl/shader.js"],"names":["Resource","parseGLSLCompilerError","getShaderName","assertWebGLContext","uid","log","assert","ERR_SOURCE","GL_FRAGMENT_SHADER","GL_VERTEX_SHADER","GL_COMPILE_STATUS","GL_SHADER_TYPE","Shader","shaderType","gl","source","id","getTypeName","opts","initialize","shaderName","_compile","pname","getShaderParameter","handle","getShaderSource","extension","getExtension","getTranslatedShaderSource","shaderSource","compileShader","compileStatus","getParameter","infoLog","getShaderInfoLog","errors","warnings","error","warn","Error","deleteShader","type","getSource","VertexShader","createShader","FragmentShader"],"mappings":"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","sourcesContent":["import Resource from './resource';\nimport {parseGLSLCompilerError, getShaderName} from '../webgl-utils';\nimport {assertWebGLContext} from '../webgl-utils';\nimport {uid, log} from '../utils';\nimport assert from '../utils/assert';\n\nconst ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\n\nconst GL_FRAGMENT_SHADER = 0x8B30;\nconst GL_VERTEX_SHADER = 0x8B31;\nconst GL_COMPILE_STATUS = 0x8B81;\nconst GL_SHADER_TYPE = 0x8B4F;\n\n// For now this is an internal class\nexport class Shader extends Resource {\n\n  static getTypeName(shaderType) {\n    switch (shaderType) {\n    case GL_VERTEX_SHADER: return 'vertex-shader';\n    case GL_FRAGMENT_SHADER: return 'fragment-shader';\n    default: assert(false); return 'unknown';\n    }\n  }\n\n  /* eslint-disable max-statements */\n  constructor(gl, source, shaderType) {\n    assertWebGLContext(gl);\n    assert(typeof source === 'string', ERR_SOURCE);\n\n    super(gl, {id: getShaderName(source) || uid(Shader.getTypeName(shaderType))});\n\n    this.shaderType = shaderType;\n    this.source = source;\n\n    this.opts.source = source;\n    this.initialize(this.opts);\n  }\n\n  initialize({source}) {\n    const shaderName = getShaderName(source);\n    if (shaderName) {\n      this.id = uid(shaderName);\n    }\n    this._compile(source);\n    this.opts.source = source;\n  }\n\n  // Accessors\n\n  getParameter(pname) {\n    return this.gl.getShaderParameter(this.handle, pname);\n  }\n\n  toString() {\n    return `${this.getTypeName(this.shaderType)}:${this.id}`;\n  }\n\n  getName() {\n    return getShaderName(this.opts.source) || 'unnamed-shader';\n  }\n\n  getSource() {\n    return this.gl.getShaderSource(this.handle);\n  }\n\n  // Debug method - Returns translated source if available\n  getTranslatedSource() {\n    const extension = this.gl.getExtension('WEBGL_debug_shaders');\n    return extension ?\n      extension.getTranslatedShaderSource(this.handle) :\n      'No translated source available. WEBGL_debug_shaders not implemented';\n  }\n\n  // PRIVATE METHODS\n  _compile() {\n    this.gl.shaderSource(this.handle, this.source);\n    this.gl.compileShader(this.handle);\n\n    // TODO - For performance reasons, avoid checking shader compilation errors on production?\n    // TODO - Load log even when no error reported, to catch warnings?\n    // https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings\n    const compileStatus = this.getParameter(GL_COMPILE_STATUS);\n    if (!compileStatus) {\n      const infoLog = this.gl.getShaderInfoLog(this.handle);\n      const {shaderName, errors, warnings} =\n        parseGLSLCompilerError(infoLog, this.source, this.shaderType);\n      log.error(`GLSL compilation errors in ${shaderName}\\n${errors}`)();\n      log.warn(`GLSL compilation warnings in ${shaderName}\\n${warnings}`)();\n      throw new Error(`GLSL compilation errors in ${shaderName}`);\n    }\n  }\n\n  _deleteHandle() {\n    this.gl.deleteShader(this.handle);\n  }\n\n  _getOptsFromHandle() {\n    return {\n      type: this.getParameter(GL_SHADER_TYPE),\n      source: this.getSource()\n    };\n  }\n}\n\nexport class VertexShader extends Shader {\n  constructor(gl, source) {\n    super(gl, source, GL_VERTEX_SHADER);\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL_VERTEX_SHADER);\n  }\n}\n\nexport class FragmentShader extends Shader {\n  constructor(gl, source) {\n    super(gl, source, GL_FRAGMENT_SHADER);\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL_FRAGMENT_SHADER);\n  }\n}\n"],"file":"shader.js"}