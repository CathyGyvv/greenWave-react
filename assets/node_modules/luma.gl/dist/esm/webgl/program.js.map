{"version":3,"sources":["../../../src/webgl/program.js"],"names":["GL","VertexArray","Resource","Texture","Framebuffer","parseUniformName","getUniformSetter","VertexShader","FragmentShader","Buffer","withParameters","assertWebGL2Context","isWebGL2","getPrimitiveDrawMode","log","uid","isObjectEmpty","assert","LOG_PROGRAM_PERF_PRIORITY","GL_INTERLEAVED_ATTRIBS","GL_SEPARATE_ATTRIBS","Program","gl","opts","initialize","vertexAttributes","getDefaultArray","Object","seal","_setId","id","vs","fs","defaultUniforms","varyings","bufferMode","transformFeedbackVaryings","handle","varyingMap","getVaryingMap","_compileAndLink","_isCached","vertexArray","filledLocations","attributeName","_attributeToLocationMap","location","_warnedLocations","warn","unsetBuffers","useProgram","drawMode","TRIANGLES","vertexCount","offset","start","end","isIndexed","indexType","UNSIGNED_SHORT","isInstanced","instanceCount","transformFeedback","uniforms","samplers","parameters","bind","primitiveMode","begin","setUniforms","ext","drawElementsInstanced","isNaN","drawElementsRange","drawElements","drawArraysInstanced","drawArrays","attributes","clear","drawParams","clearBindings","_sortBuffersByLocation","locations","elements","length","attribute","disable","isGeneric","_setAttributeToGeneric","array","value","_setAttributeToBuffer","buffer","getBuffer","layout","assign","instanced","type","buffers","deprecated","bufferName","_attributeCount","i","bindBuffer","ELEMENT_ARRAY_BUFFER","uniformName","uniform","uniformSetter","_uniformSetters","sampler","texture","textureIndex","undefined","_textureIndexCounter","blockIndex","blockBinding","uniformBlockBinding","_getParameter","ACTIVE_ATTRIBUTES","getAttribLocation","getActiveAttrib","ACTIVE_UNIFORMS","index","getActiveUniform","name","getUniformLocation","getUniform","uniformIndices","pname","getActiveUniforms","program","result","getTransformFeedbackVarying","varyingName","getFragDataLocation","getAttachedShaders","blockName","getUniformBlockIndex","getActiveUniformBlockParameter","setGeneric","divisor","setBuffer","setDivisor","enable","attachShader","time","_getName","linkProgram","timeEnd","debug","priority","validateProgram","linked","getProgramParameter","LINK_STATUS","Error","getProgramInfoLog","_queryAttributeLocations","_queryUniformLocations","Array","target","_print","isEnabled","createProgram","deleteProgram","programName","getName","replace","shaderHandles","shaderHandle","getShaderParameter","SHADER_TYPE","VERTEX_SHADER","FRAGMENT_SHADER","getAttributeCount","getAttributeInfo","getAttributeLocation","_uniformCount","getUniformCount","info","getUniformInfo","parsedName","isArray","getUniformDescriptors","uniformDescriptors","descriptor","indexIncrement","varying"],"mappings":"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","sourcesContent":["/* eslint-disable no-inline-comments */\nimport GL from '../constants';\nimport VertexArray from './vertex-array';\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport {parseUniformName, getUniformSetter} from './uniforms';\nimport {VertexShader, FragmentShader} from './shader';\nimport Buffer from './buffer';\nimport {withParameters} from '../webgl-context/context-state';\nimport {assertWebGL2Context, isWebGL2} from '../webgl-utils';\nimport {getPrimitiveDrawMode} from '../webgl-utils/attribute-utils';\nimport {log, uid, isObjectEmpty} from '../utils';\nimport assert from '../utils/assert';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 3;\n\n// const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;\n// const GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;\n// MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS : 0x8C80,\n// TRANSFORM_FEEDBACK_BUFFER_START: 0x8C84,\n// TRANSFORM_FEEDBACK_BUFFER_SIZE : 0x8C85,\n// TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 0x8C88,\n// MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 0x8C8A,\n// MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 0x8C8B,\nconst GL_INTERLEAVED_ATTRIBS = 0x8C8C;\nconst GL_SEPARATE_ATTRIBS = 0x8C8D;\n\nexport default class Program extends Resource {\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n    this.initialize(opts);\n    this.vertexAttributes = VertexArray.getDefaultArray(gl);\n    Object.seal(this);\n\n    this._setId(opts.id);\n  }\n\n  initialize({vs, fs, defaultUniforms, varyings, bufferMode = GL_SEPARATE_ATTRIBS} = {}) {\n    // Create shaders if needed\n    this.vs = typeof vs === 'string' ? new VertexShader(this.gl, vs) : vs;\n    this.fs = typeof fs === 'string' ? new FragmentShader(this.gl, fs) : fs;\n\n    assert(this.vs instanceof VertexShader, 'Program: bad vertex shader');\n    assert(this.fs instanceof FragmentShader, 'Program: bad fragment shader');\n\n    this.defaultUniforms = defaultUniforms;\n\n    // Setup varyings if supplied\n    if (varyings) {\n      assertWebGL2Context(this.gl);\n      this.varyings = varyings;\n      this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n      this.varyingMap = getVaryingMap(varyings, bufferMode);\n    } else {\n      this.varyingMap = {};\n    }\n\n    this._compileAndLink();\n\n    // Experimental flag to avoid deleting Program object while it is cached\n    this._isCached = false;\n\n    return this;\n  }\n\n  // Generates warning if a vertex shader attribute is not setup.\n  checkAttributeBindings({vertexArray}) {\n    const filledLocations = vertexArray ?\n      vertexArray.filledLocations : this.vertexAttributes.filledLocations;\n    for (const attributeName in this._attributeToLocationMap) {\n      const location = this._attributeToLocationMap[attributeName];\n      if (!filledLocations[location] && !this._warnedLocations[location]) {\n        // throw new Error(`Program ${this.id}: ` +\n        //   `Attribute ${location}:${attributeName} not supplied`);\n        log.warn(`Program ${this.id}: Attribute ${location}:${attributeName} not supplied`)();\n        this._warnedLocations[location] = true;\n      }\n    }\n    return this;\n  }\n\n  delete(opts = {}) {\n    if (this._isCached) {\n      // This object is cached, do not delete\n      return this;\n    }\n    return super.delete(opts);\n  }\n\n  reset() {\n    this.unsetBuffers();\n    // TODO - reset uniforms and attributes to initial state\n  }\n\n  use() {\n    this.gl.useProgram(this.handle);\n    return this;\n  }\n\n  // A good thing about webGL is that there are so many ways to draw things,\n  // e.g. depending on whether data is indexed and/or isInstanced.\n  // This function unifies those into a single call with simple parameters\n  // that have sane defaults.\n  draw({\n    drawMode = GL.TRIANGLES,\n    vertexCount,\n    offset = 0,\n    start,\n    end,\n    isIndexed = false,\n    indexType = GL.UNSIGNED_SHORT,\n    isInstanced = false,\n    instanceCount = 0,\n    vertexArray = null,\n    transformFeedback = null,\n    uniforms = {},\n    samplers = {},\n    parameters = {}\n  }) {\n    vertexArray = vertexArray || VertexArray.getDefaultArray(this.gl);\n    vertexArray.bind(() => {\n\n      this.gl.useProgram(this.handle);\n\n      if (transformFeedback) {\n        const primitiveMode = getPrimitiveDrawMode(drawMode);\n        transformFeedback.begin(primitiveMode);\n      }\n\n      this.setUniforms(uniforms, samplers);\n\n      withParameters(this.gl, parameters,\n        () => {\n          // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n          if (isIndexed && isInstanced) {\n            this.ext.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n          } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n            this.gl.drawElementsRange(drawMode, start, end, vertexCount, indexType, offset);\n          } else if (isIndexed) {\n            this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n          } else if (isInstanced) {\n            this.ext.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n          } else {\n            this.gl.drawArrays(drawMode, offset, vertexCount);\n          }\n        }\n      );\n\n      // this.gl.useProgram(null);\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n\n    });\n\n    return this;\n  }\n\n  /**\n   * Attach a map of Buffers values to a program\n   * Only attributes with names actually present in the linked program\n   * will be updated. Other supplied buffers will be ignored.\n   *\n   * @param {Object} attributes - An object map with attribute names being keys\n   *  and values are expected to be instances of Attribute.\n   * @returns {Program} Returns itself for chaining.\n   */\n  setAttributes(attributes, {clear = true, drawParams = {}} = {}) {\n    if (clear) {\n      this.vertexAttributes.clearBindings();\n    }\n\n    // indexing is autodetected - buffer with target gl.ELEMENT_ARRAY_BUFFER\n    // index type is saved for drawElement calls\n    drawParams.isInstanced = false;\n    drawParams.isIndexed = false;\n    drawParams.indexType = null;\n\n    const {locations, elements} = this._sortBuffersByLocation(attributes);\n\n    // Process locations in order\n    for (let location = 0; location < locations.length; ++location) {\n      const attributeName = locations[location];\n      const attribute = attributes[attributeName];\n      // DISABLE MISSING ATTRIBUTE\n      if (!attribute) {\n        this.vertexAttributes.disable(location);\n      } else if (attribute.isGeneric) {\n        this._setAttributeToGeneric({location, array: attribute.value});\n      } else {\n        this._setAttributeToBuffer({location, buffer: attribute.getBuffer(), layout: attribute});\n        Object.assign(drawParams, {\n          isInstanced: attribute.instanced > 0\n        });\n      }\n    }\n\n    // SET ELEMENTS ARRAY BUFFER\n    if (elements) {\n      const attribute = attributes[elements];\n      attribute.getBuffer().bind();\n      drawParams.isIndexed = true;\n      drawParams.indexType = attribute.type;\n    }\n\n    return this;\n  }\n\n  /**\n   * Attach a map of Buffers values to a program\n   * Only attributes with names actually present in the linked program\n   * will be updated. Other supplied buffers will be ignored.\n   *\n   * @param {Object} buffers - An object map with attribute names being keys\n   *  and values are expected to be instances of Buffer.\n   * @returns {Program} Returns itself for chaining.\n   */\n  /* eslint-disable max-statements */\n  setBuffers(buffers, {clear = true, drawParams = {}} = {}) {\n    log.deprecated('Program: `setBuffers`', '`setAttributes`');\n\n    if (clear) {\n      this.vertexAttributes.clearBindings();\n    }\n\n    // indexing is autodetected - buffer with target gl.ELEMENT_ARRAY_BUFFER\n    // index type is saved for drawElement calls\n    drawParams.isInstanced = false;\n    drawParams.isIndexed = false;\n    drawParams.indexType = null;\n\n    const {locations, elements} = this._sortBuffersByLocation(buffers);\n\n    // Process locations in order\n    for (let location = 0; location < locations.length; ++location) {\n      const bufferName = locations[location];\n      const buffer = buffers[bufferName];\n      // DISABLE MISSING ATTRIBUTE\n      if (!buffer) {\n        this.vertexAttributes.disable(location);\n      } else if (buffer instanceof Buffer) {\n        this._setAttributeToBuffer({location, buffer, layout: buffer.layout});\n        Object.assign(drawParams, {\n          isInstanced: buffer.layout.instanced > 0\n        });\n      } else {\n        this._setAttributeToGeneric({location, array: buffer});\n      }\n    }\n\n    // SET ELEMENTS ARRAY BUFFER\n    if (elements) {\n      const buffer = buffers[elements];\n      buffer.bind();\n      drawParams.isIndexed = true;\n      drawParams.indexType = buffer.layout.type;\n    }\n\n    return this;\n  }\n  /* eslint-enable max-statements */\n\n  /*\n   * @returns {Program} Returns itself for chaining.\n   */\n  unsetBuffers() {\n    const length = this._attributeCount;\n    for (let i = 1; i < length; ++i) {\n      // this.vertexAttributes.setDivisor(i, 0);\n      this.vertexAttributes.disable(i);\n    }\n\n    // Clear elements buffer\n    this.gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, null);\n    return this;\n  }\n\n  /**\n   * Apply a set of uniform values to a program\n   * Only uniforms with names actually present in the linked program\n   * will be updated.\n   * other uniforms will be ignored\n   *\n   * @param {Object} uniformMap - An object with names being keys\n   * @returns {Program} - returns itself for chaining.\n   */\n  /* eslint-disable max-depth */\n  setUniforms(uniforms, samplers = {}) {\n    for (const uniformName in uniforms) {\n      let uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n      const sampler = samplers[uniformName];\n\n      if (uniformSetter) {\n        if (uniform instanceof Framebuffer) {\n          uniform = uniform.texture;\n        }\n        if (uniform instanceof Texture) {\n          if (uniformSetter.textureIndex === undefined) {\n            uniformSetter.textureIndex = this._textureIndexCounter++;\n          }\n\n          // Bind texture to index\n          const texture = uniform;\n          const {textureIndex} = uniformSetter;\n\n          texture.bind(textureIndex);\n\n          // Bind a sampler (if supplied) to index\n          if (sampler) {\n            sampler.bind(textureIndex);\n          }\n\n          // Set the uniform sampler to the texture index\n          uniformSetter(textureIndex);\n        } else {\n          // Just set the value\n          uniformSetter(uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n  /* eslint-enable max-depth */\n\n  // Binds a uniform block (`blockIndex`) to a specific binding point (`blockBinding`)\n  uniformBlockBinding(blockIndex, blockBinding) {\n    assertWebGL2Context(this.gl);\n    this.gl.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n  }\n\n  // setTransformFeedbackBuffers(buffers) {\n  //   for (const buffer of buffers) {\n  //     buffer.bindBase()\n  //   }\n  // }\n\n  /**\n   * ATTRIBUTES API\n   * (Locations are numeric indices)\n   * @return {Number} count\n   */\n  getAttributeCount() {\n    return this._getParameter(GL.ACTIVE_ATTRIBUTES);\n  }\n\n  /**\n   * Returns location (index) of a name\n   * @param {String} attributeName - name of an attribute\n   *   (matches name in a linked shader)\n   * @returns {Number} - // array of actual attribute names from shader linking\n   */\n  getAttributeLocation(attributeName) {\n    return this.gl.getAttribLocation(this.handle, attributeName);\n  }\n\n  /**\n   * Returns an object with info about attribute at index \"location\"/\n   * @param {int} location - index of an attribute\n   * @returns {WebGLActiveInfo} - info about an active attribute\n   *   fields: {name, size, type}\n   */\n  getAttributeInfo(location) {\n    return this.gl.getActiveAttrib(this.handle, location);\n  }\n\n  /**\n   * UNIFORMS API\n   * (Locations are numeric indices)\n   * @return {Number} count\n   */\n  getUniformCount() {\n    return this._getParameter(GL.ACTIVE_UNIFORMS);\n  }\n\n  /*\n   * @returns {WebGLActiveInfo} - object with {name, size, type}\n   */\n  getUniformInfo(index) {\n    return this.gl.getActiveUniform(this.handle, index);\n  }\n\n  /*\n   * @returns {WebGLUniformLocation} - opaque object representing location\n   * of uniform, used by setter methods\n   */\n  getUniformLocation(name) {\n    return this.gl.getUniformLocation(this.handle, name);\n  }\n\n  getUniformValue(location) {\n    return this.gl.getUniform(this.handle, location);\n  }\n\n  /* eslint-disable max-len */\n  // Rretrieves information about active uniforms identifed by their indices (`uniformIndices`)\n  // For valid `pname` values check :\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms\n  getActiveUniforms(uniformIndices, pname) {\n    return this.gl.getActiveUniforms(this.handle, uniformIndices, pname);\n  }\n  /* eslint-enable max-len */\n\n  // WebGL2\n  /**\n   * @param {GLuint} index\n   * @return {WebGLActiveInfo} - object with {name, size, type}\n   */\n  getVarying(program, index) {\n    const result = this.gl.getTransformFeedbackVarying(program, index);\n    return result;\n  }\n\n  // Retrieves the assigned color number binding for the user-defined varying\n  // out variable name for program. program must have previously been linked.\n  getFragDataLocation(varyingName) {\n    assertWebGL2Context(this.gl);\n    return this.gl.getFragDataLocation(this.handle, varyingName);\n  }\n\n  // @returns {WebGLShader[]} - array of attached WebGLShader objects\n  getAttachedShaders() {\n    return this.gl.getAttachedShaders(this.handle);\n  }\n\n  // Retrieves the index of a uniform block\n  getUniformBlockIndex(blockName) {\n    assertWebGL2Context(this.gl);\n    return this.gl.getUniformBlockIndex(this.handle, blockName);\n  }\n\n  /* eslint-disable max-len */\n  // Retrieves information about an active uniform block (`blockIndex`)\n  // For valid `pname` values check :\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter\n  getActiveUniformBlockParameter(blockIndex, pname) {\n    assertWebGL2Context(this.gl);\n    return this.gl.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n  }\n  /* eslint-enable max-len */\n\n  // PRIVATE METHODS\n\n  _setAttributeToGeneric({location, array}) {\n    this.vertexAttributes.setGeneric({location, array});\n    this.vertexAttributes.disable(location, true);\n  }\n\n  _setAttributeToBuffer({location, buffer, layout}) {\n    const divisor = layout.instanced ? 1 : 0;\n    this.vertexAttributes.setBuffer({location, buffer, layout});\n    this.vertexAttributes.setDivisor(location, divisor);\n    this.vertexAttributes.enable(location);\n  }\n\n  _compileAndLink() {\n    const {gl} = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n\n    // Avoid checking program linking error in production\n    if (gl.debug || log.priority > 0) {\n      gl.validateProgram(this.handle);\n      const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n      if (!linked) {\n        throw new Error(`Error linking ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n\n    this._queryAttributeLocations();\n    this._queryUniformLocations();\n  }\n\n  _sortBuffersByLocation(buffers) {\n    let elements = null;\n    let locations = [];\n\n    // Reutrn early if no buffers to be bound.\n    if (isObjectEmpty(buffers)) {\n      return {locations, elements};\n    }\n\n    locations = new Array(this._attributeCount);\n    for (const bufferName in buffers) {\n      const buffer = buffers[bufferName];\n      const location = this._attributeToLocationMap[bufferName];\n      if (location === undefined) {\n        if (buffer.target === GL.ELEMENT_ARRAY_BUFFER && elements) {\n          throw new Error(`${this._print(bufferName)} duplicate GL.ELEMENT_ARRAY_BUFFER`);\n        } else if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n          elements = bufferName;\n        } else if (!this._warnedLocations[location]) {\n          log.log(2, `${this._print(bufferName)} not used`)();\n          this._warnedLocations[location] = true;\n        }\n      } else {\n        if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n          throw new Error(`${this._print(bufferName)}:${location} ` +\n            'has both location and type gl.ELEMENT_ARRAY_BUFFER');\n        }\n        locations[location] = bufferName;\n      }\n    }\n    return {locations, elements};\n  }\n\n  // Check that all active attributes are enabled\n  _areAllAttributesEnabled() {\n    const length = this._attributeCount;\n    for (let i = 0; i < length; ++i) {\n      if (!this.vertexAttributes.isEnabled(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  _print(bufferName) {\n    return `Program ${this.id}: Attribute ${bufferName}`;\n  }\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? `${programName}-program` : 'program';\n    return programName;\n  }\n\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n      switch (type) {\n      case GL.VERTEX_SHADER:\n        opts.vs = new VertexShader({handle: shaderHandle});\n        break;\n      case GL.FRAGMENT_SHADER:\n        opts.fs = new FragmentShader({handle: shaderHandle});\n        break;\n      default:\n      }\n    }\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  // query attribute locations and build name to location map.\n  _queryAttributeLocations() {\n    this._attributeToLocationMap = {};\n    this._attributeCount = this.getAttributeCount();\n    for (let location = 0; location < this._attributeCount; location++) {\n      const name = this.getAttributeInfo(location).name;\n      this._attributeToLocationMap[name] = this.getAttributeLocation(name);\n    }\n    this._warnedLocations = {};\n  }\n\n  // query uniform locations and build name to setter map.\n  _queryUniformLocations() {\n    const {gl} = this;\n    this._uniformSetters = {};\n    this._uniformCount = this.getUniformCount();\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.getUniformInfo(i);\n      const parsedName = parseUniformName(info.name);\n      const location = this.getUniformLocation(parsedName.name);\n      this._uniformSetters[parsedName.name] =\n        getUniformSetter(gl, location, info, parsedName.isArray);\n    }\n    this._textureIndexCounter = 0;\n  }\n\n  _setId(id) {\n    // If program is not named, name it after shader names\n    if (!id) {\n      const programName = this._getName();\n      // TODO - this.id will already have been initialized\n      this.id = uid(programName);\n    }\n  }\n}\n\n// create uniform setters\n// Map of uniform names to setter functions\nexport function getUniformDescriptors(gl, program) {\n  const uniformDescriptors = {};\n  const length = program.getUniformCount();\n  for (let i = 0; i < length; i++) {\n    const info = program.getUniformInfo(i);\n    const location = program.getUniformLocation(info.name);\n    const descriptor = getUniformSetter(gl, location, info);\n    uniformDescriptors[descriptor.name] = descriptor;\n  }\n  return uniformDescriptors;\n}\n\n// Get a map of buffer indices\nexport function getVaryingMap(varyings, bufferMode) {\n  const varyingMap = {};\n  let index = 0;\n  assert(bufferMode === GL_SEPARATE_ATTRIBS || bufferMode === GL_INTERLEAVED_ATTRIBS);\n  const indexIncrement = bufferMode === GL_SEPARATE_ATTRIBS ? 1 : 0;\n  for (const varying of varyings) {\n    varyingMap[varying] = index;\n    index += indexIncrement;\n  }\n  return varyingMap;\n}\n"],"file":"program.js"}