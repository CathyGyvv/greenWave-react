{"version":3,"sources":["../../../src/lib/utils/formatters.js"],"names":["formatTime","leftPad","rightPad","getSISuffix","formatSI","formatValue","formatImage","ms","formatted","toFixed","string","length","padLength","Math","max","repeat","splitIntoBaseAndExponent","number","base","exponent","multipleOf3","SI_SUFFIXES","key","precision","floor","digits","pow","toPrecision","v","abs","opts","isInteger","Array","isArray","ArrayBuffer","isView","formatArrayValue","Number","isFinite","decimal","indexOf","slice","maxElts","size","i","terminator","image","message","scale","maxWidth","imageUrl","src","replace","width","min","height","style","join"],"mappings":"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","file":"formatters.js","sourcesContent":["// TODO: Currently unused, keeping in case we want it later for log formatting\nexport function formatTime(ms) {\n  let formatted;\n  if (ms < 10) {\n    formatted = `${ms.toFixed(2)}ms`;\n  } else if (ms < 100) {\n    formatted = `${ms.toFixed(1)}ms`;\n  } else if (ms < 1000) {\n    formatted = `${ms.toFixed(0)}ms`;\n  } else {\n    formatted = `${(ms / 1000).toFixed(2)}s`;\n  }\n  return formatted;\n}\n\nexport function leftPad(string, length = 8) {\n  const padLength = Math.max(length - string.length, 0);\n  return `${' '.repeat(padLength)}${string}`;\n}\n\nexport function rightPad(string, length = 8) {\n  const padLength = Math.max(length - string.length, 0);\n  return `${string}${' '.repeat(padLength)}`;\n}\n\n// Breaks a number into a normalized base and an exponent\n// E.g. 5640 => {5.64, 1000}\nfunction splitIntoBaseAndExponent(number) {\n  let base = number;\n  let exponent = 0;\n  if (number !== 0) {\n    while (base >= 10 || base <= -10) {\n      base /= 10;\n      exponent++;\n    }\n    while (base < 1 && base > -1) {\n      base *= 10;\n      exponent--;\n    }\n  }\n  return {base, exponent};\n}\n\nexport function getSISuffix(multipleOf3) {\n  const SI_SUFFIXES = {0: '', 1: 'K', 2: 'M', 3: 'G', '-1': 'm', '-2': 'Âµ', '-3': 'n'};\n  const key = String(multipleOf3);\n  return key in SI_SUFFIXES ? SI_SUFFIXES[key] : `e${multipleOf3 * 3}`;\n}\n\nexport function formatSI(number, precision = 3) {\n  const {base, exponent} = splitIntoBaseAndExponent(number);\n  const multipleOf3 = Math.floor(exponent / 3);\n  const remaining = exponent - multipleOf3 * 3;\n  const digits = base * Math.pow(10, remaining);\n  return `${digits.toPrecision(precision)}${getSISuffix(multipleOf3)}`;\n}\n\nexport function formatValue(v, opts = {}) {\n  const EPSILON = 1e-16;\n  const {isInteger = false} = opts;\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, opts);\n  }\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n  if (isInteger) {\n    return v.toFixed(0);\n  }\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    return v.toFixed(0);\n  }\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\n\n// Helper to formatValue\nfunction formatArrayValue(v, opts) {\n  const {maxElts = 16, size = 1} = opts;\n  let string = '[';\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += `,${(i % size === 0) ? ' ' : ''}`;\n    }\n    string += formatValue(v[i], opts);\n  }\n  const terminator = v.length > maxElts ? '...' : ']';\n  return `${string}${terminator}`;\n}\n\n// Inspired by https://github.com/hughsk/console-image (MIT license)\nexport function formatImage(image, message, scale, maxWidth = 600) {\n  const imageUrl = image.src.replace(/\\(/g, '%28').replace(/\\)/g, '%29');\n\n  if (image.width > maxWidth) {\n    scale = Math.min(scale, maxWidth / image.width);\n  }\n\n  const width = image.width * scale;\n  const height = image.height * scale;\n\n  const style = [\n    'font-size:1px;',\n    `padding:${Math.floor(height / 2)}px ${Math.floor(width / 2)}px;`,\n    `line-height:${height}px;`,\n    `background:url(${imageUrl});`,\n    `background-size:${width}px ${height}px;`,\n    'color:transparent;'\n  ].join('');\n\n  return [`${message} %c+`, style];\n}\n"]}