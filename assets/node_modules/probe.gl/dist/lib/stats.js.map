{"version":3,"sources":["../../src/lib/stats.js"],"names":["Stats","id","time","counters","Object","seal","Math","round","name","_getCounter","counter","call","count","timer","_startTime","addTime","key","deltaTime","stats","title","total","fps","totalTime","avgTime","getStats","keys","hasTimeElapsed","unit","averageTime"],"mappings":"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","file":"stats.js","sourcesContent":["import {getTimestamp} from './utils/timestamp';\nimport {formatTime} from './utils/formatters';\n\n// const MAX_FPS = 70;\n\nexport default class Stats {\n\n  constructor({id}) {\n    this.id = id;\n    this.time = getTimestamp();\n    this.counters = {};\n    Object.seal(this);\n  }\n\n  // Initialize a new counter\n  addCounter(name) {\n    this._getCounter(name);\n    return this;\n  }\n\n  // Call to bump a counter (+1)\n  bump(name) {\n    const counter = this._getCounter(name);\n    counter.call++;\n    counter.count++;\n    return this;\n  }\n\n  // Call to bump a counter\n  increment(name, count) {\n    const counter = this._getCounter(name);\n    counter.call++;\n    counter.count += count;\n    return this;\n  }\n\n  addTimer(name) {\n    const timer = this._getCounter(name);\n    timer.time = 0;\n    return this;\n  }\n\n  addTime(name, time) {\n    const timer = this._getCounter(name);\n    timer.time += time;\n    timer.count++;\n    return this;\n  }\n\n  timeStart(name, subname) {\n    const timer = this._getCounter(name);\n    timer._startTime = getTimestamp();\n  }\n\n  timeEnd(name, subname) {\n    const timer = this._getCounter(name);\n    this.addTime(name, getTimestamp() - timer._startTime);\n  }\n\n  // Reset all timers\n  reset() {\n    this.time = getTimestamp();\n    for (const key in this.counters) {\n      const counter = this.counters[key];\n      counter.count = 0;\n      counter.time = 0;\n    }\n    return this;\n  }\n\n  // ACCESSORS\n\n  hasTimeElapsed(deltaTime = 1000) {\n    return (getTimestamp() - this.time) > 1000;\n  }\n\n  getStats() {\n    const deltaTime = (getTimestamp() - this.time) / 1000;\n    const stats = {};\n    for (const key in this.counters) {\n      const counter = this.counters[key];\n      stats[counter.title] = {\n        total: counter.count,\n        fps: Math.round(counter.count / deltaTime)\n      };\n      if (counter.time) {\n        stats[counter.title].totalTime = formatTime(counter.time);\n        stats[counter.title].avgTime = formatTime(counter.time / counter.count);\n      }\n    }\n    return stats;\n  }\n\n  // Return stats in a \"table format\" suitable for console.table() or Log.table()\n  getStatsTable() {\n    const stats = this.getStats();\n    for (const key in stats) {\n      if (stats[key].total === 0) {\n        delete stats[key];\n      }\n    }\n    return stats;\n  }\n\n  // Returns the names of all registered stats, enables iteration\n  getStatNames() {\n    return Object.keys(this.counters);\n  }\n\n  get(name) {\n    const counter = this._getCounter(name);\n    return counter.count;\n  }\n\n  getCount(name) {\n    const counter = this._getCounter(name);\n    return counter.count;\n  }\n\n  getFPS(name) {\n    const counter = this._getCounter(name);\n    const deltaTime = (getTimestamp() - this.time) / 1000;\n    return Math.round(counter.count / deltaTime);\n  }\n\n  // DEPRECATED METHODS\n\n  getTimeString() {\n    return `${this.id}:${formatTime(this.time)}(${this.count})`;\n  }\n\n  oneSecondPassed(deltaTime = 1000) {\n    return this.hasTimeElapsed(deltaTime);\n  }\n\n  // PRIVATE METHODS\n\n  _getCounter(name) {\n    let counter = this.counters[name];\n    if (!counter) {\n      counter = {\n        title: name,\n        unit: '',\n        timer: false,\n        count: 0,\n        time: 0,\n        totalTime: 0,\n        averageTime: 0\n      };\n      this.counters[name] = counter;\n    }\n    return counter;\n  }\n\n  _incrementTimer(counter, time, count) {\n    counter.count += count;\n    counter.totalTime += time;\n    counter.averageTime = counter.totalTime / count;\n  }\n}\n"]}