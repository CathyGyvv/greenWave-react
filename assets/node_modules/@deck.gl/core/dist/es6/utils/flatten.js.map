{"version":3,"sources":["../../../src/utils/flatten.js"],"names":["flatten","array","filter","map","x","result","Array","isArray","flattenArray","index","length","value","push","countVertices","nestedArray","count","ArrayBuffer","isView","flattenVertices","dimensions","vertexLength","fillArray","target","source","start","total","copied","i","copyWithin"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * Flattens a nested array into a single level array,\n * or a single value into an array with one value\n * @example flatten([[1, [2]], [3], 4]) => [1, 2, 3, 4]\n * @example flatten(1) => [1]\n * @param {Array} array The array to flatten.\n * @param {Function} filter= - Optional predicate called on each `value` to\n *   determine if it should be included (pushed onto) the resulting array.\n * @param {Function} map= - Optional transform applied to each array elements.\n * @param {Array} result=[] - Optional array to push value into\n * @return {Array} Returns the new flattened array (new array or `result` if provided)\n */\nexport function flatten(array, {filter = () => true, map = x => x, result = []} = {}) {\n  // Wrap single object in array\n  if (!Array.isArray(array)) {\n    return filter(array) ? [map(array)] : [];\n  }\n  // Deep flatten and filter the array\n  return flattenArray(array, filter, map, result);\n}\n\n// Deep flattens an array. Helper to `flatten`, see its parameters\nfunction flattenArray(array, filter, map, result) {\n  let index = -1;\n  while (++index < array.length) {\n    const value = array[index];\n    if (Array.isArray(value)) {\n      flattenArray(value, filter, map, result);\n    } else if (filter(value)) {\n      result.push(map(value));\n    }\n  }\n  return result;\n}\n\nexport function countVertices(nestedArray) {\n  let count = 0;\n  let index = -1;\n  while (++index < nestedArray.length) {\n    const value = nestedArray[index];\n    if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n      count += countVertices(value);\n    } else {\n      count++;\n    }\n  }\n  return count;\n}\n\n// Flattens nested array of vertices, padding third coordinate as needed\nexport function flattenVertices(nestedArray, {result = [], dimensions = 3} = {}) {\n  let index = -1;\n  let vertexLength = 0;\n  while (++index < nestedArray.length) {\n    const value = nestedArray[index];\n    if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n      flattenVertices(value, {result, dimensions});\n    } else {\n      // eslint-disable-next-line\n      if (vertexLength < dimensions) {\n        result.push(value);\n        vertexLength++;\n      }\n    }\n  }\n  // Add a third coordinate if needed\n  if (vertexLength > 0 && vertexLength < dimensions) {\n    result.push(0);\n  }\n  return result;\n}\n\n// Uses copyWithin to significantly speed up typed array value filling\nexport function fillArray({target, source, start = 0, count = 1}) {\n  const length = source.length;\n  const total = count * length;\n  let copied = 0;\n  for (let i = start; copied < length; copied++) {\n    target[i++] = source[copied];\n  }\n\n  while (copied < total) {\n    // If we have copied less than half, copy everything we got\n    // else copy remaining in one operation\n    if (copied < total - copied) {\n      target.copyWithin(start + copied, start, start + copied);\n      copied *= 2;\n    } else {\n      target.copyWithin(start + copied, start, start + total - copied);\n      copied = total;\n    }\n  }\n\n  return target;\n}\n\n// Flattens nested array of vertices, padding third coordinate as needed\n/*\nexport function flattenTypedVertices(nestedArray, {\n  result = [],\n  Type = Float32Array,\n  start = 0,\n  dimensions = 3\n} = {}) {\n  let index = -1;\n  let vertexLength = 0;\n  while (++index < nestedArray.length) {\n    const value = nestedArray[index];\n    if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n      start = flattenTypedVertices(value, {result, start, dimensions});\n    } else {\n      if (vertexLength < dimensions) { // eslint-disable-line\n        result[start++] = value;\n        vertexLength++;\n      }\n    }\n  }\n  // Add a third coordinate if needed\n  if (vertexLength > 0 && vertexLength < dimensions) {\n    result[start++] = 0;\n  }\n  return start;\n}\n*/\n"],"file":"flatten.js"}