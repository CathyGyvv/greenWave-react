{"version":3,"sources":["../../../src/lifecycle/create-props.js"],"names":["applyPropOverrides","log","parsePropTypes","createProps","component","propsPrototype","getPropsPrototypeAndTypes","constructor","defaultProps","propsInstance","Object","create","_component","enumerable","value","_asyncPropOriginalValues","_asyncPropResolvedValues","i","arguments","length","assign","freeze","componentClass","props","getOwnProperty","propTypes","createPropsPrototypeAndTypes","parent","prototype","parentClass","getPrototypeOf","parentPropDefs","componentDefaultProps","componentPropDefs","createPropsPrototype","_mergedDefaultProps","_propTypes","parentProps","id","getComponentName","defineProperties","configurable","writable","addAsyncPropsToPropPrototype","defaultValues","descriptors","_asyncPropDefaultValues","propName","propType","name","async","getDescriptorForAsyncProp","set","newValue","Promise","get","state","internalState","hasAsyncProp","getAsyncProp","object","prop","hasOwnProperty","call","componentName","once"],"mappings":"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","sourcesContent":["import {applyPropOverrides} from '../lib/seer-integration';\nimport log from '../utils/log';\nimport {parsePropTypes} from './prop-types';\n\n// Create a property object\nexport function createProps() {\n  const component = this; // eslint-disable-line\n\n  // Get default prop object (a prototype chain for now)\n  const propsPrototype = getPropsPrototypeAndTypes(component.constructor).defaultProps;\n\n  // Create a new prop object with default props object in prototype chain\n  const propsInstance = Object.create(propsPrototype, {\n    // Props need a back pointer to the owning component\n    _component: {\n      enumerable: false,\n      value: component\n    },\n    // The supplied (original) values for those async props that are set to url strings or Promises.\n    // In this case, the actual (i.e. resolved) values are looked up from component.internalState\n    _asyncPropOriginalValues: {\n      enumerable: false,\n      value: {}\n    },\n    // Note: the actual (resolved) values for props that are NOT set to urls or Promises.\n    // in this case the values are served directly from this map\n    _asyncPropResolvedValues: {\n      enumerable: false,\n      value: {}\n    }\n  });\n\n  // \"Copy\" all sync props\n  for (let i = 0; i < arguments.length; ++i) {\n    Object.assign(propsInstance, arguments[i]);\n  }\n\n  // SEER: Apply any overrides from the seer debug extension if it is active\n  applyPropOverrides(propsInstance);\n\n  // Props must be immutable\n  Object.freeze(propsInstance);\n\n  return propsInstance;\n}\n\n// Return precalculated defaultProps and propType objects if available\n// build them if needed\nfunction getPropsPrototypeAndTypes(componentClass) {\n  const props = getOwnProperty(componentClass, '_mergedDefaultProps');\n  if (props) {\n    return {\n      defaultProps: props,\n      propTypes: getOwnProperty(componentClass, '_propTypes')\n    };\n  }\n\n  return createPropsPrototypeAndTypes(componentClass);\n}\n\n// Build defaultProps and propType objects by walking component prototype chain\nfunction createPropsPrototypeAndTypes(componentClass) {\n  const parent = componentClass.prototype;\n  if (!parent) {\n    return {\n      defaultProps: {}\n    };\n  }\n\n  const parentClass = Object.getPrototypeOf(componentClass);\n  const parentPropDefs = (parent && getPropsPrototypeAndTypes(parentClass)) || null;\n\n  // Parse propTypes from Component.defaultProps\n  const componentDefaultProps = getOwnProperty(componentClass, 'defaultProps') || {};\n  const componentPropDefs = parsePropTypes(componentDefaultProps);\n\n  // Create a merged type object\n  const propTypes = Object.assign(\n    {},\n    parentPropDefs && parentPropDefs.propTypes,\n    componentPropDefs.propTypes\n  );\n\n  // Create any necessary property descriptors and create the default prop object\n  // Assign merged default props\n  const defaultProps = createPropsPrototype(\n    componentPropDefs.defaultProps,\n    parentPropDefs && parentPropDefs.defaultProps,\n    propTypes,\n    componentClass\n  );\n\n  // Store the precalculated props\n  componentClass._mergedDefaultProps = defaultProps;\n  componentClass._propTypes = propTypes;\n\n  return {propTypes, defaultProps};\n}\n\n// Builds a pre-merged default props object that component props can inherit from\nfunction createPropsPrototype(props, parentProps, propTypes, componentClass) {\n  const defaultProps = Object.create(null);\n\n  Object.assign(defaultProps, parentProps, props);\n\n  // Avoid freezing `id` prop\n  const id = getComponentName(componentClass);\n  delete props.id;\n\n  // Add getters/setters for async prop properties\n  Object.defineProperties(defaultProps, {\n    // `id` is treated specially because layer might need to override it\n    id: {\n      configurable: false,\n      writable: true,\n      value: id\n    }\n  });\n\n  // Add getters/setters for async prop properties\n  addAsyncPropsToPropPrototype(defaultProps, propTypes);\n\n  return defaultProps;\n}\n\n// Create descriptors for overridable props\nfunction addAsyncPropsToPropPrototype(defaultProps, propTypes) {\n  const defaultValues = {};\n\n  const descriptors = {\n    // Default \"resolved\" values for async props, returned if value not yet resolved/set.\n    _asyncPropDefaultValues: {\n      enumerable: false,\n      value: defaultValues\n    },\n    // Shadowed object, just to make sure \"early indexing\" into the instance does not fail\n    _asyncPropOriginalValues: {\n      enumerable: false,\n      value: {}\n    }\n  };\n\n  // Move async props into shadow values\n  for (const propName in propTypes) {\n    const propType = propTypes[propName];\n    const {name, value} = propType;\n\n    // Note: async is ES7 keyword, can't destructure\n    if (propType.async) {\n      defaultValues[name] = value;\n      descriptors[name] = getDescriptorForAsyncProp(name, value);\n    }\n  }\n\n  Object.defineProperties(defaultProps, descriptors);\n}\n\n// Helper: Configures getter and setter for one async prop\nfunction getDescriptorForAsyncProp(name) {\n  return {\n    configurable: false,\n    enumerable: true,\n    // Save the provided value for async props in a special map\n    set(newValue) {\n      if (typeof newValue === 'string' || newValue instanceof Promise) {\n        this._asyncPropOriginalValues[name] = newValue;\n      } else {\n        this._asyncPropResolvedValues[name] = newValue;\n      }\n    },\n    // Only the component's state knows the true value of async prop\n    get() {\n      if (this._asyncPropResolvedValues) {\n        // Prop value isn't async, so just return it\n        if (name in this._asyncPropResolvedValues) {\n          const value = this._asyncPropResolvedValues[name];\n\n          // Special handling - components expect null `data` prop expects to be replaced with `[]`\n          if (name === 'data') {\n            return value || this._asyncPropDefaultValues[name];\n          }\n\n          return value;\n        }\n\n        // It's an async prop value: look into component state\n        const state = this._component && this._component.internalState;\n        if (state && state.hasAsyncProp(name)) {\n          return state.getAsyncProp(name);\n        }\n      }\n\n      // component not yet initialized/matched, return the component's default value for the prop\n      return this._asyncPropDefaultValues[name];\n    }\n  };\n}\n\n// HELPER METHODS\n\n// Constructors have their super class constructors as prototypes\nfunction getOwnProperty(object, prop) {\n  return Object.prototype.hasOwnProperty.call(object, prop) && object[prop];\n}\n\nfunction getComponentName(componentClass) {\n  const componentName =\n    getOwnProperty(componentClass, 'layerName') || getOwnProperty(componentClass, 'componentName');\n  if (!componentName) {\n    log.once(0, `${componentClass.name}.componentName not specified`);\n  }\n  return componentName || componentClass.name;\n}\n"],"file":"create-props.js"}