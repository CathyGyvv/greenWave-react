{"version":3,"sources":["../../../../src/experimental/reflection-effect/reflection-effect.js"],"names":["GL","Framebuffer","Model","Geometry","Effect","WebMercatorViewport","reflectionVertex","reflectionFragment","ReflectionEffect","constructor","reflectivity","blur","framebuffer","setNeedsRedraw","getShaders","vs","fs","modules","shaderCache","context","initialize","gl","layerManager","unitQuad","Object","assign","id","geometry","drawMode","TRIANGLE_FAN","vertices","Float32Array","depth","preDraw","viewport","dpi","window","devicePixelRatio","resize","width","height","pitch","bind","setViewport","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","drawLayers","pass","unbind","draw","render","reflectionTexture","texture","reflectionTextureWidth","reflectionTextureHeight","finalize"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAQA,EAAR,EAAYC,WAAZ,EAAyBC,KAAzB,EAAgCC,QAAhC,QAA+C,SAA/C;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,mBAAP,MAAgC,uCAAhC;AAEA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AAEA,eAAe,MAAMC,gBAAN,SAA+BJ,MAA/B,CAAsC;AACnD;;;;;;;;AASAK,cAAYC,eAAe,GAA3B,EAAgCC,OAAO,GAAvC,EAA4C;AAC1C;AACA,SAAKD,YAAL,GAAoBA,YAApB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,cAAL;AACD;;AAEDC,eAAa;AACX,WAAO;AACLC,UAAIT,gBADC;AAELU,UAAIT,kBAFC;AAGLU,eAAS,EAHJ;AAILC,mBAAa,KAAKC,OAAL,CAAaD;AAJrB,KAAP;AAMD;;AAEDE,aAAW;AAACC,MAAD;AAAKC;AAAL,GAAX,EAA+B;AAC7B,SAAKC,QAAL,GAAgB,IAAIrB,KAAJ,CACdmB,EADc,EAEdG,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKX,UAAL,EAAlB,EAAqC;AACnCY,UAAI,mBAD+B;AAEnCC,gBAAU,IAAIxB,QAAJ,CAAa;AACrByB,kBAAU5B,GAAG6B,YADQ;AAErBC,kBAAU,IAAIC,YAAJ,CAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,CAAjB;AAFW,OAAb;AAFyB,KAArC,CAFc,CAAhB;AAUA,SAAKnB,WAAL,GAAmB,IAAIX,WAAJ,CAAgBoB,EAAhB,EAAoB;AAACW,aAAO;AAAR,KAApB,CAAnB;AACD;;AAEDC,UAAQ;AAACZ,MAAD;AAAKC;AAAL,GAAR,EAA4B;AAAA,UACnBY,QADmB,GACPZ,aAAaH,OADN,CACnBe,QADmB;AAE1B;;;;;;AAKA,UAAMC,MAAO,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,OAAOC,gBAAzC,IAA8D,CAA1E;AACA,SAAKzB,WAAL,CAAiB0B,MAAjB,CAAwB;AAACC,aAAOJ,MAAMD,SAASK,KAAvB;AAA8BC,cAAQL,MAAMD,SAASM;AAArD,KAAxB;AACA,UAAMC,QAAQP,SAASO,KAAvB;AACA,SAAK7B,WAAL,CAAiB8B,IAAjB;AACA;;;;AAGApB,iBAAaqB,WAAb,CACE,IAAItC,mBAAJ,CAAwBmB,OAAOC,MAAP,CAAc,EAAd,EAAkBS,QAAlB,EAA4B;AAACO,aAAO,CAAC,GAAD,GAAOA;AAAf,KAA5B,CAAxB,CADF;AAGApB,OAAGuB,KAAH,CAAS5C,GAAG6C,gBAAH,GAAsB7C,GAAG8C,gBAAlC;AAEAxB,iBAAayB,UAAb,CAAwB;AAACC,YAAM;AAAP,KAAxB;AACA1B,iBAAaqB,WAAb,CAAyBT,QAAzB;AACA,SAAKtB,WAAL,CAAiBqC,MAAjB;AACD;;AAEDC,OAAK;AAAC7B,MAAD;AAAKC;AAAL,GAAL,EAAyB;AACvB;;;;;;AAMA,SAAKC,QAAL,CAAc4B,MAAd,CAAqB;AACnBC,yBAAmB,KAAKxC,WAAL,CAAiByC,OADjB;AAEnBC,8BAAwB,KAAK1C,WAAL,CAAiB2B,KAFtB;AAGnBgB,+BAAyB,KAAK3C,WAAL,CAAiB4B,MAHvB;AAInB9B,oBAAc,KAAKA,YAJA;AAKnBC,YAAM,KAAKA;AALQ,KAArB;AAOD;;AAED6C,WAAS;AAACnC,MAAD;AAAKC;AAAL,GAAT,EAA6B;AAC3B;AACD;;AAnFkD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global window */\nimport {GL, Framebuffer, Model, Geometry} from 'luma.gl';\nimport Effect from '../lib/effect';\nimport WebMercatorViewport from '../../viewports/web-mercator-viewport';\n\nimport reflectionVertex from './reflection-effect-vertex.glsl';\nimport reflectionFragment from './reflection-effect-fragment.glsl';\n\nexport default class ReflectionEffect extends Effect {\n  /**\n   * @classdesc\n   * ReflectionEffect\n   *\n   * @class\n   * @param reflectivity How visible reflections should be over the map, between 0 and 1\n   * @param blur how blurry the reflection should be, between 0 and 1\n   */\n\n  constructor(reflectivity = 0.5, blur = 0.5) {\n    super();\n    this.reflectivity = reflectivity;\n    this.blur = blur;\n    this.framebuffer = null;\n    this.setNeedsRedraw();\n  }\n\n  getShaders() {\n    return {\n      vs: reflectionVertex,\n      fs: reflectionFragment,\n      modules: [],\n      shaderCache: this.context.shaderCache\n    };\n  }\n\n  initialize({gl, layerManager}) {\n    this.unitQuad = new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: 'reflection-effect',\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          vertices: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n        })\n      })\n    );\n    this.framebuffer = new Framebuffer(gl, {depth: true});\n  }\n\n  preDraw({gl, layerManager}) {\n    const {viewport} = layerManager.context;\n    /*\n     * the renderer already has a reference to this, but we don't have a reference to the renderer.\n     * when we refactor the camera code, we should make sure we get a reference to the renderer so\n     * that we can keep this in one place.\n     */\n    const dpi = (typeof window !== 'undefined' && window.devicePixelRatio) || 1;\n    this.framebuffer.resize({width: dpi * viewport.width, height: dpi * viewport.height});\n    const pitch = viewport.pitch;\n    this.framebuffer.bind();\n    /* this is a huge hack around the existing viewport class.\n     * TODO in the future, once we implement bona-fide cameras, we really need to fix this.\n     */\n    layerManager.setViewport(\n      new WebMercatorViewport(Object.assign({}, viewport, {pitch: -180 - pitch}))\n    );\n    gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n    layerManager.drawLayers({pass: 'reflection'});\n    layerManager.setViewport(viewport);\n    this.framebuffer.unbind();\n  }\n\n  draw({gl, layerManager}) {\n    /*\n     * Render our unit quad.\n     * This will cover the entire screen, but will lie behind all other geometry.\n     * This quad will sample the previously generated reflection texture\n     * in order to create the reflection effect\n     */\n    this.unitQuad.render({\n      reflectionTexture: this.framebuffer.texture,\n      reflectionTextureWidth: this.framebuffer.width,\n      reflectionTextureHeight: this.framebuffer.height,\n      reflectivity: this.reflectivity,\n      blur: this.blur\n    });\n  }\n\n  finalize({gl, layerManager}) {\n    /* TODO: Free resources? */\n  }\n}\n"],"file":"reflection-effect.js"}