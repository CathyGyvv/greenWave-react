import Viewport from '../viewports/viewport';
import { parsePosition, getPosition } from '../utils/positions';
import { deepEqual } from '../utils/deep-equal';
import assert from '../utils/assert';
export default class View {
  constructor(props = {}) {
    const _props$id = props.id,
          id = _props$id === void 0 ? null : _props$id,
          _props$x = props.x,
          x = _props$x === void 0 ? 0 : _props$x,
          _props$y = props.y,
          y = _props$y === void 0 ? 0 : _props$y,
          _props$width = props.width,
          width = _props$width === void 0 ? '100%' : _props$width,
          _props$height = props.height,
          height = _props$height === void 0 ? '100%' : _props$height,
          _props$projectionMatr = props.projectionMatrix,
          projectionMatrix = _props$projectionMatr === void 0 ? null : _props$projectionMatr,
          _props$fovy = props.fovy,
          fovy = _props$fovy === void 0 ? 75 : _props$fovy,
          _props$near = props.near,
          near = _props$near === void 0 ? 0.1 : _props$near,
          _props$far = props.far,
          far = _props$far === void 0 ? 1000 : _props$far,
          _props$modelMatrix = props.modelMatrix,
          modelMatrix = _props$modelMatrix === void 0 ? null : _props$modelMatrix,
          _props$viewportInstan = props.viewportInstance,
          viewportInstance = _props$viewportInstan === void 0 ? null : _props$viewportInstan,
          _props$type = props.type,
          type = _props$type === void 0 ? Viewport : _props$type;
    assert(!viewportInstance || viewportInstance instanceof Viewport);
    this.viewportInstance = viewportInstance; // Id

    this.id = id || this.constructor.displayName || 'view';
    this.type = type;
    this.props = Object.assign({}, props, {
      projectionMatrix,
      fovy,
      near,
      far,
      modelMatrix
    }); // Extents

    this._parseDimensions({
      x,
      y,
      width,
      height
    }); // Bind methods for easy access


    this.equals = this.equals.bind(this);
    Object.seal(this);
  }

  equals(view) {
    if (this === view) {
      return true;
    } // if `viewportInstance` is set, it is the only prop that is used
    // Delegate to `Viewport.equals`


    if (this.viewportInstance) {
      return view.viewportInstance && this.viewportInstance.equals(view.viewportInstance);
    } // TODO - implement deep equal on view descriptors


    const viewChanged = deepEqual(this, view);
    return viewChanged;
  } // Build a `Viewport` from a view descriptor
  // TODO - add support for autosizing viewports using width and height


  makeViewport({
    width,
    height,
    viewState
  }) {
    if (this.viewportInstance) {
      return this.viewportInstance;
    } // Resolve relative viewport dimensions


    const viewportDimensions = this.getDimensions({
      width,
      height
    });
    const props = Object.assign({
      viewState
    }, viewState, this.props, viewportDimensions);
    return this._getViewport(props);
  } // Resolve relative viewport dimensions into actual dimensions (y='50%', width=800 => y=400)


  getDimensions({
    width,
    height
  }) {
    return {
      x: getPosition(this._x, width),
      y: getPosition(this._y, height),
      width: getPosition(this._width, width),
      height: getPosition(this._height, height)
    };
  } // Overridable method


  _getViewport(props) {
    // Get the type of the viewport
    const ViewportType = this.type;
    return new ViewportType(props);
  } // Parse relative viewport dimension descriptors (e.g {y: '50%', height: '50%'})


  _parseDimensions({
    x,
    y,
    width,
    height
  }) {
    this._x = parsePosition(x);
    this._y = parsePosition(y);
    this._width = parsePosition(width);
    this._height = parsePosition(height);
  }

}
//# sourceMappingURL=view.js.map