{"version":3,"sources":["../../../src/views/third-person-view.js"],"names":["View","Viewport","Vector3","Matrix4","experimental","SphericalCoordinates","getDirectionFromBearingAndPitch","bearing","pitch","spherical","toVector3","normalize","ThirdPersonView","_getViewport","props","viewState","position","up","zoom","direction","distance","eye","scale","multiply","viewMatrix","multiplyRight","lookAt","center","Object","assign","id","displayName"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAAQC,OAAR,EAAiBC,OAAjB,EAA0BC,YAA1B,QAA6C,SAA7C;MACOC,oB,GAAwBD,Y,CAAxBC,oB;;AAEP,SAASC,+BAAT,CAAyC;AAACC,SAAD;AAAUC;AAAV,CAAzC,EAA2D;AACzD,QAAMC,YAAY,IAAIJ,oBAAJ,CAAyB;AAACE,WAAD;AAAUC;AAAV,GAAzB,CAAlB;AACA,SAAOC,UAAUC,SAAV,GAAsBC,SAAtB,EAAP;AACD;;AAED,eAAe,MAAMC,eAAN,SAA8BZ,IAA9B,CAAmC;AAChDa,eAAaC,KAAb,EAAoB;AAAA,6BAC2BA,MAAMC,SADjC;AAAA,UACXR,OADW,oBACXA,OADW;AAAA,UACFC,KADE,oBACFA,KADE;AAAA,UACKQ,QADL,oBACKA,QADL;AAAA,UACeC,EADf,oBACeA,EADf;AAAA,UACmBC,IADnB,oBACmBA,IADnB;AAGlB,UAAMC,YAAYb,gCAAgC;AAChDC,aADgD;AAEhDC;AAFgD,KAAhC,CAAlB;AAKA,UAAMY,WAAWF,OAAO,EAAxB,CARkB,CAUlB;AACA;;AACA,UAAMG,MAAMF,UAAUG,KAAV,CAAgB,CAACF,QAAjB,EAA2BG,QAA3B,CAAoC,IAAIrB,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAC,CAAnB,CAApC,CAAZ;AAEA,UAAMsB,aAAa,IAAIrB,OAAJ,GAAcsB,aAAd,CACjB,IAAItB,OAAJ,GAAcuB,MAAd,CAAqB;AAACL,SAAD;AAAMM,cAAQX,QAAd;AAAwBC;AAAxB,KAArB,CADiB,CAAnB;AAIA,WAAO,IAAIhB,QAAJ,CACL2B,OAAOC,MAAP,CAAc,EAAd,EAAkBf,KAAlB,EAAyB;AACvBgB,UAAI,KAAKA,EADc;AAEvBZ,YAAM,IAFiB;AAEX;AACZM;AAHuB,KAAzB,CADK,CAAP;AAOD;;AA1B+C;AA6BlDZ,gBAAgBmB,WAAhB,GAA8B,iBAA9B","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\nimport {Vector3, Matrix4, experimental} from 'math.gl';\nconst {SphericalCoordinates} = experimental;\n\nfunction getDirectionFromBearingAndPitch({bearing, pitch}) {\n  const spherical = new SphericalCoordinates({bearing, pitch});\n  return spherical.toVector3().normalize();\n}\n\nexport default class ThirdPersonView extends View {\n  _getViewport(props) {\n    const {bearing, pitch, position, up, zoom} = props.viewState;\n\n    const direction = getDirectionFromBearingAndPitch({\n      bearing,\n      pitch\n    });\n\n    const distance = zoom * 50;\n\n    // TODO somehow need to flip z to make it work\n    // check if the position offset is done in the base viewport\n    const eye = direction.scale(-distance).multiply(new Vector3(1, 1, -1));\n\n    const viewMatrix = new Matrix4().multiplyRight(\n      new Matrix4().lookAt({eye, center: position, up})\n    );\n\n    return new Viewport(\n      Object.assign({}, props, {\n        id: this.id,\n        zoom: null, // triggers meter level zoom\n        viewMatrix\n      })\n    );\n  }\n}\n\nThirdPersonView.displayName = 'ThirdPersonView';\n"],"file":"third-person-view.js"}