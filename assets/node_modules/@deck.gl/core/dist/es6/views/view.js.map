{"version":3,"sources":["../../../src/views/view.js"],"names":["Viewport","parsePosition","getPosition","deepEqual","assert","View","constructor","props","id","x","y","width","height","projectionMatrix","fovy","near","far","modelMatrix","viewportInstance","type","displayName","Object","assign","_parseDimensions","equals","bind","seal","view","viewChanged","makeViewport","viewState","viewportDimensions","getDimensions","_getViewport","_x","_y","_width","_height","ViewportType"],"mappings":"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","sourcesContent":["import Viewport from '../viewports/viewport';\nimport {parsePosition, getPosition} from '../utils/positions';\nimport {deepEqual} from '../utils/deep-equal';\nimport assert from '../utils/assert';\n\nexport default class View {\n  constructor(props = {}) {\n    const {\n      id = null,\n\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n\n      // Viewport Options\n      projectionMatrix = null, // Projection matrix\n      fovy = 75, // Perspective projection parameters, used if projectionMatrix not supplied\n      near = 0.1, // Distance of near clipping plane\n      far = 1000, // Distance of far clipping plane\n      modelMatrix = null, // A model matrix to be applied to position, to match the layer props API\n\n      // A View can be a wrapper for a viewport instance\n      viewportInstance = null,\n\n      // Internal: Viewport Type\n      type = Viewport // TODO - default to WebMercator?\n    } = props;\n\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n\n    // Id\n    this.id = id || this.constructor.displayName || 'view';\n    this.type = type;\n\n    this.props = Object.assign({}, props, {\n      projectionMatrix,\n      fovy,\n      near,\n      far,\n      modelMatrix\n    });\n\n    // Extents\n    this._parseDimensions({x, y, width, height});\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n\n    Object.seal(this);\n  }\n\n  equals(view) {\n    if (this === view) {\n      return true;\n    }\n\n    // if `viewportInstance` is set, it is the only prop that is used\n    // Delegate to `Viewport.equals`\n    if (this.viewportInstance) {\n      return view.viewportInstance && this.viewportInstance.equals(view.viewportInstance);\n    }\n\n    // TODO - implement deep equal on view descriptors\n    const viewChanged = deepEqual(this, view);\n\n    return viewChanged;\n  }\n\n  // Build a `Viewport` from a view descriptor\n  // TODO - add support for autosizing viewports using width and height\n  makeViewport({width, height, viewState}) {\n    if (this.viewportInstance) {\n      return this.viewportInstance;\n    }\n\n    // Resolve relative viewport dimensions\n    const viewportDimensions = this.getDimensions({width, height});\n    const props = Object.assign({viewState}, viewState, this.props, viewportDimensions);\n    return this._getViewport(props);\n  }\n\n  // Resolve relative viewport dimensions into actual dimensions (y='50%', width=800 => y=400)\n  getDimensions({width, height}) {\n    return {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n  }\n\n  // Overridable method\n  _getViewport(props) {\n    // Get the type of the viewport\n    const {type: ViewportType} = this;\n    return new ViewportType(props);\n  }\n\n  // Parse relative viewport dimension descriptors (e.g {y: '50%', height: '50%'})\n  _parseDimensions({x, y, width, height}) {\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n  }\n}\n"],"file":"view.js"}