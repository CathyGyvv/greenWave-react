{"version":3,"sources":["../../../src/views/orthographic-view.js"],"names":["View","Viewport","Matrix4","OrthographicView","_getViewport","x","y","width","height","viewState","eye","lookAt","up","props","left","top","near","far","right","bottom","Number","isFinite","id","viewMatrix","projectionMatrix","ortho","displayName"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AAEA,SAAQC,OAAR,QAAsB,SAAtB;AAEA,eAAe,MAAMC,gBAAN,SAA+BH,IAA/B,CAAoC;AACjDI,eAAa;AAACC,KAAD;AAAIC,KAAJ;AAAOC,SAAP;AAAcC,UAAd;AAAsBC;AAAtB,GAAb,EAA+C;AAC7C;AAD6C,2BAOzCA,SAPyC,CAI3CC,GAJ2C;AAAA,UAI3CA,GAJ2C,+BAIrC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJqC;AAAA,8BAOzCD,SAPyC,CAK3CE,MAL2C;AAAA,UAK3CA,MAL2C,kCAKlC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALkC;AAAA,0BAOzCF,SAPyC,CAM3CG,EAN2C;AAAA,UAM3CA,EAN2C,8BAMtC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANsC,kBAS7C;;AACAL,YAAQA,SAAS,CAAjB;AACAC,aAASA,UAAU,CAAnB,CAX6C,CAa7C;AACA;;AAd6C,wBAsBzC,KAAKK,KAtBoC;AAAA,yCAiB3CC,IAjB2C;AAAA,UAiB3CA,IAjB2C,iCAiBpC,CAACP,KAAD,GAAS,CAjB2B;AAAA,wCAkB3CQ,GAlB2C;AAAA,UAkB3CA,GAlB2C,gCAkBrC,CAACP,MAAD,GAAU,CAlB2B;AAAA,yCAoB3CQ,IApB2C;AAAA,UAoB3CA,IApB2C,iCAoBpC,CApBoC;AAAA,wCAqB3CC,GArB2C;AAAA,UAqB3CA,GArB2C,gCAqBrC,GArBqC;AAAA,uBA2BzC,KAAKJ,KA3BoC;AAAA,0CAyB3CK,KAzB2C;AAAA,QAyB3CA,KAzB2C,mCAyBnC,IAzBmC;AAAA,2CA0B3CC,MA1B2C;AAAA,QA0B3CA,MA1B2C,oCA0BlC,IA1BkC;AA6B7CD,YAAQE,OAAOC,QAAP,CAAgBH,KAAhB,IAAyBA,KAAzB,GAAiCJ,OAAOP,KAAhD;AACAY,aAASC,OAAOC,QAAP,CAAgBF,MAAhB,IAA0BA,MAA1B,GAAmCJ,MAAMP,MAAlD;AAEA,WAAO,IAAIP,QAAJ,CAAa;AAClBqB,UAAI,KAAKA,EADS;AAElBjB,OAFkB;AAGlBC,OAHkB;AAIlBC,WAJkB;AAKlBC,YALkB;AAMlBe,kBAAY,IAAIrB,OAAJ,GAAcS,MAAd,CAAqB;AAACD,WAAD;AAAMC,cAAN;AAAcC;AAAd,OAArB,CANM;AAOlBY,wBAAkB,IAAItB,OAAJ,GAAcuB,KAAd,CAAoB;AAACX,YAAD;AAAOI,aAAP;AAAcC,cAAd;AAAsBJ,WAAtB;AAA2BC,YAA3B;AAAiCC;AAAjC,OAApB;AAPA,KAAb,CAAP;AASD;;AA1CgD;AA6CnDd,iBAAiBuB,WAAjB,GAA+B,kBAA/B","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\nimport {Matrix4} from 'math.gl';\n\nexport default class OrthographicView extends View {\n  _getViewport({x, y, width, height, viewState}) {\n    // Get view matrix parameters from view state\n    const {\n      // view matrix arguments\n      eye = [0, 0, 1], // Defines eye position\n      lookAt = [0, 0, 0], // Which point is camera looking at, default origin\n      up = [0, 1, 0] // Defines up direction, default positive y axis\n    } = viewState;\n\n    // Make sure Matrix4.ortho doesn't crash on 0 width/height\n    width = width || 1;\n    height = height || 1;\n\n    // Get projection matrix parameters from the view itself\n    // NOTE: automatically calculated from width and height if not provided\n    const {\n      // projection matrix arguments\n      left = -width / 2, // Left bound of the frustum\n      top = -height / 2, // Top bound of the frustum\n\n      near = 1, // Distance of near clipping plane\n      far = 100 // Distance of far clipping plane\n    } = this.props;\n\n    let {\n      right = null, // Right bound of the frustum\n      bottom = null // Bottom bound of the frustum\n    } = this.props;\n\n    right = Number.isFinite(right) ? right : left + width;\n    bottom = Number.isFinite(bottom) ? bottom : top + height;\n\n    return new Viewport({\n      id: this.id,\n      x,\n      y,\n      width,\n      height,\n      viewMatrix: new Matrix4().lookAt({eye, lookAt, up}),\n      projectionMatrix: new Matrix4().ortho({left, right, bottom, top, near, far})\n    });\n  }\n}\n\nOrthographicView.displayName = 'OrthographicView';\n"],"file":"orthographic-view.js"}