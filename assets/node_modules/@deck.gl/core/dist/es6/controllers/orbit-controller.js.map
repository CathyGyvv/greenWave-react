{"version":3,"sources":["../../../src/controllers/orbit-controller.js"],"names":["clamp","Controller","OrbitViewport","assert","defaultState","lookAt","rotationX","rotationOrbit","fov","near","far","translationX","translationY","zoom","defaultConstraints","minZoom","maxZoom","Infinity","ensureFinite","value","fallbackValue","Number","isFinite","OrbitState","constructor","width","height","distance","orbitAxis","bounds","startPanViewport","startPanPos","isPanning","startRotateViewport","isRotating","startZoomViewport","startZoomPos","_viewportProps","_applyConstraints","_interactiveState","getViewportProps","getInteractiveState","panStart","pos","viewport","_getUpdatedOrbitState","pan","startPos","deltaX","deltaY","center","project","newLookAt","unproject","panEnd","rotateStart","rotate","deltaScaleX","deltaScaleY","newRotationX","newRotationOrbit","rotateEnd","zoomStart","scale","newZoom","cx","cy","newCenterX","newCenterY","zoomEnd","newProps","Object","assign","props","OrbitController"],"mappings":"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","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\nimport OrbitViewport from '../deprecated/orbit-viewport';\nimport assert from '../utils/assert';\n\nconst defaultState = {\n  lookAt: [0, 0, 0],\n  rotationX: 0,\n  rotationOrbit: 0,\n  fov: 50,\n  near: 1,\n  far: 100,\n  translationX: 0,\n  translationY: 0,\n  zoom: 1\n};\n\nconst defaultConstraints = {\n  minZoom: 0,\n  maxZoom: Infinity\n};\n\n/* Helpers */\n\nfunction ensureFinite(value, fallbackValue) {\n  return Number.isFinite(value) ? value : fallbackValue;\n}\n\nclass OrbitState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    distance, // From eye to target\n    rotationX, // Rotation around x axis\n    rotationOrbit, // Rotation around orbit axis\n    orbitAxis, // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'\n    // Bounding box of the model, in the shape of {minX, maxX, minY, maxY, minZ, maxZ}\n    bounds,\n\n    /* View matrix arguments */\n    lookAt, // Which point is camera looking at, default origin\n\n    /* Projection matrix arguments */\n    fov, // Field of view covered by camera\n    near, // Distance of near clipping plane\n    far, // Distance of far clipping plane\n\n    /* After projection */\n    translationX, // in pixels\n    translationY, // in pixels\n    zoom,\n\n    /* Viewport constraints */\n    minZoom,\n    maxZoom,\n\n    /** Interaction states, required to calculate change during transform */\n    // Model state when the pan operation first started\n    startPanViewport,\n    startPanPos,\n    isPanning,\n    // Model state when the rotate operation first started\n    startRotateViewport,\n    isRotating,\n    // Model state when the zoom operation first started\n    startZoomViewport,\n    startZoomPos\n  }) {\n    assert(Number.isFinite(width), '`width` must be supplied');\n    assert(Number.isFinite(height), '`height` must be supplied');\n    assert(Number.isFinite(distance), '`distance` must be supplied');\n\n    this._viewportProps = this._applyConstraints({\n      width,\n      height,\n      distance,\n      rotationX: ensureFinite(rotationX, defaultState.rotationX),\n      rotationOrbit: ensureFinite(rotationOrbit, defaultState.rotationOrbit),\n      orbitAxis,\n\n      bounds,\n      lookAt: lookAt || defaultState.lookAt,\n\n      fov: ensureFinite(fov, defaultState.fov),\n      near: ensureFinite(near, defaultState.near),\n      far: ensureFinite(far, defaultState.far),\n      translationX: ensureFinite(translationX, defaultState.translationX),\n      translationY: ensureFinite(translationY, defaultState.translationY),\n      zoom: ensureFinite(zoom, defaultState.zoom),\n\n      minZoom: ensureFinite(minZoom, defaultConstraints.minZoom),\n      maxZoom: ensureFinite(maxZoom, defaultConstraints.maxZoom)\n    });\n\n    this._interactiveState = {\n      startPanViewport,\n      startPanPos,\n      isPanning,\n      startRotateViewport,\n      isRotating,\n      startZoomViewport,\n      startZoomPos\n    };\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    const viewport = new OrbitViewport(this._viewportProps);\n\n    return this._getUpdatedOrbitState({\n      startPanPos: pos,\n      startPanViewport: viewport\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPos}) {\n    if (this._interactiveState.isRotating) {\n      return this._getUpdatedOrbitState();\n    }\n\n    const startPanPos = this._interactiveState.startPanPos || startPos;\n    assert(startPanPos, '`startPanPos` props is required');\n\n    const viewport =\n      this._interactiveState.startPanViewport || new OrbitViewport(this._viewportProps);\n\n    const deltaX = pos[0] - startPanPos[0];\n    const deltaY = pos[1] - startPanPos[1];\n\n    const center = viewport.project(viewport.lookAt);\n    const newLookAt = viewport.unproject([center[0] - deltaX, center[1] - deltaY, center[2]]);\n\n    return this._getUpdatedOrbitState({\n      lookAt: newLookAt,\n      isPanning: true\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedOrbitState({\n      startPanViewport: null,\n      startPanPos: null,\n      isPanning: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    // Rotation center should be the worldspace position at the center of the\n    // the screen. If not found, use the last one.\n    const viewport = new OrbitViewport(this._viewportProps);\n\n    return this._getUpdatedOrbitState({\n      startRotateViewport: viewport\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({deltaScaleX, deltaScaleY}) {\n    if (this._interactiveState.isPanning) {\n      return this._getUpdatedOrbitState();\n    }\n\n    const {startRotateViewport} = this._interactiveState;\n\n    let {rotationX, rotationOrbit} = startRotateViewport || {};\n    rotationX = ensureFinite(rotationX, this._viewportProps.rotationX);\n    rotationOrbit = ensureFinite(rotationOrbit, this._viewportProps.rotationOrbit);\n\n    const newRotationX = clamp(rotationX - deltaScaleY * 180, -89.999, 89.999);\n    const newRotationOrbit = (rotationOrbit - deltaScaleX * 180) % 360;\n\n    return this._getUpdatedOrbitState({\n      rotationX: newRotationX,\n      rotationOrbit: newRotationOrbit,\n      isRotating: true\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedOrbitState({\n      startRotateViewport: null,\n      isRotating: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}) {\n    const viewport = new OrbitViewport(this._viewportProps);\n    return this._getUpdatedOrbitState({\n      startZoomViewport: viewport,\n      startZoomPos: pos\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    const {zoom, minZoom, maxZoom, width, height} = this._viewportProps;\n    const startZoomPos = this._interactiveState.startZoomPos || startPos || pos;\n    const viewport =\n      this._interactiveState.startZoomViewport || new OrbitViewport(this._viewportProps);\n\n    const newZoom = clamp(zoom * scale, minZoom, maxZoom);\n    const deltaX = pos[0] - startZoomPos[0];\n    const deltaY = pos[1] - startZoomPos[1];\n\n    // Zoom around the center position\n    const cx = startZoomPos[0] - width / 2;\n    const cy = height / 2 - startZoomPos[1];\n    const center = viewport.project(viewport.lookAt);\n    const newCenterX = center[0] - cx + cx * newZoom / zoom + deltaX;\n    const newCenterY = center[1] + cy - cy * newZoom / zoom - deltaY;\n\n    const newLookAt = viewport.unproject([newCenterX, newCenterY, center[2]]);\n\n    return this._getUpdatedOrbitState({\n      lookAt: newLookAt,\n      zoom: newZoom\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedOrbitState({\n      startZoomPos: null\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedOrbitState(newProps) {\n    // Update _viewportProps\n    return new OrbitState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = zoom > maxZoom ? maxZoom : zoom;\n    props.zoom = zoom < minZoom ? minZoom : zoom;\n\n    return props;\n  }\n}\n\nexport default class OrbitController extends Controller {\n  constructor(props) {\n    super(OrbitState, props);\n  }\n}\n"],"file":"orbit-controller.js"}