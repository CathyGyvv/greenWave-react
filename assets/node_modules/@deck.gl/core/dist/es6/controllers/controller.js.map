{"version":3,"sources":["../../../src/controllers/controller.js"],"names":["TransitionManager","assert","NO_TRANSITION_PROPS","transitionDuration","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","ZOOM_ACCEL","EVENT_TYPES","WHEEL","PAN","PINCH","DOUBLE_TAP","KEYBOARD","Controller","constructor","ControllerState","options","controllerState","controllerStateProps","eventManager","transitionManager","_events","_state","isDragging","events","onViewportChange","onViewStateChange","onStateChange","invertPan","handleEvent","bind","setProps","finalize","event","Object","assign","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onDoubleTap","_onWheel","_onKeyDown","getCenter","offsetCenter","x","y","isFunctionKeyPressed","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","props","viewState","toggleEvents","processViewStateChange","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","isInteractive","eventNames","enabled","forEach","eventName","on","off","setOptions","updateViewport","newControllerState","extraProps","interactionState","getViewportProps","changed","oldViewState","getInteractiveState","pos","panStart","rotateStart","alternateMode","rightButton","_onPanMove","_onPanRotate","panEnd","rotateEnd","pan","_onPanRotateMap","_onPanRotateStandard","deltaX","deltaY","width","height","deltaScaleX","deltaScaleY","rotate","centerY","startY","Math","abs","min","max","delta","scale","exp","zoom","zoomStart","startPinchRotation","rotation","zoomEnd","isZoomOut","_getTransitionProps","funcKey","keyCode","zoomOut","zoomIn","rotateLeft","moveLeft","rotateRight","moveRight","rotateUp","moveUp","rotateDown","moveDown"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport TransitionManager from './transition-manager';\nimport assert from '../utils/assert';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\n// EVENT HANDLING PARAMETERS\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\nconst ZOOM_ACCEL = 0.01;\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nexport default class Controller {\n  constructor(ControllerState, options = {}) {\n    assert(ControllerState);\n    this.ControllerState = ControllerState;\n    this.controllerState = null;\n    this.controllerStateProps = null;\n    this.eventManager = null;\n    this.transitionManager = new TransitionManager(ControllerState, options);\n    this._events = null;\n    this._state = {\n      isDragging: false\n    };\n    this.events = [];\n    this.onViewportChange = null;\n    this.onViewStateChange = null;\n    this.onStateChange = null;\n    this.invertPan = false;\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.setProps(options);\n  }\n\n  finalize() {}\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event) {\n    const {ControllerState} = this;\n    this.controllerState = new ControllerState(\n      Object.assign({}, this.controllerStateProps, this._state)\n    );\n\n    switch (event.type) {\n      case 'panstart':\n        return this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {\n      offsetCenter: {x, y}\n    } = event;\n    return [x, y];\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging() {\n    return this._state.isDragging;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  /* eslint-disable complexity, max-statements */\n  setProps(props) {\n    if ('onViewportChange' in props) {\n      this.onViewportChange = props.onViewportChange;\n    }\n    if ('onViewStateChange' in props) {\n      this.onViewStateChange = props.onViewStateChange;\n    }\n    if ('onStateChange' in props) {\n      this.onStateChange = props.onStateChange;\n    }\n    if ('viewState' in props) {\n      this.controllerStateProps = Object.assign({}, props, props.viewState);\n    } else {\n      // TODO - deprecated, props on top level\n      this.controllerStateProps = props;\n    }\n\n    if ('eventManager' in props && this.eventManager !== props.eventManager) {\n      // EventManager has changed\n      this.eventManager = props.eventManager;\n      this._events = {};\n      this.toggleEvents(this.events, true);\n    }\n\n    this.transitionManager.processViewStateChange(this.controllerStateProps);\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewportChange || this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n  /* eslint-enable complexity, max-statements */\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // DEPRECATED\n\n  setOptions(props) {\n    return this.setProps(props);\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newControllerState, extraProps = {}, interactionState = {}) {\n    const viewState = Object.assign({}, newControllerState.getViewportProps(), extraProps);\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = true;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    if (changed) {\n      const oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n      if (this.onViewportChange) {\n        this.onViewportChange(viewState, interactionState, oldViewState);\n      }\n      if (this.onViewStateChange) {\n        this.onViewStateChange({viewState, interactionState, oldViewState});\n      }\n    }\n\n    Object.assign(\n      this._state,\n      Object.assign({}, newControllerState.getInteractiveState(), interactionState)\n    );\n    if (this.onStateChange) {\n      this.onStateChange(this._state);\n    }\n    // this.setState(Object.assign({}, newControllerState.getInteractiveState(), extraState));\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.panStart({pos}).rotateStart({pos});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `panmove` event.\n  _onPan(event) {\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n    alternateMode = this.invertPan ? !alternateMode : alternateMode;\n    return alternateMode ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  // Default handler for the `panend` event.\n  _onPanEnd(event) {\n    const newControllerState = this.controllerState.panEnd().rotateEnd();\n    return this.updateViewport(newControllerState, null, {isDragging: false});\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({pos});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    return this.invertPan ? this._onPanRotateMap(event) : this._onPanRotateStandard(event);\n  }\n\n  // Normal pan to rotate\n  _onPanRotateStandard(event) {\n    const {deltaX, deltaY} = event;\n    const {width, height} = this.controllerState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    const deltaScaleY = deltaY / height;\n\n    const newControllerState = this.controllerState.rotate({deltaScaleX, deltaScaleY});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  _onPanRotateMap(event) {\n    const {deltaX, deltaY} = event;\n    const [, centerY] = this.getCenter(event);\n    const startY = centerY - deltaY;\n    const {width, height} = this.controllerState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n\n    const newControllerState = this.controllerState.rotate({deltaScaleX, deltaScaleY});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * ZOOM_ACCEL)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS);\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._state.startPinchRotation = event.rotation;\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `pinch` event.\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      const {startPinchRotation} = this._state;\n      newControllerState = newControllerState.rotate({\n        deltaScaleX: -(rotation - startPinchRotation) / 180\n      });\n    }\n\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `pinchend` event.\n  _onPinchEnd(event) {\n    const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n    this._state.startPinchRotation = 0;\n    return this.updateViewport(newControllerState, null, {isDragging: false});\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    return this.updateViewport(newControllerState, this._getTransitionProps());\n  }\n\n  /* eslint-disable complexity */\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {controllerState} = this;\n    let newControllerState;\n\n    switch (event.srcEvent.keyCode) {\n      case 189: // -\n        newControllerState = funcKey\n          ? controllerState.zoomOut().zoomOut()\n          : controllerState.zoomOut();\n        break;\n      case 187: // +\n        newControllerState = funcKey ? controllerState.zoomIn().zoomIn() : controllerState.zoomIn();\n        break;\n      case 37: // left\n        newControllerState = funcKey ? controllerState.rotateLeft() : controllerState.moveLeft();\n        break;\n      case 39: // right\n        newControllerState = funcKey ? controllerState.rotateRight() : controllerState.moveRight();\n        break;\n      case 38: // up\n        newControllerState = funcKey ? controllerState.rotateUp() : controllerState.moveUp();\n        break;\n      case 40: // down\n        newControllerState = funcKey ? controllerState.rotateDown() : controllerState.moveDown();\n        break;\n      default:\n        return false;\n    }\n    return this.updateViewport(newControllerState, this._getTransitionProps());\n  }\n  /* eslint-enable complexity */\n\n  _getTransitionProps() {\n    // Transitions on double-tap and key-down are only supported by MapController\n    return NO_TRANSITION_PROPS;\n  }\n}\n"],"file":"controller.js"}