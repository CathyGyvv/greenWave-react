{"version":3,"sources":["../../../../src/shaderlib/project/viewport-uniforms.js"],"names":["mat4_multiply","vec4_transformMat4","COORDINATE_SYSTEM","memoize","log","assert","lngLatToWorld","ZERO_VECTOR","VECTOR_TO_POINT_MATRIX","IDENTITY_MATRIX","DEFAULT_PIXELS_PER_UNIT2","DEFAULT_COORDINATE_ORIGIN","getMemoizedViewportUniforms","calculateViewportUniforms","calculateMatrixAndOffset","viewport","coordinateSystem","coordinateOrigin","coordinateZoom","viewMatrixUncentered","viewMatrix","projectionMatrix","viewProjectionMatrix","projectionCenter","IDENTITY","LNGLAT","LNGLAT_OFFSETS","METER_OFFSETS","positionPixels","Math","pow","Error","cameraPos","cameraPosition","getUniformsFromViewport","devicePixelRatio","modelMatrix","projectionMode","positionOrigin","undefined","removed","Object","assign","project_uModelMatrix","zoom","distanceScales","getDistanceScales","viewportSize","width","height","uniforms","project_uCoordinateSystem","project_uCenter","project_uViewportSize","project_uDevicePixelRatio","project_uFocalDistance","focalDistance","project_uPixelsPerMeter","pixelsPerMeter","project_uPixelsPerDegree","pixelsPerDegree","project_uPixelsPerUnit","project_uPixelsPerUnit2","project_uScale","scale","project_uViewProjectionMatrix","project_uCameraPosition","distanceScalesAtOrigin","pixelsPerMeter2","pixelsPerDegree2"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport mat4_multiply from 'gl-mat4/multiply';\nimport vec4_transformMat4 from 'gl-vec4/transformMat4';\n\nimport {COORDINATE_SYSTEM} from '../../lib/constants';\n\nimport memoize from '../../utils/memoize';\nimport log from '../../utils/log';\nimport assert from '../../utils/assert';\n\nimport {lngLatToWorld} from 'viewport-mercator-project';\n\n// To quickly set a vector to zero\nconst ZERO_VECTOR = [0, 0, 0, 0];\n// 4x4 matrix that drops 4th component of vector\nconst VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nconst DEFAULT_PIXELS_PER_UNIT2 = [0, 0, 0];\nconst DEFAULT_COORDINATE_ORIGIN = [0, 0, 0];\n\nconst getMemoizedViewportUniforms = memoize(calculateViewportUniforms);\n\n// The code that utilizes Matrix4 does the same calculation as their mat4 counterparts,\n// has lower performance but provides error checking.\n// Uncomment when debugging\nfunction calculateMatrixAndOffset({\n  // UNCHANGED\n  viewport,\n  // NEW PARAMS\n  coordinateSystem,\n  coordinateOrigin,\n  coordinateZoom\n}) {\n  const {viewMatrixUncentered} = viewport;\n  let {viewMatrix} = viewport;\n  const {projectionMatrix} = viewport;\n  let {viewProjectionMatrix} = viewport;\n\n  let projectionCenter;\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.IDENTITY:\n    case COORDINATE_SYSTEM.LNGLAT:\n      projectionCenter = ZERO_VECTOR;\n      break;\n\n    // TODO: make lighting work for meter offset mode\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      // Calculate transformed projectionCenter (using 64 bit precision JS)\n      // This is the key to offset mode precision\n      // (avoids doing this addition in 32 bit precision in GLSL)\n      const positionPixels = lngLatToWorld(coordinateOrigin, Math.pow(2, coordinateZoom));\n      // projectionCenter = new Matrix4(viewProjectionMatrix)\n      //   .transformVector([positionPixels[0], positionPixels[1], 0.0, 1.0]);\n      projectionCenter = vec4_transformMat4(\n        [],\n        [positionPixels[0], positionPixels[1], 0.0, 1.0],\n        viewProjectionMatrix\n      );\n\n      // Always apply uncentered projection matrix if available (shader adds center)\n      viewMatrix = viewMatrixUncentered || viewMatrix;\n\n      // Zero out 4th coordinate (\"after\" model matrix) - avoids further translations\n      // viewMatrix = new Matrix4(viewMatrixUncentered || viewMatrix)\n      //   .multiplyRight(VECTOR_TO_POINT_MATRIX);\n      viewProjectionMatrix = mat4_multiply([], projectionMatrix, viewMatrix);\n      viewProjectionMatrix = mat4_multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);\n      break;\n\n    default:\n      throw new Error('Unknown projection mode');\n  }\n\n  return {\n    viewMatrix,\n    viewProjectionMatrix,\n    projectionCenter,\n    cameraPos: viewport.cameraPosition\n  };\n}\n\n/**\n * Returns uniforms for shaders based on current projection\n * includes: projection matrix suitable for shaders\n *\n * TODO - Ensure this works with any viewport, not just WebMercatorViewports\n *\n * @param {WebMercatorViewport} viewport -\n * @return {Float32Array} - 4x4 projection matrix that can be used in shaders\n */\nexport function getUniformsFromViewport({\n  viewport,\n  devicePixelRatio = 1,\n  modelMatrix = null,\n  // Match Layer.defaultProps\n  coordinateSystem = COORDINATE_SYSTEM.LNGLAT,\n  coordinateOrigin = DEFAULT_COORDINATE_ORIGIN,\n  // Deprecated\n  projectionMode,\n  positionOrigin\n} = {}) {\n  assert(viewport);\n\n  if (projectionMode !== undefined) {\n    log.removed('projectionMode', 'coordinateSystem');\n  }\n  if (positionOrigin !== undefined) {\n    log.removed('positionOrigin', 'coordinateOrigin');\n  }\n\n  return Object.assign(\n    {\n      project_uModelMatrix: modelMatrix || IDENTITY_MATRIX\n    },\n    getMemoizedViewportUniforms({viewport, devicePixelRatio, coordinateSystem, coordinateOrigin})\n  );\n}\n\nfunction calculateViewportUniforms({\n  viewport,\n  devicePixelRatio,\n  coordinateSystem,\n  coordinateOrigin\n}) {\n  const coordinateZoom = viewport.zoom;\n  assert(coordinateZoom >= 0);\n\n  const {projectionCenter, viewProjectionMatrix, cameraPos} = calculateMatrixAndOffset({\n    coordinateSystem,\n    coordinateOrigin,\n    coordinateZoom,\n    viewport\n  });\n\n  assert(viewProjectionMatrix, 'Viewport missing modelViewProjectionMatrix');\n\n  // Calculate projection pixels per unit\n  const distanceScales = viewport.getDistanceScales();\n\n  const viewportSize = [viewport.width * devicePixelRatio, viewport.height * devicePixelRatio];\n\n  const uniforms = {\n    // Projection mode values\n    project_uCoordinateSystem: coordinateSystem,\n    project_uCenter: projectionCenter,\n\n    // Screen size\n    project_uViewportSize: viewportSize,\n    project_uDevicePixelRatio: devicePixelRatio,\n\n    // Distance at which screen pixels are projected\n    project_uFocalDistance: viewport.focalDistance || 1,\n    project_uPixelsPerMeter: distanceScales.pixelsPerMeter,\n    project_uPixelsPerDegree: distanceScales.pixelsPerDegree,\n    project_uPixelsPerUnit: distanceScales.pixelsPerMeter,\n    project_uPixelsPerUnit2: DEFAULT_PIXELS_PER_UNIT2,\n    project_uScale: viewport.scale, // This is the mercator scale (2 ** zoom)\n\n    project_uViewProjectionMatrix: viewProjectionMatrix,\n\n    // This is for lighting calculations\n    project_uCameraPosition: cameraPos\n  };\n\n  if (coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS) {\n    const distanceScalesAtOrigin = viewport.getDistanceScales(coordinateOrigin);\n    uniforms.project_uPixelsPerUnit = distanceScalesAtOrigin.pixelsPerMeter;\n    uniforms.project_uPixelsPerUnit2 = distanceScalesAtOrigin.pixelsPerMeter2;\n  }\n  if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS) {\n    const distanceScalesAtOrigin = viewport.getDistanceScales(coordinateOrigin);\n    uniforms.project_uPixelsPerUnit = distanceScalesAtOrigin.pixelsPerDegree;\n    uniforms.project_uPixelsPerUnit2 = distanceScalesAtOrigin.pixelsPerDegree2;\n  }\n\n  return uniforms;\n}\n"],"file":"viewport-uniforms.js"}