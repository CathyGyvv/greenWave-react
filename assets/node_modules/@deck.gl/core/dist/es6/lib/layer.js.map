{"version":3,"sources":["../../../src/lib/layer.js"],"names":["COORDINATE_SYSTEM","AttributeManager","removeLayerInSeer","diffProps","count","log","GL","withParameters","assert","Component","LayerState","LOG_PRIORITY_UPDATE","EMPTY_ARRAY","Object","freeze","noop","defaultProps","data","type","value","async","dataComparator","dataTransform","fetch","url","then","response","json","updateTriggers","numInstances","undefined","visible","pickable","opacity","min","max","onHover","onClick","coordinateSystem","LNGLAT","coordinateOrigin","parameters","uniforms","framebuffer","animation","getPolygonOffset","layerIndex","highlightedObjectIndex","autoHighlight","highlightColor","Layer","toString","className","constructor","layerName","name","props","id","setState","updateObject","assign","state","setNeedsRedraw","redraw","internalState","needsRedraw","setLayerNeedsUpdate","context","layerManager","setNeedsUpdate","String","getNeedsRedraw","clearRedrawFlags","_getNeedsRedraw","needsUpdate","shouldUpdateState","_getUpdateParams","isPickable","getModels","models","model","getSingleModel","getAttributeManager","attributeManager","getCurrentLayer","layer","getFirstObject","object","project","lngLat","viewport","Array","isArray","unproject","xy","projectFlat","unprojectFlat","is64bitEnabled","fp64","once","screenToDevicePixels","screenPixels","deprecated","devicePixelRatio","window","nullPickingColor","encodePickingColor","i","decodePickingColor","color","Uint8Array","i1","i2","i3","index","initializeState","Error","oldProps","changeFlags","propsOrDataChanged","updateState","dataChanged","invalidateAll","finalizeState","delete","finalize","draw","opts","getPickingInfo","info","mode","invalidateAttribute","diffReason","invalidate","updateAttributes","getNumInstances","update","transitions","buffers","ignoreUnknownAttributes","changedAttributes","getChangedAttributes","clearChangedFlags","setAttributes","updateTransition","isInTransition","transition","calculateInstancePickingColors","attribute","size","pickingColor","_clearInstancePickingColor","instancePickingColors","attributes","forEach","_clearPickingColor","pickingColors","length","clearPickingColor","copyPickingColors","colors","Uint8ClampedArray","restorePickingColors","set","_initialize","gl","_initState","setChangeFlags","propsChanged","viewportChanged","_updateState","program","geometry","getAttributes","_update","stateNeedsUpdate","updateParams","isComposite","_renderLayers","_updateBaseUniforms","_updateModuleSettings","setInstanceCount","clearChangeFlags","resetOldProps","_finalize","drawLayer","moduleParameters","picking_uActive","updateModuleSettings","offsets","polygonOffset","pickLayer","getChangeFlags","flags","updateTriggersChanged","keys","join","somethingChanged","printChangeFlags","newProps","key","_activeUpdateTrigger","getOldProps","attributeManagerNeedsRedraw","modelNeedsRedraw","stats","addInstanced","UNSIGNED_BYTE","onAsyncPropUpdated","_onAsyncPropUpdated","bind","setAsyncProps","_transferState","oldLayer","component","userData","propName","_checkRequiredProp","propertyName","condition","Math","pow","ONE","setUniforms","settings","pickingHighlightColor","uniformMap"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;;AACA;AACA,SAAQA,iBAAR,QAAgC,aAAhC;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,SAAQC,iBAAR,QAAgC,oBAAhC;AACA,SAAQC,SAAR,QAAwB,oBAAxB;AACA,SAAQC,KAAR,QAAoB,gBAApB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAAQC,EAAR,EAAYC,cAAZ,QAAiC,SAAjC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,MAAMC,sBAAsB,CAA5B;AAEA,MAAMC,cAAcC,OAAOC,MAAP,CAAc,EAAd,CAApB;;AACA,MAAMC,OAAO,MAAM,CAAE,CAArB;;AAEA,MAAMC,eAAe;AACnB;AACAC,QAAM;AAACC,UAAM,MAAP;AAAeC,WAAOP,WAAtB;AAAmCQ,WAAO;AAA1C,GAFa;AAGnBC,kBAAgB,IAHG;AAInBC,iBAAeL,QAAQA,IAJJ;AAKnBM;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,IAAOC,OAAOD,MAAMC,GAAN,EAAWC,IAAX,CAAgBC,YAAYA,SAASC,IAAT,EAA5B,CAAd,CALmB;AAMnBC,kBAAgB,EANG;AAMC;AACpBC,gBAAcC,SAPK;AASnBC,WAAS,IATU;AAUnBC,YAAU,KAVS;AAWnBC,WAAS;AAACf,UAAM,QAAP;AAAiBgB,SAAK,CAAtB;AAAyBC,SAAK,CAA9B;AAAiChB,WAAO;AAAxC,GAXU;AAanBiB,WAASrB,IAbU;AAcnBsB,WAAStB,IAdU;AAgBnBuB,oBAAkBtC,kBAAkBuC,MAhBjB;AAiBnBC,oBAAkB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAjBC;AAmBnBC,cAAY,EAnBO;AAoBnBC,YAAU,EApBS;AAqBnBC,eAAa,IArBM;AAuBnBC,aAAW,IAvBQ;AAuBF;AAEjB;AACA;AACA;AACAC,oBAAkB,CAAC;AAACC;AAAD,GAAD,KAAkB,CAAC,CAAD,EAAI,CAACA,UAAD,GAAc,GAAlB,CA5BjB;AA8BnB;AACAC,0BAAwB,IA/BL;AAgCnBC,iBAAe,KAhCI;AAiCnBC,kBAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,GAAP,EAAY,GAAZ;AAjCG,CAArB;AAoCA,eAAe,MAAMC,KAAN,SAAoBzC,SAApB,CAA8B;AAC3C0C,aAAW;AACT,UAAMC,YAAY,KAAKC,WAAL,CAAiBC,SAAjB,IAA8B,KAAKD,WAAL,CAAiBE,IAAjE;AACA,WAAQ,GAAEH,SAAU,UAAS,KAAKI,KAAL,CAAWC,EAAG,KAA3C;AACD,GAJ0C,CAM3C;AAEA;;;AACAC,WAASC,YAAT,EAAuB;AACrB9C,WAAO+C,MAAP,CAAc,KAAKC,KAAnB,EAA0BF,YAA1B;AACA,SAAKG,cAAL;AACD,GAZ0C,CAc3C;;;AACAA,iBAAeC,SAAS,IAAxB,EAA8B;AAC5B,QAAI,KAAKC,aAAT,EAAwB;AACtB,WAAKA,aAAL,CAAmBC,WAAnB,GAAiCF,MAAjC;AACD;AACF,GAnB0C,CAqB3C;AACA;AACA;;;AACAG,wBAAsB;AACpB,SAAKC,OAAL,CAAaC,YAAb,CAA0BC,cAA1B,CAAyCC,OAAO,IAAP,CAAzC;AACD,GA1B0C,CA4B3C;;;AACAC,iBAAe;AAACC,uBAAmB;AAApB,MAA6B,EAA5C,EAAgD;AAC9C,WAAO,KAAKC,eAAL,CAAqBD,gBAArB,CAAP;AACD,GA/B0C,CAiC3C;;;AACAE,gBAAc;AACZ;AACA,WAAO,KAAKC,iBAAL,CAAuB,KAAKC,gBAAL,EAAvB,CAAP,CAFY,CAGZ;AACD,GAtC0C,CAwC3C;;;AACAC,eAAa;AACX,WAAO,KAAKrB,KAAL,CAAWxB,QAAX,IAAuB,KAAKwB,KAAL,CAAWzB,OAAzC;AACD,GA3C0C,CA6C3C;;;AACA+C,cAAY;AACV,WAAO,KAAKjB,KAAL,KAAe,KAAKA,KAAL,CAAWkB,MAAX,KAAsB,KAAKlB,KAAL,CAAWmB,KAAX,GAAmB,CAAC,KAAKnB,KAAL,CAAWmB,KAAZ,CAAnB,GAAwC,EAA9D,CAAf,CAAP;AACD,GAhD0C,CAkD3C;;;AACAC,mBAAiB;AACf,WAAO,KAAKpB,KAAL,IAAc,KAAKA,KAAL,CAAWmB,KAAhC;AACD;;AAEDE,wBAAsB;AACpB,WAAO,KAAKlB,aAAL,IAAsB,KAAKA,aAAL,CAAmBmB,gBAAhD;AACD,GAzD0C,CA2D3C;AACA;;;AACAC,oBAAkB;AAChB,WAAO,KAAKpB,aAAL,IAAsB,KAAKA,aAAL,CAAmBqB,KAAhD;AACD,GA/D0C,CAiE3C;AACA;;;AACAC,mBAAiB;AAAA,UACRrE,IADQ,GACA,KAAKuC,KADL,CACRvC,IADQ;;AAEf,SAAK,MAAMsE,MAAX,IAAqBtE,IAArB,EAA2B;AACzB,aAAOsE,MAAP;AACD;;AACD,WAAO,IAAP;AACD,GAzE0C,CA2E3C;AAEA;AACA;AACA;;;AACAC,UAAQC,MAAR,EAAgB;AAAA,UACPC,QADO,GACK,KAAKvB,OADV,CACPuB,QADO;AAEdlF,WAAOmF,MAAMC,OAAN,CAAcH,MAAd,CAAP;AACA,WAAOC,SAASF,OAAT,CAAiBC,MAAjB,CAAP;AACD;;AAEDI,YAAUC,EAAV,EAAc;AAAA,UACLJ,QADK,GACO,KAAKvB,OADZ,CACLuB,QADK;AAEZlF,WAAOmF,MAAMC,OAAN,CAAcE,EAAd,CAAP;AACA,WAAOJ,SAASG,SAAT,CAAmBC,EAAnB,CAAP;AACD;;AAEDC,cAAYN,MAAZ,EAAoB;AAAA,UACXC,QADW,GACC,KAAKvB,OADN,CACXuB,QADW;AAElBlF,WAAOmF,MAAMC,OAAN,CAAcH,MAAd,CAAP;AACA,WAAOC,SAASK,WAAT,CAAqBN,MAArB,CAAP;AACD;;AAEDO,gBAAcF,EAAd,EAAkB;AAAA,UACTJ,QADS,GACG,KAAKvB,OADR,CACTuB,QADS;AAEhBlF,WAAOmF,MAAMC,OAAN,CAAcE,EAAd,CAAP;AACA,WAAOJ,SAASM,aAAT,CAAuBF,EAAvB,CAAP;AACD;;AAEDG,mBAAiB;AACf,QAAI,KAAKzC,KAAL,CAAW0C,IAAf,EAAqB;AACnB,UAAI,KAAK1C,KAAL,CAAWlB,gBAAX,KAAgCtC,kBAAkBuC,MAAtD,EAA8D;AAC5D,eAAO,IAAP;AACD;;AACDlC,UAAI8F,IAAJ,CACE,CADF,EAEG;mEAFH;AAKD;;AAED,WAAO,KAAP;AACD,GArH0C,CAuH3C;;;AACAC,uBAAqBC,YAArB,EAAmC;AACjChG,QAAIiG,UAAJ,CAAe,sBAAf,EAAuC,4CAAvC;AACA,UAAMC,mBAAmB,OAAOC,MAAP,KAAkB,WAAlB,GAAgCA,OAAOD,gBAAvC,GAA0D,CAAnF;AACA,WAAOF,eAAeE,gBAAtB;AACD,GA5H0C,CA8H3C;AACA;AACA;;;AACAE,qBAAmB;AACjB,WAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAP;AACD,GAnI0C,CAqI3C;AACA;;;AACAC,qBAAmBC,CAAnB,EAAsB;AACpBnG,WAAO,CAAGmG,IAAI,CAAL,IAAW,EAAZ,GAAkB,GAAnB,MAA4B,CAAnC,EAAsC,kCAAtC;AACA,WAAO,CAAEA,IAAI,CAAL,GAAU,GAAX,EAAkBA,IAAI,CAAL,IAAW,CAAZ,GAAiB,GAAjC,EAAyCA,IAAI,CAAL,IAAW,CAAZ,IAAkB,CAAnB,GAAwB,GAA9D,CAAP;AACD,GA1I0C,CA4I3C;AACA;AACA;;;AACAC,qBAAmBC,KAAnB,EAA0B;AACxBrG,WAAOqG,iBAAiBC,UAAxB;;AADwB,kCAEHD,KAFG;AAAA,UAEjBE,EAFiB;AAAA,UAEbC,EAFa;AAAA,UAETC,EAFS,cAGxB;;;AACA,UAAMC,QAAQH,KAAKC,KAAK,GAAV,GAAgBC,KAAK,KAArB,GAA6B,CAA3C;AACA,WAAOC,KAAP;AACD,GArJ0C,CAuJ3C;AACA;AAEA;AACA;;;AACAC,oBAAkB;AAChB,UAAM,IAAIC,KAAJ,CAAW,SAAQ,IAAK,kCAAxB,CAAN;AACD,GA9J0C,CAgK3C;;;AACAzC,oBAAkB;AAAC0C,YAAD;AAAW7D,SAAX;AAAkBW,WAAlB;AAA2BmD;AAA3B,GAAlB,EAA2D;AACzD,WAAOA,YAAYC,kBAAnB;AACD,GAnK0C,CAqK3C;AACA;;;AACAC,cAAY;AAACH,YAAD;AAAW7D,SAAX;AAAkBW,WAAlB;AAA2BmD;AAA3B,GAAZ,EAAqD;AACnD,UAAMnC,mBAAmB,KAAKD,mBAAL,EAAzB;;AACA,QAAIoC,YAAYG,WAAZ,IAA2BtC,gBAA/B,EAAiD;AAC/CA,uBAAiBuC,aAAjB;AACD;AACF,GA5K0C,CA8K3C;AACA;;;AACAC,kBAAgB;AACd,SAAK,MAAM3C,KAAX,IAAoB,KAAKF,SAAL,EAApB,EAAsC;AACpCE,YAAM4C,MAAN;AACD;;AACD,SAAK1C,mBAAL,GAA2B2C,QAA3B;AACD,GArL0C,CAuL3C;;;AACAC,OAAKC,IAAL,EAAW;AACT,SAAK,MAAM/C,KAAX,IAAoB,KAAKF,SAAL,EAApB,EAAsC;AACpCE,YAAM8C,IAAN,CAAWC,IAAX;AACD;AACF,GA5L0C,CA8L3C;AACA;;;AACAC,iBAAe;AAACC,QAAD;AAAOC;AAAP,GAAf,EAA6B;AAAA,UACpBhB,KADoB,GACXe,IADW,CACpBf,KADoB;;AAG3B,QAAIA,SAAS,CAAb,EAAgB;AACd;AACA,UAAIvB,MAAMC,OAAN,CAAc,KAAKpC,KAAL,CAAWvC,IAAzB,CAAJ,EAAoC;AAClCgH,aAAK1C,MAAL,GAAc,KAAK/B,KAAL,CAAWvC,IAAX,CAAgBiG,KAAhB,CAAd;AACD;AACF;;AAED,WAAOe,IAAP;AACD,GA3M0C,CA6M3C;AACA;AAEA;AAEA;;;AACAE,sBAAoB5E,OAAO,KAA3B,EAAkC6E,aAAa,EAA/C,EAAmD;AACjD,UAAMjD,mBAAmB,KAAKD,mBAAL,EAAzB;;AACA,QAAI,CAACC,gBAAL,EAAuB;AACrB;AACD;;AAED,QAAI5B,SAAS,KAAb,EAAoB;AAClBlD,UAAIA,GAAJ,CAAQM,mBAAR,EAA8B,+CAA8CyH,UAAW,EAAvF;AACAjD,uBAAiBuC,aAAjB;AACD,KAHD,MAGO;AACLrH,UAAIA,GAAJ,CACEM,mBADF,EAEG,yCAAwC4C,IAAK,KAAI6E,UAAW,EAF/D;AAIAjD,uBAAiBkD,UAAjB,CAA4B9E,IAA5B;AACD;AACF,GAnO0C,CAqO3C;;;AACA+E,mBAAiB9E,KAAjB,EAAwB;AACtB,UAAM2B,mBAAmB,KAAKD,mBAAL,EAAzB;;AACA,QAAI,CAACC,gBAAL,EAAuB;AACrB;AACD,KAJqB,CAMtB;;;AACA,UAAMtD,eAAe,KAAK0G,eAAL,CAAqB/E,KAArB,CAArB;AAEA2B,qBAAiBqD,MAAjB,CAAwB;AACtBvH,YAAMuC,MAAMvC,IADU;AAEtBY,kBAFsB;AAGtB2B,WAHsB;AAItBiF,mBAAajF,MAAMiF,WAJG;AAKtBC,eAASlF,KALa;AAMtBW,eAAS,IANa;AAOtB;AACAwE,+BAAyB;AARH,KAAxB;AAWA,UAAM3D,QAAQ,KAAKC,cAAL,EAAd;;AACA,QAAID,KAAJ,EAAW;AACT,YAAM4D,oBAAoBzD,iBAAiB0D,oBAAjB,CAAsC;AAACC,2BAAmB;AAApB,OAAtC,CAA1B;AACA9D,YAAM+D,aAAN,CAAoBH,iBAApB;AACD;AACF,GA/P0C,CAiQ3C;;;AACAI,qBAAmB;AACjB,UAAMhE,QAAQ,KAAKC,cAAL,EAAd;AACA,UAAME,mBAAmB,KAAKD,mBAAL,EAAzB;AACA,UAAM+D,iBAAiB9D,oBAAoBA,iBAAiB6D,gBAAjB,EAA3C;;AAEA,QAAIhE,SAASiE,cAAb,EAA6B;AAC3BjE,YAAM+D,aAAN,CAAoB5D,iBAAiB0D,oBAAjB,CAAsC;AAACK,oBAAY;AAAb,OAAtC,CAApB;AACD;AACF;;AAEDC,iCAA+BC,SAA/B,EAA0C;AAACvH;AAAD,GAA1C,EAA0D;AAAA,UACjDV,KADiD,GAClCiI,SADkC,CACjDjI,KADiD;AAAA,UAC1CkI,IAD0C,GAClCD,SADkC,CAC1CC,IAD0C,EAExD;;AACA,SAAK,IAAI1C,IAAI,CAAb,EAAgBA,IAAI9E,YAApB,EAAkC8E,GAAlC,EAAuC;AACrC,YAAM2C,eAAe,KAAK5C,kBAAL,CAAwBC,CAAxB,CAArB;AACAxF,YAAMwF,IAAI0C,IAAJ,GAAW,CAAjB,IAAsBC,aAAa,CAAb,CAAtB;AACAnI,YAAMwF,IAAI0C,IAAJ,GAAW,CAAjB,IAAsBC,aAAa,CAAb,CAAtB;AACAnI,YAAMwF,IAAI0C,IAAJ,GAAW,CAAjB,IAAsBC,aAAa,CAAb,CAAtB;AACD;AACF,GArR0C,CAuR3C;;;AACAC,6BAA2B1C,KAA3B,EAAkC;AAAA,UACzB2C,qBADyB,GACA,KAAKtE,mBAAL,GAA2BuE,UAD3B,CACzBD,qBADyB;AAAA,UAElBJ,SAFkB,GAELI,qBAFK,CAEzB3F,KAFyB;AAAA,UAGzB1C,KAHyB,GAGViI,SAHU,CAGzBjI,KAHyB;AAAA,UAGlBkI,IAHkB,GAGVD,SAHU,CAGlBC,IAHkB;AAKhC,UAAM1C,IAAI,KAAKC,kBAAL,CAAwBC,KAAxB,CAAV;AACA1F,UAAMwF,IAAI0C,IAAJ,GAAW,CAAjB,IAAsB,CAAtB;AACAlI,UAAMwF,IAAI0C,IAAJ,GAAW,CAAjB,IAAsB,CAAtB;AACAlI,UAAMwF,IAAI0C,IAAJ,GAAW,CAAjB,IAAsB,CAAtB,CARgC,CAUhC;;AACA,UAAMtE,SAAS,KAAKD,SAAL,EAAf;;AACA,QAAIC,MAAJ,EAAY;AACVA,aAAO2E,OAAP,CAAe1E,SAASA,MAAM+D,aAAN,CAAoB;AAACS,+BAAuBJ;AAAxB,OAApB,CAAxB;AACD;AACF,GAvS0C,CAyS3C;;;AACAO,qBAAmB9C,KAAnB,EAA0B;AAAA,UACjB+C,aADiB,GACA,KAAK1E,mBAAL,GAA2BuE,UAD3B,CACjBG,aADiB;AAExB,UAAMR,YAAYQ,cAAc/F,KAAhC;AAFwB,UAGjB1C,KAHiB,GAGRiI,SAHQ,CAGjBjI,KAHiB;;AAKxB,SAAK,IAAIwF,IAAI,CAAb,EAAgBA,IAAIxF,MAAM0I,MAA1B,EAAkClD,KAAK,CAAvC,EAA0C;AACxC,UAAIxF,MAAMwF,IAAI,CAAV,MAAiBE,MAAM,CAAN,CAAjB,IAA6B1F,MAAMwF,IAAI,CAAV,MAAiBE,MAAM,CAAN,CAA9C,IAA0D1F,MAAMwF,IAAI,CAAV,MAAiBE,MAAM,CAAN,CAA/E,EAAyF;AACvF1F,cAAMwF,IAAI,CAAV,IAAe,CAAf;AACAxF,cAAMwF,IAAI,CAAV,IAAe,CAAf;AACAxF,cAAMwF,IAAI,CAAV,IAAe,CAAf;AACD;AACF,KAXuB,CAaxB;;;AACA,UAAM5B,SAAS,KAAKD,SAAL,EAAf;;AACA,QAAIC,MAAJ,EAAY;AACVA,aAAO2E,OAAP,CAAe1E,SAASA,MAAM+D,aAAN,CAAoB;AAACa,uBAAeR;AAAhB,OAApB,CAAxB;AACD;AACF,GA5T0C,CA8T3C;AACA;;;AACAU,oBAAkBjD,KAAlB,EAAyB;AACvB,QAAI,KAAK3B,mBAAL,GAA2BuE,UAA3B,CAAsCG,aAA1C,EAAyD;AACvD,WAAKD,kBAAL,CAAwB9C,KAAxB;AACD,KAFD,MAEO;AACL,WAAK0C,0BAAL,CAAgC1C,KAAhC;AACD;AACF;;AAEDkD,sBAAoB;AAAA,kCAC6B,KAAK7E,mBAAL,GAA2BuE,UADxD;AAAA,UACXG,aADW,yBACXA,aADW;AAAA,UACIJ,qBADJ,yBACIA,qBADJ;AAElB,UAAMQ,SAASJ,iBAAiBJ,qBAAhC;AAEA,WAAO,IAAIS,iBAAJ,CAAsBD,OAAO7I,KAA7B,CAAP;AACD;;AAED+I,uBAAqB/I,KAArB,EAA4B;AAAA,mCACqB,KAAK+D,mBAAL,GAA2BuE,UADhD;AAAA,UACnBG,aADmB,0BACnBA,aADmB;AAAA,UACJJ,qBADI,0BACJA,qBADI;AAE1B,UAAMQ,SAASJ,iBAAiBJ,qBAAhC;AAEAQ,WAAO7I,KAAP,CAAagJ,GAAb,CAAiBhJ,KAAjB;AACA6I,WAAO3F,cAAP;AACA,SAAKiE,gBAAL,CAAsB,KAAK9E,KAA3B;AACD,GAtV0C,CAwV3C;AACA;AACA;AACA;AACA;;;AACA+E,kBAAgB/E,KAAhB,EAAuB;AACrBA,YAAQA,SAAS,KAAKA,KAAtB,CADqB,CAGrB;;AACA,QAAI,KAAKK,KAAL,IAAc,KAAKA,KAAL,CAAWhC,YAAX,KAA4BC,SAA9C,EAAyD;AACvD,aAAO,KAAK+B,KAAL,CAAWhC,YAAlB;AACD,KANoB,CAQrB;;;AACA,QAAI2B,MAAM3B,YAAN,KAAuBC,SAA3B,EAAsC;AACpC,aAAO0B,MAAM3B,YAAb;AACD,KAXoB,CAarB;;;AAbqB,UAcdZ,IAdc,GAcN,KAAKuC,KAdC,CAcdvC,IAdc;AAerB,WAAOb,MAAMa,IAAN,CAAP;AACD,GA7W0C,CA+W3C;AACA;AAEA;;AACA;;;AACAmJ,gBAAc;AACZ5J,WAAO,KAAK2D,OAAL,CAAakG,EAApB;;AAEA,SAAKC,UAAL,GAHY,CAKZ;;;AACA,SAAKnD,eAAL,CAAqB,KAAKhD,OAA1B,EANY,CAOZ;AAEA;AACA;;AACA,SAAKN,KAAL,CAAWsB,gBAAX,GAA8B,KAAKD,mBAAL,EAA9B,CAXY,CAaZ;;AACA,SAAKqF,cAAL,CAAoB;AAAC9C,mBAAa,IAAd;AAAoB+C,oBAAc,IAAlC;AAAwCC,uBAAiB;AAAzD,KAApB;;AAEA,SAAKC,YAAL;;AAEA,UAAM1F,QAAQ,KAAKC,cAAL,EAAd;;AACA,QAAID,KAAJ,EAAW;AACTA,YAAMvB,EAAN,GAAW,KAAKD,KAAL,CAAWC,EAAtB;AACAuB,YAAM2F,OAAN,CAAclH,EAAd,GAAoB,GAAE,KAAKD,KAAL,CAAWC,EAAG,UAApC;AACAuB,YAAM4F,QAAN,CAAenH,EAAf,GAAqB,GAAE,KAAKD,KAAL,CAAWC,EAAG,WAArC;AACAuB,YAAM+D,aAAN,CAAoB,KAAK7D,mBAAL,GAA2B2F,aAA3B,EAApB;AACD;AACF,GA7Y0C,CA+Y3C;AACA;;;AACAC,YAAU;AACR;AACA,UAAMC,mBAAmB,KAAKrG,WAAL,EAAzB,CAFQ,CAGR;;AAEA,QAAIqG,gBAAJ,EAAsB;AACpB,WAAKL,YAAL;AACD;AACF;AACD;AAEA;;;AACAA,iBAAe;AACb,UAAMM,eAAe,KAAKpG,gBAAL,EAArB,CADa,CAGb;;;AACA,SAAK4C,WAAL,CAAiBwD,YAAjB,EAJa,CAMb;;AACA,QAAI,KAAKC,WAAT,EAAsB;AACpB,WAAKC,aAAL,CAAmBF,YAAnB;AACD,KATY,CAUb;AAEA;;;AACA,SAAK1C,gBAAL,CAAsB,KAAK9E,KAA3B;;AACA,SAAK2H,mBAAL;;AACA,SAAKC,qBAAL,GAfa,CAiBb;;;AACA,QAAI,KAAKvH,KAAL,CAAWmB,KAAf,EAAsB;AACpB,WAAKnB,KAAL,CAAWmB,KAAX,CAAiBqG,gBAAjB,CAAkC,KAAK9C,eAAL,EAAlC;AACD;;AAED,SAAK+C,gBAAL;AACA,SAAKtH,aAAL,CAAmBuH,aAAnB;AACD,GArb0C,CAub3C;AACA;;;AACAC,cAAY;AACVhL,WAAO,KAAKwD,aAAL,IAAsB,KAAKH,KAAlC,EADU,CAGV;;AACA,SAAK8D,aAAL,CAAmB,KAAKxD,OAAxB,EAJU,CAKV;;AACAjE,sBAAkB,KAAKuD,EAAvB;AACD,GAhc0C,CAkc3C;;;AACAgI,YAAU;AAACC,uBAAmB,IAApB;AAA0BhJ,eAAW,EAArC;AAAyCD,iBAAa;AAAtD,GAAV,EAAqE;AACnE,QAAI,CAACC,SAASiJ,eAAd,EAA+B;AAC7B,WAAK3C,gBAAL;AACD,KAHkE,CAKnE;;;AACA,QAAI0C,gBAAJ,EAAsB;AACpB,WAAK,MAAM1G,KAAX,IAAoB,KAAKF,SAAL,EAApB,EAAsC;AACpCE,cAAM4G,oBAAN,CAA2BF,gBAA3B;AACD;AACF,KAVkE,CAYnE;AACA;;;AAbmE,UAc5D7I,gBAd4D,GAcxC,KAAKW,KAdmC,CAc5DX,gBAd4D;AAenE,UAAMgJ,UAAWhJ,oBAAoBA,iBAAiBH,QAAjB,CAArB,IAAoD,CAAC,CAAD,EAAI,CAAJ,CAApE;AACAD,eAAWqJ,aAAX,GAA2BD,OAA3B,CAhBmE,CAkBnE;;AACAtL,mBAAe,KAAK4D,OAAL,CAAakG,EAA5B,EAAgC5H,UAAhC,EAA4C,MAAM;AAChD,WAAKqF,IAAL,CAAU;AAAC4D,wBAAD;AAAmBhJ,gBAAnB;AAA6BD,kBAA7B;AAAyC0B,iBAAS,KAAKA;AAAvD,OAAV;AACD,KAFD,EAnBmE,CAsBnE;AACD,GA1d0C,CA4d3C;;;AACA4H,YAAUhE,IAAV,EAAgB;AACd;AACA,WAAO,KAAKC,cAAL,CAAoBD,IAApB,CAAP,CAFc,CAGd;AACD,GAje0C,CAme3C;;;AACAiE,mBAAiB;AACf,WAAO,KAAKhI,aAAL,CAAmBsD,WAA1B;AACD,GAte0C,CAwe3C;;AACA;;;AACAiD,iBAAe0B,KAAf,EAAsB;AACpB,SAAKjI,aAAL,CAAmBsD,WAAnB,GAAiC,KAAKtD,aAAL,CAAmBsD,WAAnB,IAAkC,EAAnE;AACA,UAAMA,cAAc,KAAKtD,aAAL,CAAmBsD,WAAvC,CAFoB,CAIpB;;AACA,QAAI2E,MAAMxE,WAAN,IAAqB,CAACH,YAAYG,WAAtC,EAAmD;AACjDH,kBAAYG,WAAZ,GAA0BwE,MAAMxE,WAAhC;AACApH,UAAIA,GAAJ,CAAQM,sBAAsB,CAA9B,EAAiC,MAAO,gBAAesL,MAAMxE,WAAY,OAAM,KAAKhE,EAAG,EAAvF;AACD;;AACD,QAAIwI,MAAMC,qBAAN,IAA+B,CAAC5E,YAAY4E,qBAAhD,EAAuE;AACrE5E,kBAAY4E,qBAAZ,GACE5E,YAAY4E,qBAAZ,IAAqCD,MAAMC,qBAA3C,GACIrL,OAAO+C,MAAP,CAAc,EAAd,EAAkBqI,MAAMC,qBAAxB,EAA+C5E,YAAY4E,qBAA3D,CADJ,GAEID,MAAMC,qBAAN,IAA+B5E,YAAY4E,qBAHjD;AAIA7L,UAAIA,GAAJ,CACEM,sBAAsB,CADxB,EAEE,MACE,4BACC,GAAEE,OAAOsL,IAAP,CAAYF,MAAMC,qBAAlB,EAAyCE,IAAzC,CAA8C,IAA9C,CAAoD,OAAM,KAAK3I,EAAG,EAJzE;AAMD;;AACD,QAAIwI,MAAMzB,YAAN,IAAsB,CAAClD,YAAYkD,YAAvC,EAAqD;AACnDlD,kBAAYkD,YAAZ,GAA2ByB,MAAMzB,YAAjC;AACAnK,UAAIA,GAAJ,CAAQM,sBAAsB,CAA9B,EAAiC,MAAO,iBAAgBsL,MAAMzB,YAAa,OAAM,KAAK/G,EAAG,EAAzF;AACD;;AACD,QAAIwI,MAAMxB,eAAN,IAAyB,CAACnD,YAAYmD,eAA1C,EAA2D;AACzDnD,kBAAYmD,eAAZ,GAA8BwB,MAAMxB,eAApC;AACApK,UAAIA,GAAJ,CACEM,sBAAsB,CADxB,EAEE,MAAO,oBAAmBsL,MAAMxB,eAAgB,OAAM,KAAKhH,EAAG,EAFhE;AAID,KA/BmB,CAiCpB;;;AACA,UAAM8D,qBACJ0E,MAAMxE,WAAN,IAAqBwE,MAAMC,qBAA3B,IAAoDD,MAAMzB,YAD5D;AAEAlD,gBAAYC,kBAAZ,GAAiCD,YAAYC,kBAAZ,IAAkCA,kBAAnE;AACAD,gBAAY+E,gBAAZ,GACE/E,YAAY+E,gBAAZ,IAAgC9E,kBAAhC,IAAsD0E,MAAMxB,eAD9D;AAED;AACD;AAEA;;;AACAa,qBAAmB;AACjB,SAAKtH,aAAL,CAAmBsD,WAAnB,GAAiC;AAC/B;AACAG,mBAAa,KAFkB;AAG/B+C,oBAAc,KAHiB;AAI/B0B,6BAAuB,KAJQ;AAK/BzB,uBAAiB,KALc;AAO/B;AACAlD,0BAAoB,KARW;AAS/B8E,wBAAkB;AATa,KAAjC;AAWD;;AAEDC,qBAAmB;AACjB,UAAML,QAAQ,KAAKjI,aAAL,CAAmBsD,WAAjC;AACA,WAAQ;EACV2E,MAAMxE,WAAN,GAAoB,OAApB,GAA8B,EAAG;EACjCwE,MAAMzB,YAAN,GAAqB,QAArB,GAAgC,EAAG;EACnCyB,MAAMC,qBAAN,GAA8B,WAA9B,GAA4C,EAAG;EAC/CD,MAAMxB,eAAN,GAAwB,UAAxB,GAAqC,EAAG;CAJtC;AAMD,GA3iB0C,CA6iB3C;AACA;AACA;;;AACAtK,YAAUoM,QAAV,EAAoBlF,QAApB,EAA8B;AAC5B,UAAMC,cAAcnH,UAAUoM,QAAV,EAAoBlF,QAApB,CAApB,CAD4B,CAG5B;;AACA,QAAIC,YAAY4E,qBAAhB,EAAuC;AACrC,WAAK,MAAMM,GAAX,IAAkBlF,YAAY4E,qBAA9B,EAAqD;AACnD,YAAI5E,YAAY4E,qBAAZ,CAAkCM,GAAlC,CAAJ,EAA4C;AAC1C,eAAKC,oBAAL,CAA0BD,GAA1B;AACD;AACF;AACF;;AAED,WAAO,KAAKjC,cAAL,CAAoBjD,WAApB,CAAP;AACD,GA7jB0C,CA+jB3C;;;AAEA1C,qBAAmB;AACjB,WAAO;AACLpB,aAAO,KAAKA,KADP;AAEL6D,gBAAU,KAAKrD,aAAL,CAAmB0I,WAAnB,EAFL;AAGLvI,eAAS,KAAKA,OAHT;AAILmD,mBAAa,KAAKtD,aAAL,CAAmBsD;AAJ3B,KAAP;AAMD,GAxkB0C,CA0kB3C;;;AACA7C,kBAAgBD,gBAAhB,EAAkC;AAChC;AACA;AACA,QAAI,CAAC,KAAKR,aAAV,EAAyB;AACvB,aAAO,KAAP;AACD;;AAED,QAAID,SAAS,KAAb;AACAA,aAASA,UAAW,KAAKC,aAAL,CAAmBC,WAAnB,IAAkC,KAAKR,EAA3D;AACA,SAAKO,aAAL,CAAmBC,WAAnB,GAAiC,KAAKD,aAAL,CAAmBC,WAAnB,IAAkC,CAACO,gBAApE,CATgC,CAWhC;;AACA,UAAMW,mBAAmB,KAAKD,mBAAL,EAAzB;AACA,UAAMyH,8BACJxH,oBAAoBA,iBAAiBZ,cAAjB,CAAgC;AAACC;AAAD,KAAhC,CADtB;AAEAT,aAASA,UAAU4I,2BAAnB;;AAEA,SAAK,MAAM3H,KAAX,IAAoB,KAAKF,SAAL,EAApB,EAAsC;AACpC,UAAI8H,mBAAmB5H,MAAMT,cAAN,CAAqB;AAACC;AAAD,OAArB,CAAvB;;AACA,UAAIoI,oBAAoB,OAAOA,gBAAP,KAA4B,QAApD,EAA8D;AAC5DA,2BAAoB,SAAQ5H,MAAMvB,EAAG,EAArC;AACD;;AACDM,eAASA,UAAU6I,gBAAnB;AACD;;AAED,WAAO7I,MAAP;AACD;;AAEDuG,eAAa;AACX9J,WAAO,CAAC,KAAKwD,aAAN,IAAuB,CAAC,KAAKH,KAApC;AAEA,UAAMsB,mBAAmB,IAAIlF,gBAAJ,CAAqB,KAAKkE,OAAL,CAAakG,EAAlC,EAAsC;AAC7D5G,UAAI,KAAKD,KAAL,CAAWC,EAD8C;AAE7DoJ,aAAO,KAAK1I,OAAL,CAAa0I;AAFyC,KAAtC,CAAzB,CAHW,CAQX;AACA;AACA;;AACA1H,qBAAiB2H,YAAjB,CAA8B;AAC5BtD,6BAAuB;AACrBtI,cAAMZ,GAAGyM,aADY;AAErB1D,cAAM,CAFe;AAGrBb,gBAAQ,KAAKW;AAHQ;AADK,KAA9B;AAQA,SAAKnF,aAAL,GAAqB,IAAItD,UAAJ,CAAe;AAClCyE,sBADkC;AAElCE,aAAO;AAF2B,KAAf,CAArB;AAKA,SAAKxB,KAAL,GAAa,EAAb,CAxBW,CAyBX;;AACA,SAAKA,KAAL,CAAWsB,gBAAX,GAA8B,KAAKD,mBAAL,EAA9B;AAEA,SAAKlB,aAAL,CAAmBgJ,kBAAnB,GAAwC,KAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CAAxC,CA5BW,CA8BX;;AACA,SAAKlJ,aAAL,CAAmBmJ,aAAnB,CAAiC,KAAK3J,KAAtC;AACD,GAvoB0C,CAyoB3C;;;AACA4J,iBAAeC,QAAf,EAAyB;AAAA,UAChBxJ,KADgB,GACQwJ,QADR,CAChBxJ,KADgB;AAAA,UACTG,aADS,GACQqJ,QADR,CACTrJ,aADS;AAEvBxD,WAAOqD,SAASG,aAAhB;;AAEA,QAAI,SAASqJ,QAAb,EAAuB;AACrB;AACD,KANsB,CAQvB;;;AACA,SAAKrJ,aAAL,GAAqBA,aAArB;AACA,SAAKA,aAAL,CAAmBsJ,SAAnB,GAA+B,IAA/B,CAVuB,CAYvB;;AACA,SAAKzJ,KAAL,GAAaA,KAAb,CAbuB,CAcvB;;AACAA,UAAMwB,KAAN,GAAc,IAAd,CAfuB,CAgBvB;AACA;AAEA;;AACA,SAAKrB,aAAL,CAAmBmJ,aAAnB,CAAiC,KAAK3J,KAAtC,EApBuB,CAsBvB;;AACA,SAAK,MAAMwB,KAAX,IAAoB,KAAKF,SAAL,EAApB,EAAsC;AACpCE,YAAMuI,QAAN,CAAelI,KAAf,GAAuB,IAAvB;AACD,KAzBsB,CA2BvB;;;AACA,SAAKrB,aAAL,CAAmBmJ,aAAnB,CAAiC,KAAK3J,KAAtC;AAEA,SAAKrD,SAAL,CAAe,KAAKqD,KAApB,EAA2B,KAAKQ,aAAL,CAAmB0I,WAAnB,EAA3B;AACD;;AAEDO,wBAAsB;AACpB,SAAK9M,SAAL,CAAe,KAAKqD,KAApB,EAA2B,KAAKQ,aAAL,CAAmB0I,WAAnB,EAA3B;AACA,SAAKxI,mBAAL;AACD,GA9qB0C,CAgrB3C;;;AACAuI,uBAAqBe,QAArB,EAA+B;AAC7B,SAAKrF,mBAAL,CAAyBqF,QAAzB;AACD,GAnrB0C,CAqrB3C;;;AACAC,qBAAmBC,YAAnB,EAAiCC,SAAjC,EAA4C;AAC1C,UAAMxM,QAAQ,KAAKqC,KAAL,CAAWkK,YAAX,CAAd;;AACA,QAAIvM,UAAUW,SAAd,EAAyB;AACvB,YAAM,IAAIsF,KAAJ,CAAW,YAAWsG,YAAa,uBAAsB,IAAK,EAA9D,CAAN;AACD;;AACD,QAAIC,aAAa,CAACA,UAAUxM,KAAV,CAAlB,EAAoC;AAClC,YAAM,IAAIiG,KAAJ,CAAW,gBAAesG,YAAa,aAAY,IAAK,EAAxD,CAAN;AACD;AACF;;AAEDvC,wBAAsB;AACpB,UAAMzI,WAAW;AACf;AACAT,eAAS2L,KAAKC,GAAL,CAAS,KAAKrK,KAAL,CAAWvB,OAApB,EAA6B,IAAI,GAAjC,CAFM;AAGf6L,WAAK;AAHU,KAAjB;;AAKA,SAAK,MAAM9I,KAAX,IAAoB,KAAKF,SAAL,EAApB,EAAsC;AACpCE,YAAM+I,WAAN,CAAkBrL,QAAlB;AACD,KARmB,CAUpB;;;AACA,SAAKoB,cAAL;AACD;;AAEDsH,0BAAwB;AACtB,UAAM4C,WAAW;AACfC,6BAAuB,KAAKzK,KAAL,CAAWP;AADnB,KAAjB;;AAGA,SAAK,MAAM+B,KAAX,IAAoB,KAAKF,SAAL,EAApB,EAAsC;AACpCE,YAAM4G,oBAAN,CAA2BoC,QAA3B;AACD;AACF,GArtB0C,CAutB3C;AAEA;;;AACAD,cAAYG,UAAZ,EAAwB;AACtB,SAAK,MAAMlJ,KAAX,IAAoB,KAAKF,SAAL,EAApB,EAAsC;AACpCE,YAAM+I,WAAN,CAAkBG,UAAlB;AACD,KAHqB,CAKtB;;;AACA,SAAKpK,cAAL;AACAzD,QAAIiG,UAAJ,CAAe,mBAAf,EAAoC,mBAApC;AACD;;AAluB0C;AAquB7CpD,MAAMI,SAAN,GAAkB,OAAlB;AACAJ,MAAMlC,YAAN,GAAqBA,YAArB","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable react/no-direct-mutation-state */\n/* global fetch */\n/* global window */\nimport {COORDINATE_SYSTEM} from './constants';\nimport AttributeManager from './attribute-manager';\nimport {removeLayerInSeer} from './seer-integration';\nimport {diffProps} from '../lifecycle/props';\nimport {count} from '../utils/count';\nimport log from '../utils/log';\nimport {GL, withParameters} from 'luma.gl';\nimport assert from '../utils/assert';\n\nimport Component from '../lifecycle/component';\nimport LayerState from './layer-state';\n\nconst LOG_PRIORITY_UPDATE = 1;\n\nconst EMPTY_ARRAY = Object.freeze([]);\nconst noop = () => {};\n\nconst defaultProps = {\n  // data: Special handling for null, see below\n  data: {type: 'data', value: EMPTY_ARRAY, async: true},\n  dataComparator: null,\n  dataTransform: data => data,\n  fetch: url => fetch(url).then(response => response.json()),\n  updateTriggers: {}, // Update triggers: a core change detection mechanism in deck.gl\n  numInstances: undefined,\n\n  visible: true,\n  pickable: false,\n  opacity: {type: 'number', min: 0, max: 1, value: 0.8},\n\n  onHover: noop,\n  onClick: noop,\n\n  coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\n  coordinateOrigin: [0, 0, 0],\n\n  parameters: {},\n  uniforms: {},\n  framebuffer: null,\n\n  animation: null, // Passed prop animation functions to evaluate props\n\n  // Offset depth based on layer index to avoid z-fighting.\n  // Negative values pull layer towards the camera\n  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\n  getPolygonOffset: ({layerIndex}) => [0, -layerIndex * 100],\n\n  // Selection/Highlighting\n  highlightedObjectIndex: null,\n  autoHighlight: false,\n  highlightColor: [0, 0, 128, 128]\n};\n\nexport default class Layer extends Component {\n  toString() {\n    const className = this.constructor.layerName || this.constructor.name;\n    return `${className}({id: '${this.props.id}'})`;\n  }\n\n  // Public API\n\n  // Updates selected state members and marks the object for redraw\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n    this.setNeedsRedraw();\n  }\n\n  // Sets the redraw flag for this layer, will trigger a redraw next animation frame\n  setNeedsRedraw(redraw = true) {\n    if (this.internalState) {\n      this.internalState.needsRedraw = redraw;\n    }\n  }\n\n  // This layer needs a deep update\n  // TODO - Need to align with existing needsUpdate before uncommenting\n  // For now async props will call layerManager directly\n  setLayerNeedsUpdate() {\n    this.context.layerManager.setNeedsUpdate(String(this));\n  }\n\n  // Checks state of attributes and model\n  getNeedsRedraw({clearRedrawFlags = false} = {}) {\n    return this._getNeedsRedraw(clearRedrawFlags);\n  }\n\n  // Checks if layer attributes needs updating\n  needsUpdate() {\n    // Call subclass lifecycle method\n    return this.shouldUpdateState(this._getUpdateParams());\n    // End lifecycle method\n  }\n\n  // Returns true if the layer is pickable and visible.\n  isPickable() {\n    return this.props.pickable && this.props.visible;\n  }\n\n  // Return an array of models used by this layer, can be overriden by layer subclass\n  getModels() {\n    return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n  }\n\n  // TODO - Gradually phase out, does not support multi model layers\n  getSingleModel() {\n    return this.state && this.state.model;\n  }\n\n  getAttributeManager() {\n    return this.internalState && this.internalState.attributeManager;\n  }\n\n  // Returns the most recent layer that matched to this state\n  // (When reacting to an async event, this layer may no longer be the latest)\n  getCurrentLayer() {\n    return this.internalState && this.internalState.layer;\n  }\n\n  // Use iteration (the only required capability on data) to get first element\n  // deprecated since we are effectively only supporting Arrays\n  getFirstObject() {\n    const {data} = this.props;\n    for (const object of data) {\n      return object;\n    }\n    return null;\n  }\n\n  // PROJECTION METHODS\n\n  // Projects a point with current map state (lat, lon, zoom, pitch, bearing)\n  // TODO - need to be extended to work with COORDINATE_SYSTEM.METERS,IDENTITY\n  // TODO - need to be extended to work with multiple `views`\n  project(lngLat) {\n    const {viewport} = this.context;\n    assert(Array.isArray(lngLat));\n    return viewport.project(lngLat);\n  }\n\n  unproject(xy) {\n    const {viewport} = this.context;\n    assert(Array.isArray(xy));\n    return viewport.unproject(xy);\n  }\n\n  projectFlat(lngLat) {\n    const {viewport} = this.context;\n    assert(Array.isArray(lngLat));\n    return viewport.projectFlat(lngLat);\n  }\n\n  unprojectFlat(xy) {\n    const {viewport} = this.context;\n    assert(Array.isArray(xy));\n    return viewport.unprojectFlat(xy);\n  }\n\n  is64bitEnabled() {\n    if (this.props.fp64) {\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        return true;\n      }\n      log.once(\n        0,\n        `64-bit mode only works with coordinateSystem set to\n        COORDINATE_SYSTEM.LNGLAT. Rendering in 32-bit mode instead`\n      );\n    }\n\n    return false;\n  }\n\n  // TODO - needs to refer to context for devicePixels setting\n  screenToDevicePixels(screenPixels) {\n    log.deprecated('screenToDevicePixels', 'DeckGL prop useDevicePixels for conversion')();\n    const devicePixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio : 1;\n    return screenPixels * devicePixelRatio;\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  // @return {Array} - a black color\n  nullPickingColor() {\n    return [0, 0, 0];\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  encodePickingColor(i) {\n    assert((((i + 1) >> 24) & 255) === 0, 'index out of picking color range');\n    return [(i + 1) & 255, ((i + 1) >> 8) & 255, (((i + 1) >> 8) >> 8) & 255];\n  }\n\n  // Returns the index corresponding to a picking color that doesn't match any subfeature\n  // @param {Uint8Array} color - color array to be decoded\n  // @return {Array} - the decoded picking color\n  decodePickingColor(color) {\n    assert(color instanceof Uint8Array);\n    const [i1, i2, i3] = color;\n    // 1 was added to seperate from no selection\n    const index = i1 + i2 * 256 + i3 * 65536 - 1;\n    return index;\n  }\n\n  // //////////////////////////////////////////////////\n  // LIFECYCLE METHODS, overridden by the layer subclasses\n\n  // Called once to set up the initial state\n  // App can create WebGL resources\n  initializeState() {\n    throw new Error(`Layer ${this} has not defined initializeState`);\n  }\n\n  // Let's layer control if updateState should be called\n  shouldUpdateState({oldProps, props, context, changeFlags}) {\n    return changeFlags.propsOrDataChanged;\n  }\n\n  // Default implementation, all attributes will be invalidated and updated\n  // when data changes\n  updateState({oldProps, props, context, changeFlags}) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.dataChanged && attributeManager) {\n      attributeManager.invalidateAll();\n    }\n  }\n\n  // Called once when layer is no longer matched and state will be discarded\n  // App can destroy WebGL resources here\n  finalizeState() {\n    for (const model of this.getModels()) {\n      model.delete();\n    }\n    this.getAttributeManager().finalize();\n  }\n\n  // If state has a model, draw it with supplied uniforms\n  draw(opts) {\n    for (const model of this.getModels()) {\n      model.draw(opts);\n    }\n  }\n\n  // called to populate the info object that is passed to the event handler\n  // @return null to cancel event\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n\n    if (index >= 0) {\n      // If props.data is an indexable array, get the object\n      if (Array.isArray(this.props.data)) {\n        info.object = this.props.data[index];\n      }\n    }\n\n    return info;\n  }\n\n  // END LIFECYCLE METHODS\n  // //////////////////////////////////////////////////\n\n  // INTERNAL METHODS\n\n  // Default implementation of attribute invalidation, can be redefined\n  invalidateAttribute(name = 'all', diffReason = '') {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    if (name === 'all') {\n      log.log(LOG_PRIORITY_UPDATE, `updateTriggers invalidating all attributes: ${diffReason}`)();\n      attributeManager.invalidateAll();\n    } else {\n      log.log(\n        LOG_PRIORITY_UPDATE,\n        `updateTriggers invalidating attribute ${name}: ${diffReason}`\n      )();\n      attributeManager.invalidate(name);\n    }\n  }\n\n  // Calls attribute manager to update any WebGL attributes\n  updateAttributes(props) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    // Figure out data length\n    const numInstances = this.getNumInstances(props);\n\n    attributeManager.update({\n      data: props.data,\n      numInstances,\n      props,\n      transitions: props.transitions,\n      buffers: props,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    const model = this.getSingleModel();\n    if (model) {\n      const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n      model.setAttributes(changedAttributes);\n    }\n  }\n\n  // Update attribute transition\n  updateTransition() {\n    const model = this.getSingleModel();\n    const attributeManager = this.getAttributeManager();\n    const isInTransition = attributeManager && attributeManager.updateTransition();\n\n    if (model && isInTransition) {\n      model.setAttributes(attributeManager.getChangedAttributes({transition: true}));\n    }\n  }\n\n  calculateInstancePickingColors(attribute, {numInstances}) {\n    const {value, size} = attribute;\n    // add 1 to index to seperate from no selection\n    for (let i = 0; i < numInstances; i++) {\n      const pickingColor = this.encodePickingColor(i);\n      value[i * size + 0] = pickingColor[0];\n      value[i * size + 1] = pickingColor[1];\n      value[i * size + 2] = pickingColor[2];\n    }\n  }\n\n  // Sets the specified instanced picking color to null picking color. Used for multi picking.\n  _clearInstancePickingColor(color) {\n    const {instancePickingColors} = this.getAttributeManager().attributes;\n    const {state: attribute} = instancePickingColors;\n    const {value, size} = attribute;\n\n    const i = this.decodePickingColor(color);\n    value[i * size + 0] = 0;\n    value[i * size + 1] = 0;\n    value[i * size + 2] = 0;\n\n    // TODO: Optimize this to use sub-buffer update!\n    const models = this.getModels();\n    if (models) {\n      models.forEach(model => model.setAttributes({instancePickingColors: attribute}));\n    }\n  }\n\n  // Sets all occurrences of the specified picking color to null picking color. Used for multi picking.\n  _clearPickingColor(color) {\n    const {pickingColors} = this.getAttributeManager().attributes;\n    const attribute = pickingColors.state;\n    const {value} = attribute;\n\n    for (let i = 0; i < value.length; i += 3) {\n      if (value[i + 0] === color[0] && value[i + 1] === color[1] && value[i + 2] === color[2]) {\n        value[i + 0] = 0;\n        value[i + 1] = 0;\n        value[i + 2] = 0;\n      }\n    }\n\n    // TODO: Optimize this to use sub-buffer update!\n    const models = this.getModels();\n    if (models) {\n      models.forEach(model => model.setAttributes({pickingColors: attribute}));\n    }\n  }\n\n  // This method figures out if we use instance colors or not\n  // and calls _clearInstancePickingColor or _clearPickingColor\n  clearPickingColor(color) {\n    if (this.getAttributeManager().attributes.pickingColors) {\n      this._clearPickingColor(color);\n    } else {\n      this._clearInstancePickingColor(color);\n    }\n  }\n\n  copyPickingColors() {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    return new Uint8ClampedArray(colors.value);\n  }\n\n  restorePickingColors(value) {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    colors.value.set(value);\n    colors.setNeedsUpdate();\n    this.updateAttributes(this.props);\n  }\n\n  // Deduces numer of instances. Intention is to support:\n  // - Explicit setting of numInstances\n  // - Auto-deduction for ES6 containers that define a size member\n  // - Auto-deduction for Classic Arrays via the built-in length attribute\n  // - Auto-deduction via arrays\n  getNumInstances(props) {\n    props = props || this.props;\n\n    // First check if the layer has set its own value\n    if (this.state && this.state.numInstances !== undefined) {\n      return this.state.numInstances;\n    }\n\n    // Check if app has provided an explicit value\n    if (props.numInstances !== undefined) {\n      return props.numInstances;\n    }\n\n    // Use container library to get a count for any ES6 container or object\n    const {data} = this.props;\n    return count(data);\n  }\n\n  // LAYER MANAGER API\n  // Should only be called by the deck.gl LayerManager class\n\n  // Called by layer manager when a new layer is found\n  /* eslint-disable max-statements */\n  _initialize() {\n    assert(this.context.gl);\n\n    this._initState();\n\n    // Call subclass lifecycle methods\n    this.initializeState(this.context);\n    // End subclass lifecycle methods\n\n    // TODO deprecated, for backwards compatibility with older layers\n    // in case layer resets state\n    this.state.attributeManager = this.getAttributeManager();\n\n    // initializeState callback tends to clear state\n    this.setChangeFlags({dataChanged: true, propsChanged: true, viewportChanged: true});\n\n    this._updateState();\n\n    const model = this.getSingleModel();\n    if (model) {\n      model.id = this.props.id;\n      model.program.id = `${this.props.id}-program`;\n      model.geometry.id = `${this.props.id}-geometry`;\n      model.setAttributes(this.getAttributeManager().getAttributes());\n    }\n  }\n\n  // Called by layer manager\n  // if this layer is new (not matched with an existing layer) oldProps will be empty object\n  _update() {\n    // Call subclass lifecycle method\n    const stateNeedsUpdate = this.needsUpdate();\n    // End lifecycle method\n\n    if (stateNeedsUpdate) {\n      this._updateState();\n    }\n  }\n  /* eslint-enable max-statements */\n\n  // Common code for _initialize and _update\n  _updateState() {\n    const updateParams = this._getUpdateParams();\n\n    // Call subclass lifecycle methods\n    this.updateState(updateParams);\n\n    // Render or update previously rendered sublayers\n    if (this.isComposite) {\n      this._renderLayers(updateParams);\n    }\n    // End subclass lifecycle methods\n\n    // Add any subclass attributes\n    this.updateAttributes(this.props);\n    this._updateBaseUniforms();\n    this._updateModuleSettings();\n\n    // Note: Automatic instance count update only works for single layers\n    if (this.state.model) {\n      this.state.model.setInstanceCount(this.getNumInstances());\n    }\n\n    this.clearChangeFlags();\n    this.internalState.resetOldProps();\n  }\n\n  // Called by manager when layer is about to be disposed\n  // Note: not guaranteed to be called on application shutdown\n  _finalize() {\n    assert(this.internalState && this.state);\n\n    // Call subclass lifecycle method\n    this.finalizeState(this.context);\n    // End lifecycle method\n    removeLayerInSeer(this.id);\n  }\n\n  // Calculates uniforms\n  drawLayer({moduleParameters = null, uniforms = {}, parameters = {}}) {\n    if (!uniforms.picking_uActive) {\n      this.updateTransition();\n    }\n\n    // TODO/ib - hack move to luma Model.draw\n    if (moduleParameters) {\n      for (const model of this.getModels()) {\n        model.updateModuleSettings(moduleParameters);\n      }\n    }\n\n    // Apply polygon offset to avoid z-fighting\n    // TODO - move to draw-layers\n    const {getPolygonOffset} = this.props;\n    const offsets = (getPolygonOffset && getPolygonOffset(uniforms)) || [0, 0];\n    parameters.polygonOffset = offsets;\n\n    // Call subclass lifecycle method\n    withParameters(this.context.gl, parameters, () => {\n      this.draw({moduleParameters, uniforms, parameters, context: this.context});\n    });\n    // End lifecycle method\n  }\n\n  // {uniforms = {}, ...opts}\n  pickLayer(opts) {\n    // Call subclass lifecycle method\n    return this.getPickingInfo(opts);\n    // End lifecycle method\n  }\n\n  // Helper methods\n  getChangeFlags() {\n    return this.internalState.changeFlags;\n  }\n\n  // Dirty some change flags, will be handled by updateLayer\n  /* eslint-disable complexity */\n  setChangeFlags(flags) {\n    this.internalState.changeFlags = this.internalState.changeFlags || {};\n    const changeFlags = this.internalState.changeFlags;\n\n    // Update primary flags\n    if (flags.dataChanged && !changeFlags.dataChanged) {\n      changeFlags.dataChanged = flags.dataChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `dataChanged: ${flags.dataChanged} in ${this.id}`)();\n    }\n    if (flags.updateTriggersChanged && !changeFlags.updateTriggersChanged) {\n      changeFlags.updateTriggersChanged =\n        changeFlags.updateTriggersChanged && flags.updateTriggersChanged\n          ? Object.assign({}, flags.updateTriggersChanged, changeFlags.updateTriggersChanged)\n          : flags.updateTriggersChanged || changeFlags.updateTriggersChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 1,\n        () =>\n          'updateTriggersChanged: ' +\n          `${Object.keys(flags.updateTriggersChanged).join(', ')} in ${this.id}`\n      )();\n    }\n    if (flags.propsChanged && !changeFlags.propsChanged) {\n      changeFlags.propsChanged = flags.propsChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `propsChanged: ${flags.propsChanged} in ${this.id}`)();\n    }\n    if (flags.viewportChanged && !changeFlags.viewportChanged) {\n      changeFlags.viewportChanged = flags.viewportChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 2,\n        () => `viewportChanged: ${flags.viewportChanged} in ${this.id}`\n      )();\n    }\n\n    // Update composite flags\n    const propsOrDataChanged =\n      flags.dataChanged || flags.updateTriggersChanged || flags.propsChanged;\n    changeFlags.propsOrDataChanged = changeFlags.propsOrDataChanged || propsOrDataChanged;\n    changeFlags.somethingChanged =\n      changeFlags.somethingChanged || propsOrDataChanged || flags.viewportChanged;\n  }\n  /* eslint-enable complexity */\n\n  // Clear all changeFlags, typically after an update\n  clearChangeFlags() {\n    this.internalState.changeFlags = {\n      // Primary changeFlags, can be strings stating reason for change\n      dataChanged: false,\n      propsChanged: false,\n      updateTriggersChanged: false,\n      viewportChanged: false,\n\n      // Derived changeFlags\n      propsOrDataChanged: false,\n      somethingChanged: false\n    };\n  }\n\n  printChangeFlags() {\n    const flags = this.internalState.changeFlags;\n    return `\\\n${flags.dataChanged ? 'data ' : ''}\\\n${flags.propsChanged ? 'props ' : ''}\\\n${flags.updateTriggersChanged ? 'triggers ' : ''}\\\n${flags.viewportChanged ? 'viewport' : ''}\\\n`;\n  }\n\n  // Compares the layers props with old props from a matched older layer\n  // and extracts change flags that describe what has change so that state\n  // can be update correctly with minimal effort\n  diffProps(newProps, oldProps) {\n    const changeFlags = diffProps(newProps, oldProps);\n\n    // iterate over changedTriggers\n    if (changeFlags.updateTriggersChanged) {\n      for (const key in changeFlags.updateTriggersChanged) {\n        if (changeFlags.updateTriggersChanged[key]) {\n          this._activeUpdateTrigger(key);\n        }\n      }\n    }\n\n    return this.setChangeFlags(changeFlags);\n  }\n\n  // PRIVATE METHODS\n\n  _getUpdateParams() {\n    return {\n      props: this.props,\n      oldProps: this.internalState.getOldProps(),\n      context: this.context,\n      changeFlags: this.internalState.changeFlags\n    };\n  }\n\n  // Checks state of attributes and model\n  _getNeedsRedraw(clearRedrawFlags) {\n    // this method may be called by the render loop as soon a the layer\n    // has been created, so guard against uninitialized state\n    if (!this.internalState) {\n      return false;\n    }\n\n    let redraw = false;\n    redraw = redraw || (this.internalState.needsRedraw && this.id);\n    this.internalState.needsRedraw = this.internalState.needsRedraw && !clearRedrawFlags;\n\n    // TODO - is attribute manager needed? - Model should be enough.\n    const attributeManager = this.getAttributeManager();\n    const attributeManagerNeedsRedraw =\n      attributeManager && attributeManager.getNeedsRedraw({clearRedrawFlags});\n    redraw = redraw || attributeManagerNeedsRedraw;\n\n    for (const model of this.getModels()) {\n      let modelNeedsRedraw = model.getNeedsRedraw({clearRedrawFlags});\n      if (modelNeedsRedraw && typeof modelNeedsRedraw !== 'string') {\n        modelNeedsRedraw = `model ${model.id}`;\n      }\n      redraw = redraw || modelNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  _initState() {\n    assert(!this.internalState && !this.state);\n\n    const attributeManager = new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n\n    // All instanced layers get instancePickingColors attribute by default\n    // Their shaders can use it to render a picking scene\n    // TODO - this slightly slows down non instanced layers\n    attributeManager.addInstanced({\n      instancePickingColors: {\n        type: GL.UNSIGNED_BYTE,\n        size: 3,\n        update: this.calculateInstancePickingColors\n      }\n    });\n\n    this.internalState = new LayerState({\n      attributeManager,\n      layer: this\n    });\n\n    this.state = {};\n    // TODO deprecated, for backwards compatibility with older layers\n    this.state.attributeManager = this.getAttributeManager();\n\n    this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n  }\n\n  // Called by layer manager to transfer state from an old layer\n  _transferState(oldLayer) {\n    const {state, internalState} = oldLayer;\n    assert(state && internalState);\n\n    if (this === oldLayer) {\n      return;\n    }\n\n    // Move internalState\n    this.internalState = internalState;\n    this.internalState.component = this;\n\n    // Move state\n    this.state = state;\n    // Deprecated: layer references on `state`\n    state.layer = this;\n    // We keep the state ref on old layers to support async actions\n    // oldLayer.state = null;\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n\n    // Update model layer reference\n    for (const model of this.getModels()) {\n      model.userData.layer = this;\n    }\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n\n    this.diffProps(this.props, this.internalState.getOldProps());\n  }\n\n  _onAsyncPropUpdated() {\n    this.diffProps(this.props, this.internalState.getOldProps());\n    this.setLayerNeedsUpdate();\n  }\n\n  // Operate on each changed triggers, will be called when an updateTrigger changes\n  _activeUpdateTrigger(propName) {\n    this.invalidateAttribute(propName);\n  }\n\n  //  Helper to check that required props are supplied\n  _checkRequiredProp(propertyName, condition) {\n    const value = this.props[propertyName];\n    if (value === undefined) {\n      throw new Error(`Property ${propertyName} undefined in layer ${this}`);\n    }\n    if (condition && !condition(value)) {\n      throw new Error(`Bad property ${propertyName} in layer ${this}`);\n    }\n  }\n\n  _updateBaseUniforms() {\n    const uniforms = {\n      // apply gamma to opacity to make it visually \"linear\"\n      opacity: Math.pow(this.props.opacity, 1 / 2.2),\n      ONE: 1.0\n    };\n    for (const model of this.getModels()) {\n      model.setUniforms(uniforms);\n    }\n\n    // TODO - set needsRedraw on the model(s)?\n    this.setNeedsRedraw();\n  }\n\n  _updateModuleSettings() {\n    const settings = {\n      pickingHighlightColor: this.props.highlightColor\n    };\n    for (const model of this.getModels()) {\n      model.updateModuleSettings(settings);\n    }\n  }\n\n  // DEPRECATED METHODS\n\n  // Updates selected state members and marks the object for redraw\n  setUniforms(uniformMap) {\n    for (const model of this.getModels()) {\n      model.setUniforms(uniformMap);\n    }\n\n    // TODO - set needsRedraw on the model(s)?\n    this.setNeedsRedraw();\n    log.deprecated('layer.setUniforms', 'model.setUniforms')();\n  }\n}\n\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;\n"],"file":"layer.js"}