{"version":3,"sources":["../../../src/lib/layer-manager.js"],"names":["assert","Framebuffer","ShaderCache","seer","Layer","drawLayers","pickObject","pickVisibleObjects","LIFECYCLE","ViewManager","MapView","log","flatten","Stats","setPropOverrides","layerEditListener","seerInitListener","initLayerInSeer","updateLayerInSeer","LOG_PRIORITY_LIFECYCLE","LOG_PRIORITY_LIFECYCLE_MINOR","INITIAL_CONTEXT","Object","seal","layerManager","gl","useDevicePixels","stats","viewport","shaderCache","pickingFBO","lastPickedInfo","index","layerId","userData","layerName","layer","LayerManager","constructor","eventManager","lastRenderedLayers","layers","context","assign","_cachePrograms","id","viewManager","layerFilter","drawPickingColors","_needsRedraw","_needsUpdate","_pickingRadius","_eventManager","_onLayerClick","_onLayerHover","_onClick","bind","_onPointerMove","_onPointerLeave","_pickAndCallback","_initSeer","_editSeer","width","height","_initEventHandling","setViews","finalize","removeListener","needsRedraw","clearRedrawFlags","_checkIfNeedsRedraw","needsUpdate","setNeedsRedraw","reason","setNeedsUpdate","getLayers","layerIds","filter","find","indexOf","getViews","views","getViewports","viewports","length","_activateViewport","setProps","props","_setEventHandlingParameters","setSize","setViewState","viewState","setLayers","newLayers","Boolean","_updateLayers","oldLayers","error","generatedLayers","updateLayers","pass","redrawReason","onViewportActive","x","y","mode","radius","depth","_getPickingBuffer","pickObjects","setParameters","parameters","setViewports","deprecated","setViewport","redraw","layerNeedsRedraw","getNeedsRedraw","on","click","pointermove","pointerleave","pickingRadius","onLayerClick","onLayerHover","isNaN","_validateEventHandling","oldViewport","viewportChanged","equals","setChangeFlags","_updateLayer","resize","canvas","oldLayerMap","oldLayer","warn","_updateSublayersRecursively","error2","_finalizeOldLayers","firstError","newLayer","sublayers","_initializeLayer","_transferLayerState","push","isComposite","getSubLayers","err","_finalizeLayer","_initialize","lifecycle","INITIALIZED","internalState","model","getModels","_transferState","MATCHED","AWAITING_GC","printChangeFlags","_update","AWAITING_FINALIZATION","_finalize","FINALIZED","some","pickable","event","offsetCenter","callback","leftButton","rightButton","options","pos","selectedInfos","firstInfo","info","srcEvent","forEach","payload","type","valuePath","itemKey","slice","value","map"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {Framebuffer, ShaderCache} from 'luma.gl';\nimport seer from 'seer';\nimport Layer from './layer';\nimport {drawLayers} from './draw-layers';\nimport {pickObject, pickVisibleObjects} from './pick-layers';\nimport {LIFECYCLE} from '../lifecycle/constants';\nimport ViewManager from '../views/view-manager';\nimport MapView from '../views/map-view';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\nimport {Stats} from 'probe.gl';\n\nimport {\n  setPropOverrides,\n  layerEditListener,\n  seerInitListener,\n  initLayerInSeer,\n  updateLayerInSeer\n} from './seer-integration';\n\nconst LOG_PRIORITY_LIFECYCLE = 2;\nconst LOG_PRIORITY_LIFECYCLE_MINOR = 4;\n\n// CONTEXT IS EXPOSED TO LAYERS\nconst INITIAL_CONTEXT = Object.seal({\n  layerManager: null,\n  gl: null,\n\n  // Settings\n  useDevicePixels: true, // Exposed in case custom layers need to adjust sizes\n\n  // General resources\n  stats: null, // for tracking lifecycle performance\n  viewport: null, // Current viewport, exposed to layers for project* function\n\n  // GL Resources\n  shaderCache: null,\n  pickingFBO: null, // Screen-size framebuffer that layers can reuse\n\n  // State\n  lastPickedInfo: {\n    // For callback tracking and autohighlight\n    index: -1,\n    layerId: null\n  },\n\n  userData: {} // Place for any custom app `context`\n});\n\nconst layerName = layer => (layer instanceof Layer ? `${layer}` : !layer ? 'null' : 'invalid');\n\nexport default class LayerManager {\n  // eslint-disable-next-line\n  constructor(gl, {eventManager, stats} = {}) {\n    // Currently deck.gl expects the DeckGL.layers array to be different\n    // whenever React rerenders. If the same layers array is used, the\n    // LayerManager's diffing algorithm will generate a fatal error and\n    // break the rendering.\n\n    // `this.lastRenderedLayers` stores the UNFILTERED layers sent\n    // down to LayerManager, so that `layers` reference can be compared.\n    // If it's the same across two React render calls, the diffing logic\n    // will be skipped.\n    this.lastRenderedLayers = [];\n    this.layers = [];\n\n    this.context = Object.assign({}, INITIAL_CONTEXT, {\n      layerManager: this,\n\n      gl,\n      // Enabling luma.gl Program caching using private API (_cachePrograms)\n      shaderCache: new ShaderCache({gl, _cachePrograms: true}),\n      stats: stats || new Stats({id: 'deck.gl'})\n    });\n\n    // Maps view descriptors to vieports, rebuilds when width/height/viewState/views change\n    this.viewManager = new ViewManager();\n\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = false;\n\n    // Event handling\n    this._pickingRadius = 0;\n\n    this._eventManager = null;\n    this._onLayerClick = null;\n    this._onLayerHover = null;\n    this._onClick = this._onClick.bind(this);\n    this._onPointerMove = this._onPointerMove.bind(this);\n    this._onPointerLeave = this._onPointerLeave.bind(this);\n    this._pickAndCallback = this._pickAndCallback.bind(this);\n\n    // Seer integration\n    this._initSeer = this._initSeer.bind(this);\n    this._editSeer = this._editSeer.bind(this);\n\n    // DEPRECATED\n    this.width = 100;\n    this.height = 100;\n\n    Object.seal(this);\n\n    seerInitListener(this._initSeer);\n    layerEditListener(this._editSeer);\n\n    if (eventManager) {\n      this._initEventHandling(eventManager);\n    }\n\n    // Init with default map viewport\n    this.setViews();\n  }\n\n  // Method to call when the layer manager is not needed anymore.\n  // Currently used in the <DeckGL> componentWillUnmount lifecycle to unbind Seer listeners.\n  finalize() {\n    seer.removeListener(this._initSeer);\n    seer.removeListener(this._editSeer);\n  }\n\n  // Check if a redraw is needed\n  needsRedraw({clearRedrawFlags = true} = {}) {\n    return this._checkIfNeedsRedraw(clearRedrawFlags);\n  }\n\n  // Check if a deep update of all layers is needed\n  needsUpdate() {\n    return this._needsUpdate;\n  }\n\n  // Layers will be redrawn (in next animation frame)\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n\n  // Gets an (optionally) filtered list of layers\n  getLayers({layerIds = null} = {}) {\n    // Filtering by layerId compares beginning of strings, so that sublayers will be included\n    // Dependes on the convention of adding suffixes to the parent's layer name\n    return layerIds\n      ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0))\n      : this.layers;\n  }\n\n  getViews() {\n    return this.viewManager.views;\n  }\n\n  // Get a set of viewports for a given width and height\n  getViewports() {\n    const viewports = this.viewManager.getViewports();\n    if (viewports.length) {\n      this._activateViewport(viewports[0]);\n    }\n    return viewports;\n  }\n\n  /**\n   * Set props needed for layer rendering and picking.\n   * Parameters are to be passed as a single object, with the following values:\n   * @param {Boolean} useDevicePixels\n   */\n  /* eslint-disable complexity, max-statements */\n  setProps(props) {\n    if ('eventManager' in props) {\n      this._initEventHandling(props.eventManager);\n    }\n\n    if ('pickingRadius' in props || 'onLayerClick' in props || 'onLayerHover' in props) {\n      this._setEventHandlingParameters(props);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this.viewManager.setSize(props.width, props.height);\n      this.width = props.width;\n      this.height = props.height;\n    }\n\n    if ('views' in props) {\n      this.setViews(props.views);\n    }\n\n    // TODO - support multiple view states\n    if ('viewState' in props) {\n      this.viewManager.setViewState(props.viewState);\n    }\n\n    // TODO - For now we set layers before viewports to preserve changeFlags\n    if ('layers' in props) {\n      this.setLayers(props.layers);\n    }\n\n    if ('layerFilter' in props) {\n      if (this.layerFilter !== props.layerFilter) {\n        this.layerFilter = props.layerFilter;\n        this.setNeedsRedraw('layerFilter changed');\n      }\n    }\n\n    if ('drawPickingColors' in props) {\n      if (props.drawPickingColors !== this.drawPickingColors) {\n        this.drawPickingColors = props.drawPickingColors;\n        this.setNeedsRedraw('drawPickingColors changed');\n      }\n    }\n\n    // A way for apps to add data to context that can be accessed in layers\n    if ('userData' in props) {\n      this.context.userData = props.userData;\n    }\n\n    if ('useDevicePixels' in props) {\n      this.context.useDevicePixels = props.useDevicePixels;\n    }\n  }\n  /* eslint-enable complexity, max-statements */\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  setViews(views) {\n    // For now, we default to a full screen map view port\n    // TODO - apps may want to specify an empty view list...\n    if (!views || views.length === 0) {\n      views = [new MapView({id: 'default-view'})];\n    }\n\n    this.viewManager.setViews(views);\n  }\n\n  // Supply a new layer list, initiating sublayer generation and layer matching\n  setLayers(newLayers) {\n    this.getViewports();\n    assert(this.context.viewport, 'LayerManager.updateLayers: viewport not set');\n\n    // TODO - something is generating state updates that cause rerender of the same\n    if (newLayers === this.lastRenderedLayers) {\n      log.log(3, 'Ignoring layer update due to layer array not changed')();\n      return this;\n    }\n    this.lastRenderedLayers = newLayers;\n\n    newLayers = flatten(newLayers, {filter: Boolean});\n\n    for (const layer of newLayers) {\n      layer.context = this.context;\n    }\n\n    const {error, generatedLayers} = this._updateLayers({\n      oldLayers: this.layers,\n      newLayers\n    });\n\n    this.layers = generatedLayers;\n\n    // Throw first error found, if any\n    if (error) {\n      throw error;\n    }\n    return this;\n  }\n\n  // Update layers from last cycle if `setNeedsUpdate()` has been called\n  updateLayers() {\n    // NOTE: For now, even if only some layer has changed, we update all layers\n    // to ensure that layer id maps etc remain consistent even if different\n    // sublayers are rendered\n    const reason = this.needsUpdate();\n    if (reason) {\n      this.setNeedsRedraw(`updating layers: ${reason}`);\n      // HACK - Call with a copy of lastRenderedLayers to trigger a full update\n      this.setLayers([...this.lastRenderedLayers]);\n    }\n  }\n\n  //\n  // METHODS FOR LAYERS\n  //\n\n  // Draw all layers in all views\n  drawLayers({pass = 'render to screen', redrawReason = 'unknown reason'} = {}) {\n    const {drawPickingColors} = this;\n    const {gl, useDevicePixels} = this.context;\n\n    // render this viewport\n    drawLayers(gl, {\n      layers: this.layers,\n      viewports: this.getViewports(),\n      onViewportActive: this._activateViewport.bind(this),\n      useDevicePixels,\n      drawPickingColors,\n      pass,\n      layerFilter: this.layerFilter,\n      redrawReason\n    });\n  }\n\n  // Pick the closest info at given coordinate\n  pickObject({x, y, mode, radius = 0, layerIds, layerFilter, depth = 1}) {\n    const {gl, useDevicePixels} = this.context;\n\n    const layers = this.getLayers({layerIds});\n\n    return pickObject(gl, {\n      // User params\n      x,\n      y,\n      radius,\n      layers,\n      mode,\n      layerFilter,\n      depth,\n      // Injected params\n      viewports: this.getViewports(),\n      onViewportActive: this._activateViewport.bind(this),\n      pickingFBO: this._getPickingBuffer(),\n      lastPickedInfo: this.context.lastPickedInfo,\n      useDevicePixels\n    });\n  }\n\n  // Get all unique infos within a bounding box\n  pickObjects({x, y, width, height, layerIds, layerFilter}) {\n    const {gl, useDevicePixels} = this.context;\n\n    const layers = this.getLayers({layerIds});\n\n    return pickVisibleObjects(gl, {\n      x,\n      y,\n      width,\n      height,\n      layers,\n      layerFilter,\n      mode: 'pickObjects',\n      viewports: this.getViewports(),\n      onViewportActive: this._activateViewport.bind(this),\n      pickingFBO: this._getPickingBuffer(),\n      useDevicePixels\n    });\n  }\n\n  //\n  // DEPRECATED METHODS in V5.3\n  //\n\n  setParameters(parameters) {\n    return this.setProps(parameters);\n  }\n\n  setSize(width, height) {\n    this.setProps({width, height});\n  }\n\n  setViewState(viewState) {\n    this.setProps({viewState});\n  }\n\n  //\n  // DEPRECATED METHODS in V5.1\n  //\n\n  setViewports(viewports) {\n    log.deprecated('setViewport', 'setViews')();\n    this.setViews(viewports);\n    return this;\n  }\n\n  //\n  // DEPRECATED METHODS in V5\n  //\n\n  setViewport(viewport) {\n    log.deprecated('setViewport', 'setViews')();\n    this.setViews([viewport]);\n    return this;\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _checkIfNeedsRedraw(clearRedrawFlags) {\n    let redraw = this._needsRedraw;\n    if (clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    redraw = redraw || this.viewManager.needsRedraw();\n\n    // This layers list doesn't include sublayers, relying on composite layers\n    for (const layer of this.layers) {\n      // Call every layer to clear their flags\n      const layerNeedsRedraw = layer.getNeedsRedraw({clearRedrawFlags});\n      redraw = redraw || layerNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  /**\n   * @param {Object} eventManager   A source of DOM input events\n   */\n  _initEventHandling(eventManager) {\n    this._eventManager = eventManager;\n\n    // TODO: add/remove handlers on demand at runtime, not all at once on init.\n    // Consider both top-level handlers like onLayerClick/Hover\n    // and per-layer handlers attached to individual layers.\n    // https://github.com/uber/deck.gl/issues/634\n    this._eventManager.on({\n      click: this._onClick,\n      pointermove: this._onPointerMove,\n      pointerleave: this._onPointerLeave\n    });\n  }\n\n  // Set parameters for input event handling.\n  _setEventHandlingParameters({pickingRadius, onLayerClick, onLayerHover}) {\n    if (!isNaN(pickingRadius)) {\n      this._pickingRadius = pickingRadius;\n    }\n    if (typeof onLayerClick !== 'undefined') {\n      this._onLayerClick = onLayerClick;\n    }\n    if (typeof onLayerHover !== 'undefined') {\n      this._onLayerHover = onLayerHover;\n    }\n    this._validateEventHandling();\n  }\n\n  // Make a viewport \"current\" in layer context, updating viewportChanged flags\n  _activateViewport(viewport) {\n    const oldViewport = this.context.viewport;\n    const viewportChanged = !oldViewport || !viewport.equals(oldViewport);\n\n    if (viewportChanged) {\n      log.log(4, 'Viewport changed', viewport)();\n\n      this.context.viewport = viewport;\n\n      // Update layers states\n      // Let screen space layers update their state based on viewport\n      for (const layer of this.layers) {\n        layer.setChangeFlags({viewportChanged: 'Viewport changed'});\n        this._updateLayer(layer);\n      }\n    }\n\n    assert(this.context.viewport, 'LayerManager: viewport not set');\n\n    return this;\n  }\n\n  _getPickingBuffer() {\n    const {gl} = this.context;\n    // Create a frame buffer if not already available\n    this.context.pickingFBO = this.context.pickingFBO || new Framebuffer(gl);\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.context.pickingFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    return this.context.pickingFBO;\n  }\n\n  // Match all layers, checking for caught errors\n  // To avoid having an exception in one layer disrupt other layers\n  // TODO - mark layers with exceptions as bad and remove from rendering cycle?\n  _updateLayers({oldLayers, newLayers}) {\n    // Create old layer map\n    const oldLayerMap = {};\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log.warn(`Multiple old layers with same id ${layerName(oldLayer)}`)();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n\n    // Allocate array for generated layers\n    const generatedLayers = [];\n\n    // Match sublayers\n    const error = this._updateSublayersRecursively({\n      newLayers,\n      oldLayerMap,\n      generatedLayers\n    });\n\n    // Finalize unmatched layers\n    const error2 = this._finalizeOldLayers(oldLayerMap);\n\n    this._needsUpdate = false;\n\n    const firstError = error || error2;\n    return {error: firstError, generatedLayers};\n  }\n\n  // Note: adds generated layers to `generatedLayers` array parameter\n  _updateSublayersRecursively({newLayers, oldLayerMap, generatedLayers}) {\n    let error = null;\n\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n\n      // Given a new coming layer, find its matching old layer (if any)\n      const oldLayer = oldLayerMap[newLayer.id];\n      if (oldLayer === null) {\n        // null, rather than undefined, means this id was originally there\n        log.warn(`Multiple new layers with same id ${layerName(newLayer)}`)();\n      }\n      // Remove the old layer from candidates, as it has been matched with this layer\n      oldLayerMap[newLayer.id] = null;\n\n      let sublayers = null;\n\n      // We must not generate exceptions until after layer matching is complete\n      try {\n        if (!oldLayer) {\n          this._initializeLayer(newLayer);\n          initLayerInSeer(newLayer); // Initializes layer in seer chrome extension (if connected)\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n          this._updateLayer(newLayer);\n          updateLayerInSeer(newLayer); // Updates layer in seer chrome extension (if connected)\n        }\n        generatedLayers.push(newLayer);\n\n        // Call layer lifecycle method: render sublayers\n        sublayers = newLayer.isComposite && newLayer.getSubLayers();\n        // End layer lifecycle method: render sublayers\n      } catch (err) {\n        log.warn(`error during matching of ${layerName(newLayer)}`, err);\n        error = error || err; // Record first exception\n      }\n\n      if (sublayers) {\n        this._updateSublayersRecursively({\n          newLayers: sublayers,\n          oldLayerMap,\n          generatedLayers\n        });\n      }\n    }\n\n    return error;\n  }\n\n  // Finalize any old layers that were not matched\n  _finalizeOldLayers(oldLayerMap) {\n    let error = null;\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n      if (layer) {\n        error = error || this._finalizeLayer(layer);\n      }\n    }\n    return error;\n  }\n\n  // EXCEPTION SAFE LAYER ACCESS\n\n  // Initializes a single layer, calling layer methods\n  _initializeLayer(layer) {\n    log.log(LOG_PRIORITY_LIFECYCLE, `initializing ${layerName(layer)}`)();\n\n    let error = null;\n    try {\n      layer._initialize();\n      layer.lifecycle = LIFECYCLE.INITIALIZED;\n    } catch (err) {\n      log.warn(`error while initializing ${layerName(layer)}\\n`, err)();\n      error = error || err;\n      // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?\n    }\n\n    // Set back pointer (used in picking)\n    layer.internalState.layer = layer;\n\n    // Save layer on model for picking purposes\n    // store on model.userData rather than directly on model\n    for (const model of layer.getModels()) {\n      model.userData.layer = layer;\n    }\n\n    return error;\n  }\n\n  _transferLayerState(oldLayer, newLayer) {\n    newLayer._transferState(oldLayer);\n    newLayer.lifecycle = LIFECYCLE.MATCHED;\n\n    if (newLayer !== oldLayer) {\n      log.log(\n        LOG_PRIORITY_LIFECYCLE_MINOR,\n        `matched ${layerName(newLayer)}`,\n        oldLayer,\n        '->',\n        newLayer\n      )();\n      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n    } else {\n      log.log(LOG_PRIORITY_LIFECYCLE_MINOR, `Matching layer is unchanged ${newLayer.id}`)();\n    }\n  }\n\n  // Updates a single layer, cleaning all flags\n  _updateLayer(layer) {\n    log.log(\n      LOG_PRIORITY_LIFECYCLE_MINOR,\n      `updating ${layer} because: ${layer.printChangeFlags()}`\n    )();\n    let error = null;\n    try {\n      layer._update();\n    } catch (err) {\n      log.warn(`error during update of ${layerName(layer)}`, err)();\n      // Save first error\n      error = err;\n    }\n    return error;\n  }\n\n  // Finalizes a single layer\n  _finalizeLayer(layer) {\n    assert(layer.lifecycle !== LIFECYCLE.AWAITING_FINALIZATION);\n    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n    let error = null;\n    this.setNeedsRedraw(`finalized ${layerName(layer)}`);\n    try {\n      layer._finalize();\n    } catch (err) {\n      log.warn(`error during finalization of ${layerName(layer)}`, err)();\n      error = err;\n    }\n    layer.lifecycle = LIFECYCLE.FINALIZED;\n    log.log(LOG_PRIORITY_LIFECYCLE, `finalizing ${layerName(layer)}`);\n    return error;\n  }\n\n  /**\n   * Warn if a deck-level mouse event has been specified,\n   * but no layers are `pickable`.\n   */\n  _validateEventHandling() {\n    if (this.onLayerClick || this.onLayerHover) {\n      if (this.layers.length && !this.layers.some(layer => layer.props.pickable)) {\n        log.warn(\n          'You have supplied a top-level input event handler (e.g. `onLayerClick`), ' +\n            'but none of your layers have set the `pickable` flag.'\n        )();\n      }\n    }\n  }\n\n  /**\n   * Route click events to layers.\n   * `pickLayer` will call the `onClick` prop of any picked layer,\n   * and `onLayerClick` is called directly from here\n   * with any picking info generated by `pickLayer`.\n   * @param {Object} event  An object encapsulating an input event,\n   *                        with the following shape:\n   *                        {Object: {x, y}} offsetCenter: center of the event\n   *                        {Object} srcEvent:             native JS Event object\n   */\n  _onClick(event) {\n    if (!event.offsetCenter) {\n      // Do not trigger onHover callbacks when click position is invalid.\n      return;\n    }\n    this._pickAndCallback({\n      callback: this._onLayerClick,\n      event,\n      mode: 'click'\n    });\n  }\n\n  /**\n   * Route click events to layers.\n   * `pickLayer` will call the `onHover` prop of any picked layer,\n   * and `onLayerHover` is called directly from here\n   * with any picking info generated by `pickLayer`.\n   * @param {Object} event  An object encapsulating an input event,\n   *                        with the following shape:\n   *                        {Object: {x, y}} offsetCenter: center of the event\n   *                        {Object} srcEvent:             native JS Event object\n   */\n  _onPointerMove(event) {\n    if (event.leftButton || event.rightButton) {\n      // Do not trigger onHover callbacks if mouse button is down.\n      return;\n    }\n    this._pickAndCallback({\n      callback: this._onLayerHover,\n      event,\n      mode: 'hover'\n    });\n  }\n\n  _onPointerLeave(event) {\n    this.pickObject({\n      x: -1,\n      y: -1,\n      radius: this._pickingRadius,\n      mode: 'hover'\n    });\n  }\n\n  _pickAndCallback(options) {\n    const pos = options.event.offsetCenter;\n    const radius = this._pickingRadius;\n    const selectedInfos = this.pickObject({x: pos.x, y: pos.y, radius, mode: options.mode});\n    if (options.callback) {\n      const firstInfo = selectedInfos.find(info => info.index >= 0) || null;\n      // As per documentation, send null value when no valid object is picked.\n      options.callback(firstInfo, selectedInfos, options.event.srcEvent);\n    }\n  }\n\n  // SEER INTEGRATION\n\n  /**\n   * Called upon Seer initialization, manually sends layers data.\n   */\n  _initSeer() {\n    this.layers.forEach(layer => {\n      initLayerInSeer(layer);\n      updateLayerInSeer(layer);\n    });\n  }\n\n  /**\n   * On Seer property edition, set override and update layers.\n   */\n  _editSeer(payload) {\n    if (payload.type !== 'edit' || payload.valuePath[0] !== 'props') {\n      return;\n    }\n\n    setPropOverrides(payload.itemKey, payload.valuePath.slice(1), payload.value);\n    const newLayers = this.layers.map(layer => new layer.constructor(layer.props));\n    this.updateLayers({newLayers});\n  }\n}\n"],"file":"layer-manager.js"}