{"version":3,"sources":["../../../src/lib/attribute.js"],"names":["assert","GL","Buffer","experimental","Attribute","DEFAULT_STATE","isExternalBuffer","needsAlloc","needsUpdate","needsRedraw","allocedInstances","LayerAttribute","constructor","gl","opts","transition","noAlloc","update","accessor","defaultValue","Array","isArray","Object","assign","userData","seal","_validateAttributeUpdaters","clearChangedFlags","getInstanceCount","value","length","size","getUpdateTriggers","id","concat","supportsTransition","setNeedsUpdate","reason","setNeedsRedraw","setNumInstances","numInstances","state","instanceCount","allocate","allocCount","Math","max","ArrayType","glArrayFromType","type","FLOAT","isGeneric","updateBuffer","data","props","context","updated","call","_checkAttributeArray","_updateBufferViaStandardAccessor","setGenericValue","undefined","_normalizeValue","hasChanged","_areValuesEqual","setExternalBuffer","buffer","externalBuffer","Error","name","auto","ArrayBuffer","isView","Number","isFinite","value1","value2","i","accessorFunc","object","objectValue","j","hasUpdater","valid","glType","clamped","Float32Array","UNSIGNED_SHORT","UNSIGNED_SHORT_5_6_5","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","Uint16Array","UNSIGNED_INT","Uint32Array","UNSIGNED_BYTE","Uint8ClampedArray","Uint8Array","BYTE","Int8Array","SHORT","Int16Array","INT","Int32Array"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport assert from '../utils/assert';\nimport {GL, Buffer, experimental} from 'luma.gl';\nconst {Attribute} = experimental;\nconst DEFAULT_STATE = {\n  isExternalBuffer: false,\n  needsAlloc: false,\n  needsUpdate: false,\n  needsRedraw: false,\n  allocedInstances: -1\n};\n\nexport default class LayerAttribute extends Attribute {\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    const {\n      // deck.gl fields\n      transition = false,\n      noAlloc = false,\n      update = null,\n      accessor = null\n    } = opts;\n\n    let {defaultValue = [0, 0, 0, 0]} = opts;\n    defaultValue = Array.isArray(defaultValue) ? defaultValue : [defaultValue];\n\n    Object.assign(this.userData, DEFAULT_STATE, opts, {\n      transition,\n      noAlloc,\n      update,\n      accessor,\n      defaultValue\n    });\n\n    Object.seal(this.userData);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeUpdaters();\n  }\n\n  needsUpdate() {\n    return this.userData.needsUpdate;\n  }\n\n  needsRedraw({clearChangedFlags = false} = {}) {\n    const needsRedraw = this.userData.needsRedraw;\n    this.userData.needsRedraw = this.userData.needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getInstanceCount() {\n    return this.value !== null ? this.value.length / this.size : 0;\n  }\n\n  getUpdateTriggers() {\n    const {accessor} = this.userData;\n\n    // Backards compatibility: allow attribute name to be used as update trigger key\n    return [this.id].concat(accessor || []);\n  }\n\n  supportsTransition() {\n    return this.userData.transition;\n  }\n\n  // Checks that typed arrays for attributes are big enough\n  // sets alloc flag if not\n  // @return {Boolean} whether any updates are needed\n  setNeedsUpdate(reason = this.id) {\n    this.userData.needsUpdate = this.userData.needsUpdate || reason;\n  }\n\n  setNeedsRedraw(reason = this.id) {\n    this.userData.needsRedraw = this.userData.needsRedraw || reason;\n  }\n\n  setNumInstances(numInstances) {\n    const state = this.userData;\n\n    if (state.isExternalBuffer || state.noAlloc) {\n      // Data is provided through a Buffer object.\n      return;\n    }\n    // Do we need to reallocate the attribute's typed array?\n    const instanceCount = this.getInstanceCount();\n    const needsAlloc = instanceCount === 0 || instanceCount < numInstances;\n    if (needsAlloc && (state.update || state.accessor)) {\n      state.needsAlloc = true;\n      this.setNeedsUpdate(this.id);\n    }\n  }\n\n  allocate(numInstances) {\n    this.setNumInstances(numInstances);\n\n    const state = this.userData;\n\n    // Allocate a new typed array if needed\n    if (state.needsAlloc) {\n      // Allocate at least one element to ensure a valid buffer\n      const allocCount = Math.max(numInstances, 1);\n      const ArrayType = glArrayFromType(this.type || GL.FLOAT);\n\n      this.isGeneric = false;\n      this.value = new ArrayType(this.size * allocCount);\n      state.needsAlloc = false;\n      state.needsUpdate = true;\n\n      state.allocedInstances = allocCount;\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer({numInstances, data, props, context}) {\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const state = this.userData;\n\n    const {update, accessor} = state;\n\n    let updated = true;\n    if (update) {\n      // Custom updater - typically for non-instanced layers\n      update.call(context, this, {data, props, numInstances});\n      this.update({\n        value: this.value,\n        isGeneric: this.isGeneric\n      });\n      this._checkAttributeArray();\n    } else if (accessor) {\n      // Standard updater\n      this._updateBufferViaStandardAccessor(data, props);\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    state.needsUpdate = false;\n    state.needsRedraw = true;\n\n    return updated;\n  }\n\n  setGenericValue({props}) {\n    const state = this.userData;\n    let value = props[state.accessor];\n\n    if (value === undefined || typeof value === 'function') {\n      // ignore if this attribute has no accessor\n      // ignore if accessor is function, will be used in updateBuffer\n      return;\n    }\n\n    value = this._normalizeValue(value);\n    const hasChanged = !this.isGeneric || !this._areValuesEqual(value, this.value);\n\n    if (hasChanged) {\n      this.update({isGeneric: true, value});\n    }\n    state.needsRedraw = state.needsUpdate || hasChanged;\n    state.needsUpdate = false;\n    state.isExternalBuffer = true;\n  }\n\n  setExternalBuffer(buffer, numInstances) {\n    const state = this.userData;\n\n    if (buffer) {\n      state.isExternalBuffer = true;\n      state.needsUpdate = false;\n\n      if (buffer instanceof Buffer) {\n        if (this.externalBuffer !== buffer) {\n          this.update({isGeneric: false, buffer});\n          state.needsRedraw = true;\n        }\n      } else {\n        const ArrayType = glArrayFromType(this.type || GL.FLOAT);\n        if (!(buffer instanceof ArrayType)) {\n          throw new Error(`Attribute ${this.id} must be of type ${ArrayType.name}`);\n        }\n        if (state.auto && buffer.length <= numInstances * this.size) {\n          throw new Error('Attribute prop array must match length and size');\n        }\n        if (this.value !== buffer) {\n          this.update({value: buffer});\n          state.needsRedraw = true;\n        }\n      }\n    } else {\n      state.isExternalBuffer = false;\n    }\n  }\n\n  // PRIVATE HELPER METHODS\n\n  /* check user supplied values and apply fallback */\n  _normalizeValue(value, size = this.size, defaultValue = this.userData.defaultValue) {\n    if (!Array.isArray(value) && !ArrayBuffer.isView(value)) {\n      value = [value];\n    }\n\n    /* eslint-disable no-fallthrough, default-case */\n    switch (size) {\n      case 4:\n        value[3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n      case 3:\n        value[2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n      case 2:\n        value[1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n      case 1:\n        value[0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n    }\n\n    return value;\n  }\n\n  _areValuesEqual(value1, value2, size = this.size) {\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  _updateBufferViaStandardAccessor(data, props) {\n    const state = this.userData;\n\n    const {accessor, defaultValue} = state;\n    const {value, size} = this;\n    const accessorFunc = props[accessor];\n\n    assert(typeof accessorFunc === 'function', `accessor \"${accessor}\" is not a function`);\n\n    let i = 0;\n    for (const object of data) {\n      let objectValue = accessorFunc(object);\n      objectValue = this._normalizeValue(objectValue, size, defaultValue);\n      for (let j = 0; j < size; j++) {\n        value[i++] = objectValue[j];\n      }\n    }\n    this.update({value});\n  }\n\n  // Validate deck.gl level fields\n  _validateAttributeUpdaters() {\n    const state = this.userData;\n\n    // Check that either 'accessor' or 'update' is a valid function\n    const hasUpdater =\n      state.noAlloc || typeof state.update === 'function' || typeof state.accessor === 'string';\n    if (!hasUpdater) {\n      throw new Error(`Attribute ${this.id} missing update or accessor`);\n    }\n  }\n\n  _checkAttributeArray() {\n    const {value} = this;\n    if (value && value.length >= 4) {\n      const valid =\n        Number.isFinite(value[0]) &&\n        Number.isFinite(value[1]) &&\n        Number.isFinite(value[2]) &&\n        Number.isFinite(value[3]);\n      if (!valid) {\n        throw new Error(`Illegal attribute generated for ${this.id}`);\n      }\n    }\n  }\n}\n\n/* eslint-disable complexity */\nexport function glArrayFromType(glType, {clamped = true} = {}) {\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n    case GL.FLOAT:\n      return Float32Array;\n    case GL.UNSIGNED_SHORT:\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return Uint16Array;\n    case GL.UNSIGNED_INT:\n      return Uint32Array;\n    case GL.UNSIGNED_BYTE:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n    case GL.BYTE:\n      return Int8Array;\n    case GL.SHORT:\n      return Int16Array;\n    case GL.INT:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce type from array');\n  }\n}\n/* eslint-enable complexity */\n"],"file":"attribute.js"}