{"version":3,"sources":["../../../src/lib/attribute-transition-utils.js"],"names":["Buffer","fillArray","ATTRIBUTE_MAPPING","getShaders","transitions","varyings","attributeDeclarations","uniformsDeclarations","varyingDeclarations","calculations","attributeName","transition","attributeType","attribute","size","bufferIndex","length","push","vs","join","fs","getBuffers","sourceBuffers","destinationBuffers","fromState","toState","buffer","padBuffer","fromLength","toLength","data","Float32Array","set","getData","isGeneric","target","source","value","start","count","subarray","setData"],"mappings":"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","sourcesContent":["import {Buffer} from 'luma.gl';\nimport {fillArray} from '../utils/flatten';\n\nconst ATTRIBUTE_MAPPING = {\n  1: 'float',\n  2: 'vec2',\n  3: 'vec3',\n  4: 'vec4'\n};\n\nexport function getShaders(transitions) {\n  // Build shaders\n  const varyings = [];\n  const attributeDeclarations = [];\n  const uniformsDeclarations = [];\n  const varyingDeclarations = [];\n  const calculations = [];\n\n  for (const attributeName in transitions) {\n    const transition = transitions[attributeName];\n    const attributeType = ATTRIBUTE_MAPPING[transition.attribute.size];\n\n    if (attributeType) {\n      transition.bufferIndex = varyings.length;\n      varyings.push(attributeName);\n\n      attributeDeclarations.push(`attribute ${attributeType} ${attributeName}From;`);\n      attributeDeclarations.push(`attribute ${attributeType} ${attributeName}To;`);\n      uniformsDeclarations.push(`uniform float ${attributeName}Time;`);\n      varyingDeclarations.push(`varying ${attributeType} ${attributeName};`);\n      calculations.push(`${attributeName} = mix(${attributeName}From, ${attributeName}To,\n        ${attributeName}Time);`);\n    }\n  }\n\n  const vs = `\n#define SHADER_NAME feedback-vertex-shader\n${attributeDeclarations.join('\\n')}\n${uniformsDeclarations.join('\\n')}\n${varyingDeclarations.join('\\n')}\n\nvoid main(void) {\n  ${calculations.join('\\n')}\n  gl_Position = vec4(0.0);\n}\n`;\n\n  const fs = `\\\n#define SHADER_NAME feedback-fragment-shader\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\n${varyingDeclarations.join('\\n')}\n\nvoid main(void) {\n  gl_FragColor = vec4(0.0);\n}\n`;\n  return {vs, fs, varyings};\n}\n\nexport function getBuffers(transitions) {\n  const sourceBuffers = {};\n  const destinationBuffers = {};\n  for (const attributeName in transitions) {\n    const {fromState, toState, buffer} = transitions[attributeName];\n    sourceBuffers[`${attributeName}From`] = fromState;\n    sourceBuffers[`${attributeName}To`] = toState;\n    destinationBuffers[`${attributeName}`] = buffer;\n  }\n  return {sourceBuffers, destinationBuffers};\n}\n\nexport function padBuffer({fromState, toState, fromLength, toLength}) {\n  // check if buffer needs to be padded\n  if (fromLength >= toLength || !(fromState instanceof Buffer)) {\n    return;\n  }\n\n  const data = new Float32Array(toLength);\n  // copy the currect values\n  data.set(fromState.getData({}));\n\n  if (toState.isGeneric) {\n    fillArray({\n      target: data,\n      source: toState.value,\n      start: fromLength,\n      count: (toLength - fromLength) / toState.size\n    });\n  } else {\n    data.set(toState.buffer.data.subarray(fromLength), fromLength);\n  }\n\n  fromState.setData({data});\n}\n"],"file":"attribute-transition-utils.js"}