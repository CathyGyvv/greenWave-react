{"version":3,"sources":["../../../src/lib/layer.js"],"names":["COORDINATE_SYSTEM","AttributeManager","removeLayerInSeer","diffProps","count","log","GL","withParameters","assert","Component","LayerState","LOG_PRIORITY_UPDATE","EMPTY_ARRAY","Object","freeze","noop","defaultProps","data","type","value","async","dataComparator","dataTransform","fetch","url","then","response","json","updateTriggers","numInstances","undefined","visible","pickable","opacity","min","max","onHover","onClick","coordinateSystem","LNGLAT","coordinateOrigin","parameters","uniforms","framebuffer","animation","getPolygonOffset","layerIndex","highlightedObjectIndex","autoHighlight","highlightColor","Layer","className","constructor","layerName","name","props","id","updateObject","assign","state","setNeedsRedraw","redraw","internalState","needsRedraw","context","layerManager","setNeedsUpdate","String","clearRedrawFlags","_getNeedsRedraw","shouldUpdateState","_getUpdateParams","models","model","attributeManager","layer","object","lngLat","viewport","Array","isArray","project","xy","unproject","projectFlat","unprojectFlat","fp64","once","screenPixels","deprecated","devicePixelRatio","window","i","color","Uint8Array","i1","i2","i3","index","Error","oldProps","changeFlags","propsOrDataChanged","getAttributeManager","dataChanged","invalidateAll","getModels","delete","finalize","opts","draw","info","mode","diffReason","invalidate","getNumInstances","update","transitions","buffers","ignoreUnknownAttributes","getSingleModel","changedAttributes","getChangedAttributes","clearChangedFlags","setAttributes","isInTransition","updateTransition","transition","attribute","size","pickingColor","encodePickingColor","instancePickingColors","attributes","decodePickingColor","forEach","pickingColors","length","_clearPickingColor","_clearInstancePickingColor","colors","Uint8ClampedArray","set","updateAttributes","gl","_initState","initializeState","setChangeFlags","propsChanged","viewportChanged","_updateState","program","geometry","getAttributes","stateNeedsUpdate","needsUpdate","updateParams","updateState","isComposite","_renderLayers","_updateBaseUniforms","_updateModuleSettings","setInstanceCount","clearChangeFlags","resetOldProps","finalizeState","moduleParameters","picking_uActive","updateModuleSettings","offsets","polygonOffset","getPickingInfo","flags","updateTriggersChanged","keys","join","somethingChanged","newProps","key","_activeUpdateTrigger","getOldProps","attributeManagerNeedsRedraw","getNeedsRedraw","modelNeedsRedraw","stats","addInstanced","UNSIGNED_BYTE","calculateInstancePickingColors","onAsyncPropUpdated","_onAsyncPropUpdated","bind","setAsyncProps","oldLayer","component","userData","setLayerNeedsUpdate","propName","invalidateAttribute","propertyName","condition","Math","pow","ONE","setUniforms","settings","pickingHighlightColor","uniformMap"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable react/no-direct-mutation-state */\n/* global fetch */\n/* global window */\nimport {COORDINATE_SYSTEM} from './constants';\nimport AttributeManager from './attribute-manager';\nimport {removeLayerInSeer} from './seer-integration';\nimport {diffProps} from '../lifecycle/props';\nimport {count} from '../utils/count';\nimport log from '../utils/log';\nimport {GL, withParameters} from 'luma.gl';\nimport assert from '../utils/assert';\n\nimport Component from '../lifecycle/component';\nimport LayerState from './layer-state';\n\nconst LOG_PRIORITY_UPDATE = 1;\n\nconst EMPTY_ARRAY = Object.freeze([]);\nconst noop = () => {};\n\nconst defaultProps = {\n  // data: Special handling for null, see below\n  data: {type: 'data', value: EMPTY_ARRAY, async: true},\n  dataComparator: null,\n  dataTransform: data => data,\n  fetch: url => fetch(url).then(response => response.json()),\n  updateTriggers: {}, // Update triggers: a core change detection mechanism in deck.gl\n  numInstances: undefined,\n\n  visible: true,\n  pickable: false,\n  opacity: {type: 'number', min: 0, max: 1, value: 0.8},\n\n  onHover: noop,\n  onClick: noop,\n\n  coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\n  coordinateOrigin: [0, 0, 0],\n\n  parameters: {},\n  uniforms: {},\n  framebuffer: null,\n\n  animation: null, // Passed prop animation functions to evaluate props\n\n  // Offset depth based on layer index to avoid z-fighting.\n  // Negative values pull layer towards the camera\n  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\n  getPolygonOffset: ({layerIndex}) => [0, -layerIndex * 100],\n\n  // Selection/Highlighting\n  highlightedObjectIndex: null,\n  autoHighlight: false,\n  highlightColor: [0, 0, 128, 128]\n};\n\nexport default class Layer extends Component {\n  toString() {\n    const className = this.constructor.layerName || this.constructor.name;\n    return `${className}({id: '${this.props.id}'})`;\n  }\n\n  // Public API\n\n  // Updates selected state members and marks the object for redraw\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n    this.setNeedsRedraw();\n  }\n\n  // Sets the redraw flag for this layer, will trigger a redraw next animation frame\n  setNeedsRedraw(redraw = true) {\n    if (this.internalState) {\n      this.internalState.needsRedraw = redraw;\n    }\n  }\n\n  // This layer needs a deep update\n  // TODO - Need to align with existing needsUpdate before uncommenting\n  // For now async props will call layerManager directly\n  setLayerNeedsUpdate() {\n    this.context.layerManager.setNeedsUpdate(String(this));\n  }\n\n  // Checks state of attributes and model\n  getNeedsRedraw({clearRedrawFlags = false} = {}) {\n    return this._getNeedsRedraw(clearRedrawFlags);\n  }\n\n  // Checks if layer attributes needs updating\n  needsUpdate() {\n    // Call subclass lifecycle method\n    return this.shouldUpdateState(this._getUpdateParams());\n    // End lifecycle method\n  }\n\n  // Returns true if the layer is pickable and visible.\n  isPickable() {\n    return this.props.pickable && this.props.visible;\n  }\n\n  // Return an array of models used by this layer, can be overriden by layer subclass\n  getModels() {\n    return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n  }\n\n  // TODO - Gradually phase out, does not support multi model layers\n  getSingleModel() {\n    return this.state && this.state.model;\n  }\n\n  getAttributeManager() {\n    return this.internalState && this.internalState.attributeManager;\n  }\n\n  // Returns the most recent layer that matched to this state\n  // (When reacting to an async event, this layer may no longer be the latest)\n  getCurrentLayer() {\n    return this.internalState && this.internalState.layer;\n  }\n\n  // Use iteration (the only required capability on data) to get first element\n  // deprecated since we are effectively only supporting Arrays\n  getFirstObject() {\n    const {data} = this.props;\n    for (const object of data) {\n      return object;\n    }\n    return null;\n  }\n\n  // PROJECTION METHODS\n\n  // Projects a point with current map state (lat, lon, zoom, pitch, bearing)\n  // TODO - need to be extended to work with COORDINATE_SYSTEM.METERS,IDENTITY\n  // TODO - need to be extended to work with multiple `views`\n  project(lngLat) {\n    const {viewport} = this.context;\n    assert(Array.isArray(lngLat));\n    return viewport.project(lngLat);\n  }\n\n  unproject(xy) {\n    const {viewport} = this.context;\n    assert(Array.isArray(xy));\n    return viewport.unproject(xy);\n  }\n\n  projectFlat(lngLat) {\n    const {viewport} = this.context;\n    assert(Array.isArray(lngLat));\n    return viewport.projectFlat(lngLat);\n  }\n\n  unprojectFlat(xy) {\n    const {viewport} = this.context;\n    assert(Array.isArray(xy));\n    return viewport.unprojectFlat(xy);\n  }\n\n  is64bitEnabled() {\n    if (this.props.fp64) {\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        return true;\n      }\n      log.once(\n        0,\n        `64-bit mode only works with coordinateSystem set to\n        COORDINATE_SYSTEM.LNGLAT. Rendering in 32-bit mode instead`\n      );\n    }\n\n    return false;\n  }\n\n  // TODO - needs to refer to context for devicePixels setting\n  screenToDevicePixels(screenPixels) {\n    log.deprecated('screenToDevicePixels', 'DeckGL prop useDevicePixels for conversion')();\n    const devicePixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio : 1;\n    return screenPixels * devicePixelRatio;\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  // @return {Array} - a black color\n  nullPickingColor() {\n    return [0, 0, 0];\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  encodePickingColor(i) {\n    assert((((i + 1) >> 24) & 255) === 0, 'index out of picking color range');\n    return [(i + 1) & 255, ((i + 1) >> 8) & 255, (((i + 1) >> 8) >> 8) & 255];\n  }\n\n  // Returns the index corresponding to a picking color that doesn't match any subfeature\n  // @param {Uint8Array} color - color array to be decoded\n  // @return {Array} - the decoded picking color\n  decodePickingColor(color) {\n    assert(color instanceof Uint8Array);\n    const [i1, i2, i3] = color;\n    // 1 was added to seperate from no selection\n    const index = i1 + i2 * 256 + i3 * 65536 - 1;\n    return index;\n  }\n\n  // //////////////////////////////////////////////////\n  // LIFECYCLE METHODS, overridden by the layer subclasses\n\n  // Called once to set up the initial state\n  // App can create WebGL resources\n  initializeState() {\n    throw new Error(`Layer ${this} has not defined initializeState`);\n  }\n\n  // Let's layer control if updateState should be called\n  shouldUpdateState({oldProps, props, context, changeFlags}) {\n    return changeFlags.propsOrDataChanged;\n  }\n\n  // Default implementation, all attributes will be invalidated and updated\n  // when data changes\n  updateState({oldProps, props, context, changeFlags}) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.dataChanged && attributeManager) {\n      attributeManager.invalidateAll();\n    }\n  }\n\n  // Called once when layer is no longer matched and state will be discarded\n  // App can destroy WebGL resources here\n  finalizeState() {\n    for (const model of this.getModels()) {\n      model.delete();\n    }\n    this.getAttributeManager().finalize();\n  }\n\n  // If state has a model, draw it with supplied uniforms\n  draw(opts) {\n    for (const model of this.getModels()) {\n      model.draw(opts);\n    }\n  }\n\n  // called to populate the info object that is passed to the event handler\n  // @return null to cancel event\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n\n    if (index >= 0) {\n      // If props.data is an indexable array, get the object\n      if (Array.isArray(this.props.data)) {\n        info.object = this.props.data[index];\n      }\n    }\n\n    return info;\n  }\n\n  // END LIFECYCLE METHODS\n  // //////////////////////////////////////////////////\n\n  // INTERNAL METHODS\n\n  // Default implementation of attribute invalidation, can be redefined\n  invalidateAttribute(name = 'all', diffReason = '') {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    if (name === 'all') {\n      log.log(LOG_PRIORITY_UPDATE, `updateTriggers invalidating all attributes: ${diffReason}`)();\n      attributeManager.invalidateAll();\n    } else {\n      log.log(\n        LOG_PRIORITY_UPDATE,\n        `updateTriggers invalidating attribute ${name}: ${diffReason}`\n      )();\n      attributeManager.invalidate(name);\n    }\n  }\n\n  // Calls attribute manager to update any WebGL attributes\n  updateAttributes(props) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    // Figure out data length\n    const numInstances = this.getNumInstances(props);\n\n    attributeManager.update({\n      data: props.data,\n      numInstances,\n      props,\n      transitions: props.transitions,\n      buffers: props,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    const model = this.getSingleModel();\n    if (model) {\n      const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n      model.setAttributes(changedAttributes);\n    }\n  }\n\n  // Update attribute transition\n  updateTransition() {\n    const model = this.getSingleModel();\n    const attributeManager = this.getAttributeManager();\n    const isInTransition = attributeManager && attributeManager.updateTransition();\n\n    if (model && isInTransition) {\n      model.setAttributes(attributeManager.getChangedAttributes({transition: true}));\n    }\n  }\n\n  calculateInstancePickingColors(attribute, {numInstances}) {\n    const {value, size} = attribute;\n    // add 1 to index to seperate from no selection\n    for (let i = 0; i < numInstances; i++) {\n      const pickingColor = this.encodePickingColor(i);\n      value[i * size + 0] = pickingColor[0];\n      value[i * size + 1] = pickingColor[1];\n      value[i * size + 2] = pickingColor[2];\n    }\n  }\n\n  // Sets the specified instanced picking color to null picking color. Used for multi picking.\n  _clearInstancePickingColor(color) {\n    const {instancePickingColors} = this.getAttributeManager().attributes;\n    const {state: attribute} = instancePickingColors;\n    const {value, size} = attribute;\n\n    const i = this.decodePickingColor(color);\n    value[i * size + 0] = 0;\n    value[i * size + 1] = 0;\n    value[i * size + 2] = 0;\n\n    // TODO: Optimize this to use sub-buffer update!\n    const models = this.getModels();\n    if (models) {\n      models.forEach(model => model.setAttributes({instancePickingColors: attribute}));\n    }\n  }\n\n  // Sets all occurrences of the specified picking color to null picking color. Used for multi picking.\n  _clearPickingColor(color) {\n    const {pickingColors} = this.getAttributeManager().attributes;\n    const attribute = pickingColors.state;\n    const {value} = attribute;\n\n    for (let i = 0; i < value.length; i += 3) {\n      if (value[i + 0] === color[0] && value[i + 1] === color[1] && value[i + 2] === color[2]) {\n        value[i + 0] = 0;\n        value[i + 1] = 0;\n        value[i + 2] = 0;\n      }\n    }\n\n    // TODO: Optimize this to use sub-buffer update!\n    const models = this.getModels();\n    if (models) {\n      models.forEach(model => model.setAttributes({pickingColors: attribute}));\n    }\n  }\n\n  // This method figures out if we use instance colors or not\n  // and calls _clearInstancePickingColor or _clearPickingColor\n  clearPickingColor(color) {\n    if (this.getAttributeManager().attributes.pickingColors) {\n      this._clearPickingColor(color);\n    } else {\n      this._clearInstancePickingColor(color);\n    }\n  }\n\n  copyPickingColors() {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    return new Uint8ClampedArray(colors.value);\n  }\n\n  restorePickingColors(value) {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    colors.value.set(value);\n    colors.setNeedsUpdate();\n    this.updateAttributes(this.props);\n  }\n\n  // Deduces numer of instances. Intention is to support:\n  // - Explicit setting of numInstances\n  // - Auto-deduction for ES6 containers that define a size member\n  // - Auto-deduction for Classic Arrays via the built-in length attribute\n  // - Auto-deduction via arrays\n  getNumInstances(props) {\n    props = props || this.props;\n\n    // First check if the layer has set its own value\n    if (this.state && this.state.numInstances !== undefined) {\n      return this.state.numInstances;\n    }\n\n    // Check if app has provided an explicit value\n    if (props.numInstances !== undefined) {\n      return props.numInstances;\n    }\n\n    // Use container library to get a count for any ES6 container or object\n    const {data} = this.props;\n    return count(data);\n  }\n\n  // LAYER MANAGER API\n  // Should only be called by the deck.gl LayerManager class\n\n  // Called by layer manager when a new layer is found\n  /* eslint-disable max-statements */\n  _initialize() {\n    assert(this.context.gl);\n\n    this._initState();\n\n    // Call subclass lifecycle methods\n    this.initializeState(this.context);\n    // End subclass lifecycle methods\n\n    // TODO deprecated, for backwards compatibility with older layers\n    // in case layer resets state\n    this.state.attributeManager = this.getAttributeManager();\n\n    // initializeState callback tends to clear state\n    this.setChangeFlags({dataChanged: true, propsChanged: true, viewportChanged: true});\n\n    this._updateState();\n\n    const model = this.getSingleModel();\n    if (model) {\n      model.id = this.props.id;\n      model.program.id = `${this.props.id}-program`;\n      model.geometry.id = `${this.props.id}-geometry`;\n      model.setAttributes(this.getAttributeManager().getAttributes());\n    }\n  }\n\n  // Called by layer manager\n  // if this layer is new (not matched with an existing layer) oldProps will be empty object\n  _update() {\n    // Call subclass lifecycle method\n    const stateNeedsUpdate = this.needsUpdate();\n    // End lifecycle method\n\n    if (stateNeedsUpdate) {\n      this._updateState();\n    }\n  }\n  /* eslint-enable max-statements */\n\n  // Common code for _initialize and _update\n  _updateState() {\n    const updateParams = this._getUpdateParams();\n\n    // Call subclass lifecycle methods\n    this.updateState(updateParams);\n\n    // Render or update previously rendered sublayers\n    if (this.isComposite) {\n      this._renderLayers(updateParams);\n    }\n    // End subclass lifecycle methods\n\n    // Add any subclass attributes\n    this.updateAttributes(this.props);\n    this._updateBaseUniforms();\n    this._updateModuleSettings();\n\n    // Note: Automatic instance count update only works for single layers\n    if (this.state.model) {\n      this.state.model.setInstanceCount(this.getNumInstances());\n    }\n\n    this.clearChangeFlags();\n    this.internalState.resetOldProps();\n  }\n\n  // Called by manager when layer is about to be disposed\n  // Note: not guaranteed to be called on application shutdown\n  _finalize() {\n    assert(this.internalState && this.state);\n\n    // Call subclass lifecycle method\n    this.finalizeState(this.context);\n    // End lifecycle method\n    removeLayerInSeer(this.id);\n  }\n\n  // Calculates uniforms\n  drawLayer({moduleParameters = null, uniforms = {}, parameters = {}}) {\n    if (!uniforms.picking_uActive) {\n      this.updateTransition();\n    }\n\n    // TODO/ib - hack move to luma Model.draw\n    if (moduleParameters) {\n      for (const model of this.getModels()) {\n        model.updateModuleSettings(moduleParameters);\n      }\n    }\n\n    // Apply polygon offset to avoid z-fighting\n    // TODO - move to draw-layers\n    const {getPolygonOffset} = this.props;\n    const offsets = (getPolygonOffset && getPolygonOffset(uniforms)) || [0, 0];\n    parameters.polygonOffset = offsets;\n\n    // Call subclass lifecycle method\n    withParameters(this.context.gl, parameters, () => {\n      this.draw({moduleParameters, uniforms, parameters, context: this.context});\n    });\n    // End lifecycle method\n  }\n\n  // {uniforms = {}, ...opts}\n  pickLayer(opts) {\n    // Call subclass lifecycle method\n    return this.getPickingInfo(opts);\n    // End lifecycle method\n  }\n\n  // Helper methods\n  getChangeFlags() {\n    return this.internalState.changeFlags;\n  }\n\n  // Dirty some change flags, will be handled by updateLayer\n  /* eslint-disable complexity */\n  setChangeFlags(flags) {\n    this.internalState.changeFlags = this.internalState.changeFlags || {};\n    const changeFlags = this.internalState.changeFlags;\n\n    // Update primary flags\n    if (flags.dataChanged && !changeFlags.dataChanged) {\n      changeFlags.dataChanged = flags.dataChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `dataChanged: ${flags.dataChanged} in ${this.id}`)();\n    }\n    if (flags.updateTriggersChanged && !changeFlags.updateTriggersChanged) {\n      changeFlags.updateTriggersChanged =\n        changeFlags.updateTriggersChanged && flags.updateTriggersChanged\n          ? Object.assign({}, flags.updateTriggersChanged, changeFlags.updateTriggersChanged)\n          : flags.updateTriggersChanged || changeFlags.updateTriggersChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 1,\n        () =>\n          'updateTriggersChanged: ' +\n          `${Object.keys(flags.updateTriggersChanged).join(', ')} in ${this.id}`\n      )();\n    }\n    if (flags.propsChanged && !changeFlags.propsChanged) {\n      changeFlags.propsChanged = flags.propsChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `propsChanged: ${flags.propsChanged} in ${this.id}`)();\n    }\n    if (flags.viewportChanged && !changeFlags.viewportChanged) {\n      changeFlags.viewportChanged = flags.viewportChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 2,\n        () => `viewportChanged: ${flags.viewportChanged} in ${this.id}`\n      )();\n    }\n\n    // Update composite flags\n    const propsOrDataChanged =\n      flags.dataChanged || flags.updateTriggersChanged || flags.propsChanged;\n    changeFlags.propsOrDataChanged = changeFlags.propsOrDataChanged || propsOrDataChanged;\n    changeFlags.somethingChanged =\n      changeFlags.somethingChanged || propsOrDataChanged || flags.viewportChanged;\n  }\n  /* eslint-enable complexity */\n\n  // Clear all changeFlags, typically after an update\n  clearChangeFlags() {\n    this.internalState.changeFlags = {\n      // Primary changeFlags, can be strings stating reason for change\n      dataChanged: false,\n      propsChanged: false,\n      updateTriggersChanged: false,\n      viewportChanged: false,\n\n      // Derived changeFlags\n      propsOrDataChanged: false,\n      somethingChanged: false\n    };\n  }\n\n  printChangeFlags() {\n    const flags = this.internalState.changeFlags;\n    return `\\\n${flags.dataChanged ? 'data ' : ''}\\\n${flags.propsChanged ? 'props ' : ''}\\\n${flags.updateTriggersChanged ? 'triggers ' : ''}\\\n${flags.viewportChanged ? 'viewport' : ''}\\\n`;\n  }\n\n  // Compares the layers props with old props from a matched older layer\n  // and extracts change flags that describe what has change so that state\n  // can be update correctly with minimal effort\n  diffProps(newProps, oldProps) {\n    const changeFlags = diffProps(newProps, oldProps);\n\n    // iterate over changedTriggers\n    if (changeFlags.updateTriggersChanged) {\n      for (const key in changeFlags.updateTriggersChanged) {\n        if (changeFlags.updateTriggersChanged[key]) {\n          this._activeUpdateTrigger(key);\n        }\n      }\n    }\n\n    return this.setChangeFlags(changeFlags);\n  }\n\n  // PRIVATE METHODS\n\n  _getUpdateParams() {\n    return {\n      props: this.props,\n      oldProps: this.internalState.getOldProps(),\n      context: this.context,\n      changeFlags: this.internalState.changeFlags\n    };\n  }\n\n  // Checks state of attributes and model\n  _getNeedsRedraw(clearRedrawFlags) {\n    // this method may be called by the render loop as soon a the layer\n    // has been created, so guard against uninitialized state\n    if (!this.internalState) {\n      return false;\n    }\n\n    let redraw = false;\n    redraw = redraw || (this.internalState.needsRedraw && this.id);\n    this.internalState.needsRedraw = this.internalState.needsRedraw && !clearRedrawFlags;\n\n    // TODO - is attribute manager needed? - Model should be enough.\n    const attributeManager = this.getAttributeManager();\n    const attributeManagerNeedsRedraw =\n      attributeManager && attributeManager.getNeedsRedraw({clearRedrawFlags});\n    redraw = redraw || attributeManagerNeedsRedraw;\n\n    for (const model of this.getModels()) {\n      let modelNeedsRedraw = model.getNeedsRedraw({clearRedrawFlags});\n      if (modelNeedsRedraw && typeof modelNeedsRedraw !== 'string') {\n        modelNeedsRedraw = `model ${model.id}`;\n      }\n      redraw = redraw || modelNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  _initState() {\n    assert(!this.internalState && !this.state);\n\n    const attributeManager = new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n\n    // All instanced layers get instancePickingColors attribute by default\n    // Their shaders can use it to render a picking scene\n    // TODO - this slightly slows down non instanced layers\n    attributeManager.addInstanced({\n      instancePickingColors: {\n        type: GL.UNSIGNED_BYTE,\n        size: 3,\n        update: this.calculateInstancePickingColors\n      }\n    });\n\n    this.internalState = new LayerState({\n      attributeManager,\n      layer: this\n    });\n\n    this.state = {};\n    // TODO deprecated, for backwards compatibility with older layers\n    this.state.attributeManager = this.getAttributeManager();\n\n    this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n  }\n\n  // Called by layer manager to transfer state from an old layer\n  _transferState(oldLayer) {\n    const {state, internalState} = oldLayer;\n    assert(state && internalState);\n\n    if (this === oldLayer) {\n      return;\n    }\n\n    // Move internalState\n    this.internalState = internalState;\n    this.internalState.component = this;\n\n    // Move state\n    this.state = state;\n    // Deprecated: layer references on `state`\n    state.layer = this;\n    // We keep the state ref on old layers to support async actions\n    // oldLayer.state = null;\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n\n    // Update model layer reference\n    for (const model of this.getModels()) {\n      model.userData.layer = this;\n    }\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n\n    this.diffProps(this.props, this.internalState.getOldProps());\n  }\n\n  _onAsyncPropUpdated() {\n    this.diffProps(this.props, this.internalState.getOldProps());\n    this.setLayerNeedsUpdate();\n  }\n\n  // Operate on each changed triggers, will be called when an updateTrigger changes\n  _activeUpdateTrigger(propName) {\n    this.invalidateAttribute(propName);\n  }\n\n  //  Helper to check that required props are supplied\n  _checkRequiredProp(propertyName, condition) {\n    const value = this.props[propertyName];\n    if (value === undefined) {\n      throw new Error(`Property ${propertyName} undefined in layer ${this}`);\n    }\n    if (condition && !condition(value)) {\n      throw new Error(`Bad property ${propertyName} in layer ${this}`);\n    }\n  }\n\n  _updateBaseUniforms() {\n    const uniforms = {\n      // apply gamma to opacity to make it visually \"linear\"\n      opacity: Math.pow(this.props.opacity, 1 / 2.2),\n      ONE: 1.0\n    };\n    for (const model of this.getModels()) {\n      model.setUniforms(uniforms);\n    }\n\n    // TODO - set needsRedraw on the model(s)?\n    this.setNeedsRedraw();\n  }\n\n  _updateModuleSettings() {\n    const settings = {\n      pickingHighlightColor: this.props.highlightColor\n    };\n    for (const model of this.getModels()) {\n      model.updateModuleSettings(settings);\n    }\n  }\n\n  // DEPRECATED METHODS\n\n  // Updates selected state members and marks the object for redraw\n  setUniforms(uniformMap) {\n    for (const model of this.getModels()) {\n      model.setUniforms(uniformMap);\n    }\n\n    // TODO - set needsRedraw on the model(s)?\n    this.setNeedsRedraw();\n    log.deprecated('layer.setUniforms', 'model.setUniforms')();\n  }\n}\n\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;\n"],"file":"layer.js"}