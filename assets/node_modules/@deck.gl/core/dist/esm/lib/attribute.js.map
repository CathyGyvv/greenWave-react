{"version":3,"sources":["../../../src/lib/attribute.js"],"names":["assert","GL","Buffer","experimental","Attribute","DEFAULT_STATE","isExternalBuffer","needsAlloc","needsUpdate","needsRedraw","allocedInstances","LayerAttribute","gl","opts","transition","noAlloc","update","accessor","defaultValue","Array","isArray","Object","assign","userData","seal","_validateAttributeUpdaters","clearChangedFlags","value","length","size","id","concat","reason","numInstances","state","instanceCount","getInstanceCount","setNeedsUpdate","setNumInstances","allocCount","Math","max","ArrayType","glArrayFromType","type","FLOAT","isGeneric","data","props","context","updated","call","_checkAttributeArray","_updateBufferViaStandardAccessor","undefined","_normalizeValue","hasChanged","_areValuesEqual","buffer","externalBuffer","Error","name","auto","ArrayBuffer","isView","Number","isFinite","value1","value2","i","accessorFunc","object","objectValue","j","hasUpdater","valid","glType","clamped","Float32Array","UNSIGNED_SHORT","UNSIGNED_SHORT_5_6_5","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","Uint16Array","UNSIGNED_INT","Uint32Array","UNSIGNED_BYTE","Uint8ClampedArray","Uint8Array","BYTE","Int8Array","SHORT","Int16Array","INT","Int32Array"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport assert from '../utils/assert';\nimport {GL, Buffer, experimental} from 'luma.gl';\nconst {Attribute} = experimental;\nconst DEFAULT_STATE = {\n  isExternalBuffer: false,\n  needsAlloc: false,\n  needsUpdate: false,\n  needsRedraw: false,\n  allocedInstances: -1\n};\n\nexport default class LayerAttribute extends Attribute {\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    const {\n      // deck.gl fields\n      transition = false,\n      noAlloc = false,\n      update = null,\n      accessor = null\n    } = opts;\n\n    let {defaultValue = [0, 0, 0, 0]} = opts;\n    defaultValue = Array.isArray(defaultValue) ? defaultValue : [defaultValue];\n\n    Object.assign(this.userData, DEFAULT_STATE, opts, {\n      transition,\n      noAlloc,\n      update,\n      accessor,\n      defaultValue\n    });\n\n    Object.seal(this.userData);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeUpdaters();\n  }\n\n  needsUpdate() {\n    return this.userData.needsUpdate;\n  }\n\n  needsRedraw({clearChangedFlags = false} = {}) {\n    const needsRedraw = this.userData.needsRedraw;\n    this.userData.needsRedraw = this.userData.needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getInstanceCount() {\n    return this.value !== null ? this.value.length / this.size : 0;\n  }\n\n  getUpdateTriggers() {\n    const {accessor} = this.userData;\n\n    // Backards compatibility: allow attribute name to be used as update trigger key\n    return [this.id].concat(accessor || []);\n  }\n\n  supportsTransition() {\n    return this.userData.transition;\n  }\n\n  // Checks that typed arrays for attributes are big enough\n  // sets alloc flag if not\n  // @return {Boolean} whether any updates are needed\n  setNeedsUpdate(reason = this.id) {\n    this.userData.needsUpdate = this.userData.needsUpdate || reason;\n  }\n\n  setNeedsRedraw(reason = this.id) {\n    this.userData.needsRedraw = this.userData.needsRedraw || reason;\n  }\n\n  setNumInstances(numInstances) {\n    const state = this.userData;\n\n    if (state.isExternalBuffer || state.noAlloc) {\n      // Data is provided through a Buffer object.\n      return;\n    }\n    // Do we need to reallocate the attribute's typed array?\n    const instanceCount = this.getInstanceCount();\n    const needsAlloc = instanceCount === 0 || instanceCount < numInstances;\n    if (needsAlloc && (state.update || state.accessor)) {\n      state.needsAlloc = true;\n      this.setNeedsUpdate(this.id);\n    }\n  }\n\n  allocate(numInstances) {\n    this.setNumInstances(numInstances);\n\n    const state = this.userData;\n\n    // Allocate a new typed array if needed\n    if (state.needsAlloc) {\n      // Allocate at least one element to ensure a valid buffer\n      const allocCount = Math.max(numInstances, 1);\n      const ArrayType = glArrayFromType(this.type || GL.FLOAT);\n\n      this.isGeneric = false;\n      this.value = new ArrayType(this.size * allocCount);\n      state.needsAlloc = false;\n      state.needsUpdate = true;\n\n      state.allocedInstances = allocCount;\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer({numInstances, data, props, context}) {\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const state = this.userData;\n\n    const {update, accessor} = state;\n\n    let updated = true;\n    if (update) {\n      // Custom updater - typically for non-instanced layers\n      update.call(context, this, {data, props, numInstances});\n      this.update({\n        value: this.value,\n        isGeneric: this.isGeneric\n      });\n      this._checkAttributeArray();\n    } else if (accessor) {\n      // Standard updater\n      this._updateBufferViaStandardAccessor(data, props);\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    state.needsUpdate = false;\n    state.needsRedraw = true;\n\n    return updated;\n  }\n\n  setGenericValue({props}) {\n    const state = this.userData;\n    let value = props[state.accessor];\n\n    if (value === undefined || typeof value === 'function') {\n      // ignore if this attribute has no accessor\n      // ignore if accessor is function, will be used in updateBuffer\n      return;\n    }\n\n    value = this._normalizeValue(value);\n    const hasChanged = !this.isGeneric || !this._areValuesEqual(value, this.value);\n\n    if (hasChanged) {\n      this.update({isGeneric: true, value});\n    }\n    state.needsRedraw = state.needsUpdate || hasChanged;\n    state.needsUpdate = false;\n    state.isExternalBuffer = true;\n  }\n\n  setExternalBuffer(buffer, numInstances) {\n    const state = this.userData;\n\n    if (buffer) {\n      state.isExternalBuffer = true;\n      state.needsUpdate = false;\n\n      if (buffer instanceof Buffer) {\n        if (this.externalBuffer !== buffer) {\n          this.update({isGeneric: false, buffer});\n          state.needsRedraw = true;\n        }\n      } else {\n        const ArrayType = glArrayFromType(this.type || GL.FLOAT);\n        if (!(buffer instanceof ArrayType)) {\n          throw new Error(`Attribute ${this.id} must be of type ${ArrayType.name}`);\n        }\n        if (state.auto && buffer.length <= numInstances * this.size) {\n          throw new Error('Attribute prop array must match length and size');\n        }\n        if (this.value !== buffer) {\n          this.update({value: buffer});\n          state.needsRedraw = true;\n        }\n      }\n    } else {\n      state.isExternalBuffer = false;\n    }\n  }\n\n  // PRIVATE HELPER METHODS\n\n  /* check user supplied values and apply fallback */\n  _normalizeValue(value, size = this.size, defaultValue = this.userData.defaultValue) {\n    if (!Array.isArray(value) && !ArrayBuffer.isView(value)) {\n      value = [value];\n    }\n\n    /* eslint-disable no-fallthrough, default-case */\n    switch (size) {\n      case 4:\n        value[3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n      case 3:\n        value[2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n      case 2:\n        value[1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n      case 1:\n        value[0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n    }\n\n    return value;\n  }\n\n  _areValuesEqual(value1, value2, size = this.size) {\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  _updateBufferViaStandardAccessor(data, props) {\n    const state = this.userData;\n\n    const {accessor, defaultValue} = state;\n    const {value, size} = this;\n    const accessorFunc = props[accessor];\n\n    assert(typeof accessorFunc === 'function', `accessor \"${accessor}\" is not a function`);\n\n    let i = 0;\n    for (const object of data) {\n      let objectValue = accessorFunc(object);\n      objectValue = this._normalizeValue(objectValue, size, defaultValue);\n      for (let j = 0; j < size; j++) {\n        value[i++] = objectValue[j];\n      }\n    }\n    this.update({value});\n  }\n\n  // Validate deck.gl level fields\n  _validateAttributeUpdaters() {\n    const state = this.userData;\n\n    // Check that either 'accessor' or 'update' is a valid function\n    const hasUpdater =\n      state.noAlloc || typeof state.update === 'function' || typeof state.accessor === 'string';\n    if (!hasUpdater) {\n      throw new Error(`Attribute ${this.id} missing update or accessor`);\n    }\n  }\n\n  _checkAttributeArray() {\n    const {value} = this;\n    if (value && value.length >= 4) {\n      const valid =\n        Number.isFinite(value[0]) &&\n        Number.isFinite(value[1]) &&\n        Number.isFinite(value[2]) &&\n        Number.isFinite(value[3]);\n      if (!valid) {\n        throw new Error(`Illegal attribute generated for ${this.id}`);\n      }\n    }\n  }\n}\n\n/* eslint-disable complexity */\nexport function glArrayFromType(glType, {clamped = true} = {}) {\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n    case GL.FLOAT:\n      return Float32Array;\n    case GL.UNSIGNED_SHORT:\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return Uint16Array;\n    case GL.UNSIGNED_INT:\n      return Uint32Array;\n    case GL.UNSIGNED_BYTE:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n    case GL.BYTE:\n      return Int8Array;\n    case GL.SHORT:\n      return Int16Array;\n    case GL.INT:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce type from array');\n  }\n}\n/* eslint-enable complexity */\n"],"file":"attribute.js"}