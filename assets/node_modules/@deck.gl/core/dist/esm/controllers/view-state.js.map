{"version":3,"sources":["../../../src/controllers/view-state.js"],"names":["Vector3","experimental","SphericalCoordinates","assert","defaultState","position","lookAt","up","rotationX","rotationY","fov","near","far","ViewState","opts","width","height","Number","isFinite","_viewportProps","_applyConstraints","Object","assign","spherical","bearing","pitch","direction","toVector3","normalize","viewState","props"],"mappings":";;;;;;;;AAAA,SAAQA,OAAR,EAAiBC,YAAjB,QAAoC,SAApC;IACOC,oB,GAAwBD,Y,CAAxBC,oB;AACP,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,IAAMC,eAAe;AACnBC,YAAU,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADS;AAEnBC,UAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFW;AAGnBC,MAAI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHe;AAKnBC,aAAW,CALQ;AAMnBC,aAAW,CANQ;AAQnBC,OAAK,EARc;AASnBC,QAAM,CATa;AAUnBC,OAAK;AAVc,CAArB;AAaA;;IAEqBC,S;;;AACnB,qBAAYC,IAAZ,EAAkB;AAAA;;AAAA,QAEdC,KAFc,GAOZD,IAPY,CAEdC,KAFc;AAAA,QAGdC,MAHc,GAOZF,IAPY,CAGdE,MAHc;AAAA,yBAOZF,IAPY,CAMdT,QANc;AAAA,QAMdA,QANc,+BAMHD,aAAaC,QANV;AAShBF,WAAOc,OAAOC,QAAP,CAAgBH,KAAhB,CAAP,EAA+B,0BAA/B;AACAZ,WAAOc,OAAOC,QAAP,CAAgBF,MAAhB,CAAP,EAAgC,2BAAhC;AAEA,SAAKG,cAAL,GAAsB,KAAKC,iBAAL,CACpBC,OAAOC,MAAP,CAAc,EAAd,EAAkBR,IAAlB,EAAwB;AACtBT,gBAAU,IAAIL,OAAJ,CAAYK,QAAZ;AADY,KAAxB,CADoB,CAAtB;AAKD;;;;uCAEkB;AACjB,aAAO,KAAKc,cAAZ;AACD;;;mCAEc;AACb,UAAMI,YAAY,IAAIrB,oBAAJ,CAAyB;AACzCsB,iBAAS,KAAKL,cAAL,CAAoBK,OADY;AAEzCC,eAAO,KAAKN,cAAL,CAAoBM;AAFc,OAAzB,CAAlB;AAIA,UAAMC,YAAYH,UAAUI,SAAV,GAAsBC,SAAtB,EAAlB;AACA,aAAOF,SAAP;AACD;;;4CAEuBF,O,EAAS;AAC/B,UAAMD,YAAY,IAAIrB,oBAAJ,CAAyB;AACzCsB,wBADyC;AAEzCC,eAAO;AAFkC,OAAzB,CAAlB;AAIA,UAAMC,YAAYH,UAAUI,SAAV,GAAsBC,SAAtB,EAAlB;AACA,aAAOF,SAAP;AACD;;;qCAEgBG,S,EAAW;AAC1B,aAAO,KAAKV,cAAZ;AACD,K,CAED;AACA;;;;sCACkBW,K,EAAO;AACvB,aAAOA,KAAP;AACD;;;;;;SAlDkBjB,S","sourcesContent":["import {Vector3, experimental} from 'math.gl';\nconst {SphericalCoordinates} = experimental;\nimport assert from '../utils/assert';\n\nconst defaultState = {\n  position: [0, 0, 0],\n  lookAt: [0, 0, 0],\n  up: [0, 0, 1],\n\n  rotationX: 0,\n  rotationY: 0,\n\n  fov: 50,\n  near: 1,\n  far: 100\n};\n\n/* Helpers */\n\nexport default class ViewState {\n  constructor(opts) {\n    const {\n      width, // Width of viewport\n      height, // Height of viewport\n\n      // Position and orientation\n      position = defaultState.position // typically in meters from anchor point\n    } = opts;\n\n    assert(Number.isFinite(width), '`width` must be supplied');\n    assert(Number.isFinite(height), '`height` must be supplied');\n\n    this._viewportProps = this._applyConstraints(\n      Object.assign({}, opts, {\n        position: new Vector3(position)\n      })\n    );\n  }\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getDirection() {\n    const spherical = new SphericalCoordinates({\n      bearing: this._viewportProps.bearing,\n      pitch: this._viewportProps.pitch\n    });\n    const direction = spherical.toVector3().normalize();\n    return direction;\n  }\n\n  getDirectionFromBearing(bearing) {\n    const spherical = new SphericalCoordinates({\n      bearing,\n      pitch: 90\n    });\n    const direction = spherical.toVector3().normalize();\n    return direction;\n  }\n\n  shortestPathFrom(viewState) {\n    return this._viewportProps;\n  }\n\n  // Redefined by subclass\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    return props;\n  }\n}\n"],"file":"view-state.js"}