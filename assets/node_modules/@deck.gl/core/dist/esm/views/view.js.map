{"version":3,"sources":["../../../src/views/view.js"],"names":["Viewport","parsePosition","getPosition","deepEqual","assert","View","props","id","x","y","width","height","projectionMatrix","fovy","near","far","modelMatrix","viewportInstance","type","constructor","displayName","Object","assign","_parseDimensions","equals","bind","seal","view","viewChanged","viewState","viewportDimensions","getDimensions","_getViewport","_x","_y","_width","_height","ViewportType"],"mappings":"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","sourcesContent":["import Viewport from '../viewports/viewport';\nimport {parsePosition, getPosition} from '../utils/positions';\nimport {deepEqual} from '../utils/deep-equal';\nimport assert from '../utils/assert';\n\nexport default class View {\n  constructor(props = {}) {\n    const {\n      id = null,\n\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n\n      // Viewport Options\n      projectionMatrix = null, // Projection matrix\n      fovy = 75, // Perspective projection parameters, used if projectionMatrix not supplied\n      near = 0.1, // Distance of near clipping plane\n      far = 1000, // Distance of far clipping plane\n      modelMatrix = null, // A model matrix to be applied to position, to match the layer props API\n\n      // A View can be a wrapper for a viewport instance\n      viewportInstance = null,\n\n      // Internal: Viewport Type\n      type = Viewport // TODO - default to WebMercator?\n    } = props;\n\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n\n    // Id\n    this.id = id || this.constructor.displayName || 'view';\n    this.type = type;\n\n    this.props = Object.assign({}, props, {\n      projectionMatrix,\n      fovy,\n      near,\n      far,\n      modelMatrix\n    });\n\n    // Extents\n    this._parseDimensions({x, y, width, height});\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n\n    Object.seal(this);\n  }\n\n  equals(view) {\n    if (this === view) {\n      return true;\n    }\n\n    // if `viewportInstance` is set, it is the only prop that is used\n    // Delegate to `Viewport.equals`\n    if (this.viewportInstance) {\n      return view.viewportInstance && this.viewportInstance.equals(view.viewportInstance);\n    }\n\n    // TODO - implement deep equal on view descriptors\n    const viewChanged = deepEqual(this, view);\n\n    return viewChanged;\n  }\n\n  // Build a `Viewport` from a view descriptor\n  // TODO - add support for autosizing viewports using width and height\n  makeViewport({width, height, viewState}) {\n    if (this.viewportInstance) {\n      return this.viewportInstance;\n    }\n\n    // Resolve relative viewport dimensions\n    const viewportDimensions = this.getDimensions({width, height});\n    const props = Object.assign({viewState}, viewState, this.props, viewportDimensions);\n    return this._getViewport(props);\n  }\n\n  // Resolve relative viewport dimensions into actual dimensions (y='50%', width=800 => y=400)\n  getDimensions({width, height}) {\n    return {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n  }\n\n  // Overridable method\n  _getViewport(props) {\n    // Get the type of the viewport\n    const {type: ViewportType} = this;\n    return new ViewportType(props);\n  }\n\n  // Parse relative viewport dimension descriptors (e.g {y: '50%', height: '50%'})\n  _parseDimensions({x, y, width, height}) {\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n  }\n}\n"],"file":"view.js"}