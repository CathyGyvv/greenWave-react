{"version":3,"sources":["../../../src/transitions/transition.js"],"names":["TRANSITION_STATE","NONE","PENDING","IN_PROGRESS","ENDED","noop","Transition","props","_startTime","_state","duration","easing","t","onStart","onUpdate","onInterrupt","onEnd","Object","assign","inProgress","_setState","currentTime","state","shouldEnd","time","newState"],"mappings":";;;;;;;;;;;;;;;AAAO,IAAMA,mBAAmB;AAC9BC,QAAM,MADwB;AAE9BC,WAAS,SAFqB;AAG9BC,eAAa,aAHiB;AAI9BC,SAAO;AAJuB,CAAzB;;;AAOP,SAASC,IAAT,GAAgB,CAAE;;IAEGC,U;;;AACnB;;;;;;;;;;;;AAYA,sBAAYC,KAAZ,EAAmB;AAAA;;AACjB,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,MAAL,GAAcT,iBAAiBC,IAA/B,CAFiB,CAIjB;;AACA,SAAKS,QAAL,GAAgB,CAAhB;;AACA,SAAKC,MAAL,GAAc;AAAA,aAAKC,CAAL;AAAA,KAAd;;AACA,SAAKC,OAAL,GAAeR,IAAf;AACA,SAAKS,QAAL,GAAgBT,IAAhB;AACA,SAAKU,WAAL,GAAmBV,IAAnB;AACA,SAAKW,KAAL,GAAaX,IAAb;AAEAY,WAAOC,MAAP,CAAc,IAAd,EAAoBX,KAApB;AACD;AAED;;;;;;AASA;;;;0BAIMA,K,EAAO;AACX,UAAI,KAAKY,UAAT,EAAqB;AACnB,aAAKJ,WAAL,CAAiB,IAAjB;AACD;;AACDE,aAAOC,MAAP,CAAc,IAAd,EAAoBX,KAApB;;AACA,WAAKa,SAAL,CAAepB,iBAAiBE,OAAhC;AACD;AAED;;;;;;6BAGS;AACP,UAAI,KAAKiB,UAAT,EAAqB;AACnB,aAAKJ,WAAL,CAAiB,IAAjB;;AACA,aAAKK,SAAL,CAAepB,iBAAiBC,IAAhC;AACD;AACF;AAED;;;;;;;2BAIOoB,W,EAAa;AAClB,UAAI,KAAKC,KAAL,KAAetB,iBAAiBE,OAApC,EAA6C;AAC3C,aAAKM,UAAL,GAAkBa,WAAlB;;AACA,aAAKD,SAAL,CAAepB,iBAAiBG,WAAhC;AACD;;AAED,UAAI,KAAKmB,KAAL,KAAetB,iBAAiBG,WAApC,EAAiD;AAC/C,YAAIoB,YAAY,KAAhB;AACA,YAAIC,OAAO,CAACH,cAAc,KAAKb,UAApB,IAAkC,KAAKE,QAAlD;;AACA,YAAIc,QAAQ,CAAZ,EAAe;AACbA,iBAAO,CAAP;AACAD,sBAAY,IAAZ;AACD;;AACD,aAAKC,IAAL,GAAY,KAAKb,MAAL,CAAYa,IAAZ,CAAZ;AACA,aAAKV,QAAL,CAAc,IAAd;;AAEA,YAAIS,SAAJ,EAAe;AACb,eAAKH,SAAL,CAAepB,iBAAiBI,KAAhC;AACD;;AACD,eAAO,IAAP;AACD;;AAED,aAAO,KAAP;AACD;AAED;;;;8BACUqB,Q,EAAU;AAClB,UAAI,KAAKhB,MAAL,KAAgBgB,QAApB,EAA8B;AAC5B;AACD;;AAED,WAAKhB,MAAL,GAAcgB,QAAd;;AAEA,cAAQA,QAAR;AACE,aAAKzB,iBAAiBE,OAAtB;AACE,eAAKW,OAAL,CAAa,IAAb;AACA;;AACF,aAAKb,iBAAiBI,KAAtB;AACE,eAAKY,KAAL,CAAW,IAAX;AACA;;AACF;AAPF;AASD;;;wBA5EW;AACV,aAAO,KAAKP,MAAZ;AACD;;;wBAEgB;AACf,aAAO,KAAKA,MAAL,KAAgBT,iBAAiBE,OAAjC,IAA4C,KAAKO,MAAL,KAAgBT,iBAAiBG,WAApF;AACD","sourcesContent":["export const TRANSITION_STATE = {\n  NONE: 'none',\n  PENDING: 'pending',\n  IN_PROGRESS: 'in_progress',\n  ENDED: 'ended'\n};\n\nfunction noop() {}\n\nexport default class Transition {\n  /**\n   * @params props {object} - properties of the transition.\n   *\n   * @params props.duration {number} - total time to complete the transition\n   * @params props.easing {func} - easing function\n   * @params props.onStart {func} - callback when transition starts\n   * @params props.onUpdate {func} - callback when transition updates\n   * @params props.onInterrupt {func} - callback when transition is interrupted\n   * @params props.onEnd {func} - callback when transition ends\n   *\n   * Any additional properties are also saved on the instance but have no effect.\n   */\n  constructor(props) {\n    this._startTime = null;\n    this._state = TRANSITION_STATE.NONE;\n\n    // Defaults\n    this.duration = 1;\n    this.easing = t => t;\n    this.onStart = noop;\n    this.onUpdate = noop;\n    this.onInterrupt = noop;\n    this.onEnd = noop;\n\n    Object.assign(this, props);\n  }\n\n  /* Public API */\n  get state() {\n    return this._state;\n  }\n\n  get inProgress() {\n    return this._state === TRANSITION_STATE.PENDING || this._state === TRANSITION_STATE.IN_PROGRESS;\n  }\n\n  /**\n   * (re)start this transition.\n   * @params props {object} - optional overriding props. see constructor\n   */\n  start(props) {\n    if (this.inProgress) {\n      this.onInterrupt(this);\n    }\n    Object.assign(this, props);\n    this._setState(TRANSITION_STATE.PENDING);\n  }\n\n  /**\n   * cancel this transition if it is in progress.\n   */\n  cancel() {\n    if (this.inProgress) {\n      this.onInterrupt(this);\n      this._setState(TRANSITION_STATE.NONE);\n    }\n  }\n\n  /**\n   * update this transition.\n   * @params currentTime {number} - timestamp of the update. should be in the same unit as `duration`.\n   */\n  update(currentTime) {\n    if (this.state === TRANSITION_STATE.PENDING) {\n      this._startTime = currentTime;\n      this._setState(TRANSITION_STATE.IN_PROGRESS);\n    }\n\n    if (this.state === TRANSITION_STATE.IN_PROGRESS) {\n      let shouldEnd = false;\n      let time = (currentTime - this._startTime) / this.duration;\n      if (time >= 1) {\n        time = 1;\n        shouldEnd = true;\n      }\n      this.time = this.easing(time);\n      this.onUpdate(this);\n\n      if (shouldEnd) {\n        this._setState(TRANSITION_STATE.ENDED);\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n  /* Private API */\n  _setState(newState) {\n    if (this._state === newState) {\n      return;\n    }\n\n    this._state = newState;\n\n    switch (newState) {\n      case TRANSITION_STATE.PENDING:\n        this.onStart(this);\n        break;\n      case TRANSITION_STATE.ENDED:\n        this.onEnd(this);\n        break;\n      default:\n    }\n  }\n}\n"],"file":"transition.js"}