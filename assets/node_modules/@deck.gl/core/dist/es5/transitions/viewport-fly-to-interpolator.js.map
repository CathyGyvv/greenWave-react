{"version":3,"sources":["../../../src/transitions/viewport-fly-to-interpolator.js"],"names":["LINEARLY_INTERPOLATED_PROPS","ViewportFlyToInterpolator","compare","extract","required","startProps","endProps","t","viewport","key","TransitionInterpolator"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,8BAA8B,CAAC,SAAD,EAAY,OAAZ,CAApC;AAEA;;;;;;;;IAOqBC,yB;;;;;AACnB,uCAAc;AAAA;;AAAA,iJACN;AACJC,eAAS,CAAC,WAAD,EAAc,UAAd,EAA0B,MAA1B,EAAkC,SAAlC,EAA6C,OAA7C,CADL;AAEJC,eAAS,CAAC,OAAD,EAAU,QAAV,EAAoB,WAApB,EAAiC,UAAjC,EAA6C,MAA7C,EAAqD,SAArD,EAAgE,OAAhE,CAFL;AAGJC,gBAAU,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgC,WAAhC,EAA6C,MAA7C;AAHN,KADM;AAMb;;;;qCAEgBC,U,EAAYC,Q,EAAUC,C,EAAG;AACxC,UAAMC,WAAW,4CAAcH,UAAd,EAA0BC,QAA1B,EAAoCC,CAApC,CAAjB,CADwC,CAGxC;AACA;AACA;AACA;AACA;;AACA,4BAAkBP,2BAAlB,eAA+C;AAA1C,YAAMS,MAAOT,2BAAP,IAAN;AACHQ,iBAASC,GAAT,IAAgB,gBAAKJ,WAAWI,GAAX,KAAmB,CAAxB,EAA2BH,SAASG,GAAT,KAAiB,CAA5C,EAA+CF,CAA/C,CAAhB;AACD;;AAED,aAAOC,QAAP;AACD;;;;EAtBoDE,+B","sourcesContent":["import TransitionInterpolator from './transition-interpolator';\nimport {lerp} from 'math.gl';\n\nimport {flyToViewport} from 'viewport-mercator-project';\n\nconst LINEARLY_INTERPOLATED_PROPS = ['bearing', 'pitch'];\n\n/**\n * This class adapts mapbox-gl-js Map#flyTo animation so it can be used in\n * react/redux architecture.\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport default class ViewportFlyToInterpolator extends TransitionInterpolator {\n  constructor() {\n    super({\n      compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      extract: ['width', 'height', 'longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      required: ['width', 'height', 'latitude', 'longitude', 'zoom']\n    });\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const viewport = flyToViewport(startProps, endProps, t);\n\n    // Linearly interpolate 'bearing' and 'pitch'.\n    // If pitch/bearing are not supplied, they are interpreted as zeros in viewport calculation\n    // (fallback defined in WebMercatorViewport)\n    // Because there is no guarantee that the current controller's ViewState normalizes\n    // these props, safe guard is needed to avoid generating NaNs\n    for (const key of LINEARLY_INTERPOLATED_PROPS) {\n      viewport[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n    }\n\n    return viewport;\n  }\n}\n"],"file":"viewport-fly-to-interpolator.js"}