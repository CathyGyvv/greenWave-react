{"version":3,"sources":["../../../../src/experimental/reflection-effect/reflection-effect.js"],"names":["ReflectionEffect","reflectivity","blur","framebuffer","setNeedsRedraw","vs","reflectionVertex","fs","reflectionFragment","modules","shaderCache","context","gl","layerManager","unitQuad","Model","Object","assign","getShaders","id","geometry","Geometry","drawMode","GL","TRIANGLE_FAN","vertices","Float32Array","Framebuffer","depth","viewport","dpi","window","devicePixelRatio","resize","width","height","pitch","bind","setViewport","WebMercatorViewport","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","drawLayers","pass","unbind","render","reflectionTexture","texture","reflectionTextureWidth","reflectionTextureHeight","Effect"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global window */\nimport {GL, Framebuffer, Model, Geometry} from 'luma.gl';\nimport Effect from '../lib/effect';\nimport WebMercatorViewport from '../../viewports/web-mercator-viewport';\n\nimport reflectionVertex from './reflection-effect-vertex.glsl';\nimport reflectionFragment from './reflection-effect-fragment.glsl';\n\nexport default class ReflectionEffect extends Effect {\n  /**\n   * @classdesc\n   * ReflectionEffect\n   *\n   * @class\n   * @param reflectivity How visible reflections should be over the map, between 0 and 1\n   * @param blur how blurry the reflection should be, between 0 and 1\n   */\n\n  constructor(reflectivity = 0.5, blur = 0.5) {\n    super();\n    this.reflectivity = reflectivity;\n    this.blur = blur;\n    this.framebuffer = null;\n    this.setNeedsRedraw();\n  }\n\n  getShaders() {\n    return {\n      vs: reflectionVertex,\n      fs: reflectionFragment,\n      modules: [],\n      shaderCache: this.context.shaderCache\n    };\n  }\n\n  initialize({gl, layerManager}) {\n    this.unitQuad = new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: 'reflection-effect',\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          vertices: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n        })\n      })\n    );\n    this.framebuffer = new Framebuffer(gl, {depth: true});\n  }\n\n  preDraw({gl, layerManager}) {\n    const {viewport} = layerManager.context;\n    /*\n     * the renderer already has a reference to this, but we don't have a reference to the renderer.\n     * when we refactor the camera code, we should make sure we get a reference to the renderer so\n     * that we can keep this in one place.\n     */\n    const dpi = (typeof window !== 'undefined' && window.devicePixelRatio) || 1;\n    this.framebuffer.resize({width: dpi * viewport.width, height: dpi * viewport.height});\n    const pitch = viewport.pitch;\n    this.framebuffer.bind();\n    /* this is a huge hack around the existing viewport class.\n     * TODO in the future, once we implement bona-fide cameras, we really need to fix this.\n     */\n    layerManager.setViewport(\n      new WebMercatorViewport(Object.assign({}, viewport, {pitch: -180 - pitch}))\n    );\n    gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n    layerManager.drawLayers({pass: 'reflection'});\n    layerManager.setViewport(viewport);\n    this.framebuffer.unbind();\n  }\n\n  draw({gl, layerManager}) {\n    /*\n     * Render our unit quad.\n     * This will cover the entire screen, but will lie behind all other geometry.\n     * This quad will sample the previously generated reflection texture\n     * in order to create the reflection effect\n     */\n    this.unitQuad.render({\n      reflectionTexture: this.framebuffer.texture,\n      reflectionTextureWidth: this.framebuffer.width,\n      reflectionTextureHeight: this.framebuffer.height,\n      reflectivity: this.reflectivity,\n      blur: this.blur\n    });\n  }\n\n  finalize({gl, layerManager}) {\n    /* TODO: Free resources? */\n  }\n}\n"],"file":"reflection-effect.js"}