{"version":3,"sources":["../../../src/views/view-manager.js"],"names":["INITIAL_VIEW_STATE","latitude","longitude","zoom","ViewManager","props","views","width","height","viewState","_viewports","_needsRedraw","_needsUpdate","Object","seal","setProps","clearRedrawFlags","redraw","reason","_rebuildViewportsFromViews","xyz","opts","topLeft","viewports","getViewports","i","length","viewport","contains","project","containsPixel","unproject","setViews","setViewState","setSize","context","useDevicePixels","Number","isFinite","setNeedsUpdate","filter","Boolean","map","Viewport","View","viewportInstance","view","viewsChanged","_diffViews","viewStateChanged","log","warn","updateReason","makeViewport","newViews","oldViews","some","_","equals"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {deepEqual} from '../utils/deep-equal';\nimport View from '../views/view';\nimport Viewport from '../viewports/viewport';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\n\nconst INITIAL_VIEW_STATE = {latitude: 0, longitude: 0, zoom: 1};\n\nexport default class ViewManager {\n  constructor(props = {}) {\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = INITIAL_VIEW_STATE;\n\n    this._viewports = []; // Generated viewports\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = true;\n\n    Object.seal(this);\n\n    // Init with default map viewport\n    this.setProps(props);\n  }\n\n  finalize() {}\n\n  // Check if a redraw is needed\n  needsRedraw({clearRedrawFlags = true} = {}) {\n    const redraw = this._needsRedraw;\n    if (clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  // Layers will be redrawn (in next animation frame)\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Get a set of viewports for a given width and height\n  // TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n  getViewports() {\n    this._rebuildViewportsFromViews();\n    return this._viewports;\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - [x, y] or [x, y, z] in top left coords\n   */\n  project(xyz, opts = {topLeft: true}) {\n    const viewports = this.getViewports();\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.contains(xyz, opts)) {\n        return viewport.project(xyz, opts);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, opts) {\n    const viewports = this.getViewports();\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.containsPixel(xyz, opts)) {\n        return viewport.unproject(xyz);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Set props needed for layer rendering and picking.\n   * Parameters are to be passed as a single object, with the following values:\n   * @param {Boolean} useDevicePixels\n   */\n  /* eslint-disable complexity */\n  setProps(props) {\n    if ('views' in props) {\n      this.setViews(props.views);\n    }\n\n    // TODO - support multiple view states\n    if ('viewState' in props) {\n      this.setViewState(props.viewState);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this.setSize(props.width, props.height);\n    }\n\n    if ('useDevicePixels' in props) {\n      this.context.useDevicePixels = props.useDevicePixels;\n    }\n  }\n  /* eslint-enable complexity */\n\n  setSize(width, height) {\n    assert(Number.isFinite(width) && Number.isFinite(height));\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  setViews(views) {\n    // DEPRECATED: Ensure any \"naked\" Viewports are wrapped in View instances\n    views = flatten(views, {filter: Boolean}).map(\n      view => (view instanceof Viewport ? new View({viewportInstance: view}) : view)\n    );\n\n    const viewsChanged = this._diffViews(views, this.views);\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n\n    this.views = views;\n  }\n\n  setViewState(viewState) {\n    if (viewState) {\n      const viewStateChanged = deepEqual(viewState, this.viewState);\n\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n\n      this.viewState = viewState;\n    } else {\n      log.warn('setting null viewState')();\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  // Rebuilds viewports from descriptors towards a certain window size\n  _rebuildViewportsFromViews() {\n    const updateReason = this._needsUpdate;\n    if (updateReason) {\n      const {width, height, views, viewState} = this;\n\n      this._viewports = views.map(view => view.makeViewport({width, height, viewState}));\n\n      // We've just rebuilt the Viewports to match the View descriptors,\n      // so clear the update flag and set the render flag\n      this._needsUpdate = false;\n    }\n  }\n\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews, oldViews) {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n}\n"],"file":"view-manager.js"}