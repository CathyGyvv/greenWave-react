{"version":3,"sources":["../../../src/views/orbit-view.js"],"names":["DEGREES_TO_RADIANS","Math","PI","OrbitViewport","xyz","topLeft","v","pixelProjectionMatrix","x","y","z","y2","height","pixelUnprojectionMatrix","Viewport","OrbitView","props","viewState","width","fovy","fov","near","far","aspect","Number","isFinite","fovyRadians","id","viewMatrix","_getViewMatrix","projectionMatrix","distance","rotationX","rotationOrbit","orbitAxis","lookAt","up","zoom","rotationMatrix","translateMatrix","boundingBox","_getViewport","halfMaxSide","max","tan","View","displayName"],"mappings":"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","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\n// TODO - use math.gl\nimport {createMat4, transformVector} from '../utils/math-utils';\nimport mat4_multiply from 'gl-mat4/multiply';\nimport mat4_lookAt from 'gl-mat4/lookAt';\nimport mat4_scale from 'gl-mat4/scale';\nimport mat4_perspective from 'gl-mat4/perspective';\nimport mat4_translate from 'gl-mat4/translate';\nimport mat4_rotateX from 'gl-mat4/rotateX';\nimport mat4_rotateY from 'gl-mat4/rotateY';\nimport mat4_rotateZ from 'gl-mat4/rotateZ';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\n// TODO - remove need for custom project overrides\nclass OrbitViewport extends Viewport {\n  project(xyz, {topLeft = false} = {}) {\n    const v = transformVector(this.pixelProjectionMatrix, [...xyz, 1]);\n    const [x, y, z] = v;\n    const y2 = topLeft ? this.height - y : y;\n    return [x, y2, z];\n  }\n\n  unproject(xyz, {topLeft = false} = {}) {\n    const [x, y, z] = xyz;\n    const y2 = topLeft ? this.height - y : y;\n    return transformVector(this.pixelUnprojectionMatrix, [x, y2, z, 1]);\n  }\n}\n\nexport default class OrbitView extends View {\n  // Get camera `distance` to make view fit a box centered at lookat position in the viewport.\n  // @param {Array} boundingBox - [sizeX, sizeY, sizeZ]], defines the dimensions of bounding box\n  static getDistance({boundingBox, fov}) {\n    const halfMaxSide = Math.max(boundingBox[0], boundingBox[1], boundingBox[2]) / 2;\n    const distance = halfMaxSide / Math.tan(fov / 180 * Math.PI / 2);\n    return distance;\n  }\n\n  /* eslint-disable complexity, max-statements */\n  _getViewport(props) {\n    const {viewState} = props;\n    const width = props.width || 1;\n    const height = props.height || 1;\n\n    // Get view matrix parameters from view state\n    // Projection matrix arguments\n    // TODO - Extracting from viewState is deprecated\n    const fovy = props.fov || props.fovy || viewState.fovy || 75; // Field of view covered by camera\n    const near = props.near || viewState.near || 1; // Distance of near clipping plane\n    const far = props.far || viewState.far || 100; // Distance of far clipping plane\n    const aspect = Number.isFinite(viewState.aspect) ? viewState.aspect : width / height;\n\n    const fovyRadians = fovy * DEGREES_TO_RADIANS;\n\n    return new OrbitViewport({\n      id: this.id,\n      viewMatrix: this._getViewMatrix(props.viewState),\n      projectionMatrix: mat4_perspective([], fovyRadians, aspect, near, far),\n      x: props.x,\n      y: props.y,\n      width,\n      height\n    });\n  }\n  /* eslint-enable complexity, max-statements */\n\n  _getViewMatrix(viewState) {\n    const {\n      distance, // From eye position to lookAt\n      rotationX = 0, // Rotating angle around X axis\n      rotationOrbit = 0, // Rotating angle around orbit axis\n      orbitAxis = 'Z', // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'\n\n      lookAt = [0, 0, 0], // Which point is camera looking at, default origin\n      up = [0, 1, 0], // Defines up direction, default positive y axis\n      zoom = 1\n    } = viewState;\n\n    const rotationMatrix = mat4_rotateX([], createMat4(), -rotationX / 180 * Math.PI);\n    if (orbitAxis === 'Z') {\n      mat4_rotateZ(rotationMatrix, rotationMatrix, -rotationOrbit / 180 * Math.PI);\n    } else {\n      mat4_rotateY(rotationMatrix, rotationMatrix, -rotationOrbit / 180 * Math.PI);\n    }\n\n    const translateMatrix = createMat4();\n    mat4_scale(translateMatrix, translateMatrix, [zoom, zoom, zoom]);\n    mat4_translate(translateMatrix, translateMatrix, [-lookAt[0], -lookAt[1], -lookAt[2]]);\n\n    const viewMatrix = mat4_lookAt([], [0, 0, distance], [0, 0, 0], up);\n    mat4_multiply(\n      viewMatrix,\n      viewMatrix,\n      mat4_multiply(rotationMatrix, rotationMatrix, translateMatrix)\n    );\n\n    return viewMatrix;\n  }\n\n  /** Move camera to make a model bounding box centered at lookat position fit in the viewport.\n   * @param {Array} boundingBox - [sizeX, sizeY, sizeZ]], define the dimensions of bounding box\n   * @returns a new OrbitViewport object\n   */\n  fitBounds(boundingBox, viewState) {\n    const {width, height, fov, near, far} = this;\n\n    return this._getViewport({\n      width,\n      height,\n      fov,\n      near,\n      far\n    });\n  }\n}\n\nOrbitView.displayName = 'OrbitView';\n"],"file":"orbit-view.js"}