{"version":3,"sources":["../../../src/views/third-person-view.js"],"names":["SphericalCoordinates","experimental","getDirectionFromBearingAndPitch","bearing","pitch","spherical","toVector3","normalize","ThirdPersonView","props","viewState","position","up","zoom","direction","distance","eye","scale","multiply","Vector3","viewMatrix","Matrix4","multiplyRight","lookAt","center","Viewport","Object","assign","id","View","displayName"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;IACOA,oB,GAAwBC,kB,CAAxBD,oB;;AAEP,SAASE,+BAAT,OAA2D;AAAA,MAAjBC,OAAiB,QAAjBA,OAAiB;AAAA,MAARC,KAAQ,QAARA,KAAQ;AACzD,MAAMC,YAAY,IAAIL,oBAAJ,CAAyB;AAACG,oBAAD;AAAUC;AAAV,GAAzB,CAAlB;AACA,SAAOC,UAAUC,SAAV,GAAsBC,SAAtB,EAAP;AACD;;IAEoBC,e;;;;;;;;;;;;;iCACNC,K,EAAO;AAAA,6BAC2BA,MAAMC,SADjC;AAAA,UACXP,OADW,oBACXA,OADW;AAAA,UACFC,KADE,oBACFA,KADE;AAAA,UACKO,QADL,oBACKA,QADL;AAAA,UACeC,EADf,oBACeA,EADf;AAAA,UACmBC,IADnB,oBACmBA,IADnB;AAGlB,UAAMC,YAAYZ,gCAAgC;AAChDC,wBADgD;AAEhDC;AAFgD,OAAhC,CAAlB;AAKA,UAAMW,WAAWF,OAAO,EAAxB,CARkB,CAUlB;AACA;;AACA,UAAMG,MAAMF,UAAUG,KAAV,CAAgB,CAACF,QAAjB,EAA2BG,QAA3B,CAAoC,IAAIC,aAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAC,CAAnB,CAApC,CAAZ;AAEA,UAAMC,aAAa,IAAIC,aAAJ,GAAcC,aAAd,CACjB,IAAID,aAAJ,GAAcE,MAAd,CAAqB;AAACP,gBAAD;AAAMQ,gBAAQb,QAAd;AAAwBC;AAAxB,OAArB,CADiB,CAAnB;AAIA,aAAO,IAAIa,iBAAJ,CACLC,OAAOC,MAAP,CAAc,EAAd,EAAkBlB,KAAlB,EAAyB;AACvBmB,YAAI,KAAKA,EADc;AAEvBf,cAAM,IAFiB;AAEX;AACZO;AAHuB,OAAzB,CADK,CAAP;AAOD;;;;EA1B0CS,a;;;AA6B7CrB,gBAAgBsB,WAAhB,GAA8B,iBAA9B","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\nimport {Vector3, Matrix4, experimental} from 'math.gl';\nconst {SphericalCoordinates} = experimental;\n\nfunction getDirectionFromBearingAndPitch({bearing, pitch}) {\n  const spherical = new SphericalCoordinates({bearing, pitch});\n  return spherical.toVector3().normalize();\n}\n\nexport default class ThirdPersonView extends View {\n  _getViewport(props) {\n    const {bearing, pitch, position, up, zoom} = props.viewState;\n\n    const direction = getDirectionFromBearingAndPitch({\n      bearing,\n      pitch\n    });\n\n    const distance = zoom * 50;\n\n    // TODO somehow need to flip z to make it work\n    // check if the position offset is done in the base viewport\n    const eye = direction.scale(-distance).multiply(new Vector3(1, 1, -1));\n\n    const viewMatrix = new Matrix4().multiplyRight(\n      new Matrix4().lookAt({eye, center: position, up})\n    );\n\n    return new Viewport(\n      Object.assign({}, props, {\n        id: this.id,\n        zoom: null, // triggers meter level zoom\n        viewMatrix\n      })\n    );\n  }\n}\n\nThirdPersonView.displayName = 'ThirdPersonView';\n"],"file":"third-person-view.js"}