{"version":3,"sources":["../../../src/controllers/controller.js"],"names":["NO_TRANSITION_PROPS","transitionDuration","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","ZOOM_ACCEL","EVENT_TYPES","WHEEL","PAN","PINCH","DOUBLE_TAP","KEYBOARD","Controller","ControllerState","options","controllerState","controllerStateProps","eventManager","transitionManager","TransitionManager","_events","_state","isDragging","events","onViewportChange","onViewStateChange","onStateChange","invertPan","handleEvent","bind","setProps","event","Object","assign","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onDoubleTap","_onWheel","_onKeyDown","offsetCenter","x","y","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","props","viewState","toggleEvents","processViewStateChange","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","isInteractive","eventNames","enabled","forEach","eventName","on","off","newControllerState","extraProps","interactionState","getViewportProps","changed","oldViewState","getInteractiveState","pos","getCenter","panStart","rotateStart","updateViewport","alternateMode","isFunctionKeyPressed","rightButton","_onPanMove","_onPanRotate","panEnd","rotateEnd","pan","_onPanRotateMap","_onPanRotateStandard","deltaX","deltaY","width","height","deltaScaleX","deltaScaleY","rotate","centerY","startY","Math","abs","min","max","delta","scale","exp","zoom","zoomStart","startPinchRotation","rotation","zoomEnd","isZoomOut","_getTransitionProps","funcKey","keyCode","zoomOut","zoomIn","rotateLeft","moveLeft","rotateRight","moveRight","rotateUp","moveUp","rotateDown","moveDown"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport TransitionManager from './transition-manager';\nimport assert from '../utils/assert';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\n// EVENT HANDLING PARAMETERS\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\nconst ZOOM_ACCEL = 0.01;\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nexport default class Controller {\n  constructor(ControllerState, options = {}) {\n    assert(ControllerState);\n    this.ControllerState = ControllerState;\n    this.controllerState = null;\n    this.controllerStateProps = null;\n    this.eventManager = null;\n    this.transitionManager = new TransitionManager(ControllerState, options);\n    this._events = null;\n    this._state = {\n      isDragging: false\n    };\n    this.events = [];\n    this.onViewportChange = null;\n    this.onViewStateChange = null;\n    this.onStateChange = null;\n    this.invertPan = false;\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.setProps(options);\n  }\n\n  finalize() {}\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event) {\n    const {ControllerState} = this;\n    this.controllerState = new ControllerState(\n      Object.assign({}, this.controllerStateProps, this._state)\n    );\n\n    switch (event.type) {\n      case 'panstart':\n        return this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {\n      offsetCenter: {x, y}\n    } = event;\n    return [x, y];\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging() {\n    return this._state.isDragging;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  /* eslint-disable complexity, max-statements */\n  setProps(props) {\n    if ('onViewportChange' in props) {\n      this.onViewportChange = props.onViewportChange;\n    }\n    if ('onViewStateChange' in props) {\n      this.onViewStateChange = props.onViewStateChange;\n    }\n    if ('onStateChange' in props) {\n      this.onStateChange = props.onStateChange;\n    }\n    if ('viewState' in props) {\n      this.controllerStateProps = Object.assign({}, props, props.viewState);\n    } else {\n      // TODO - deprecated, props on top level\n      this.controllerStateProps = props;\n    }\n\n    if ('eventManager' in props && this.eventManager !== props.eventManager) {\n      // EventManager has changed\n      this.eventManager = props.eventManager;\n      this._events = {};\n      this.toggleEvents(this.events, true);\n    }\n\n    this.transitionManager.processViewStateChange(this.controllerStateProps);\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewportChange || this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n  /* eslint-enable complexity, max-statements */\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // DEPRECATED\n\n  setOptions(props) {\n    return this.setProps(props);\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newControllerState, extraProps = {}, interactionState = {}) {\n    const viewState = Object.assign({}, newControllerState.getViewportProps(), extraProps);\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = true;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    if (changed) {\n      const oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n      if (this.onViewportChange) {\n        this.onViewportChange(viewState, interactionState, oldViewState);\n      }\n      if (this.onViewStateChange) {\n        this.onViewStateChange({viewState, interactionState, oldViewState});\n      }\n    }\n\n    Object.assign(\n      this._state,\n      Object.assign({}, newControllerState.getInteractiveState(), interactionState)\n    );\n    if (this.onStateChange) {\n      this.onStateChange(this._state);\n    }\n    // this.setState(Object.assign({}, newControllerState.getInteractiveState(), extraState));\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.panStart({pos}).rotateStart({pos});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `panmove` event.\n  _onPan(event) {\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n    alternateMode = this.invertPan ? !alternateMode : alternateMode;\n    return alternateMode ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  // Default handler for the `panend` event.\n  _onPanEnd(event) {\n    const newControllerState = this.controllerState.panEnd().rotateEnd();\n    return this.updateViewport(newControllerState, null, {isDragging: false});\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({pos});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    return this.invertPan ? this._onPanRotateMap(event) : this._onPanRotateStandard(event);\n  }\n\n  // Normal pan to rotate\n  _onPanRotateStandard(event) {\n    const {deltaX, deltaY} = event;\n    const {width, height} = this.controllerState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    const deltaScaleY = deltaY / height;\n\n    const newControllerState = this.controllerState.rotate({deltaScaleX, deltaScaleY});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  _onPanRotateMap(event) {\n    const {deltaX, deltaY} = event;\n    const [, centerY] = this.getCenter(event);\n    const startY = centerY - deltaY;\n    const {width, height} = this.controllerState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n\n    const newControllerState = this.controllerState.rotate({deltaScaleX, deltaScaleY});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * ZOOM_ACCEL)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS);\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._state.startPinchRotation = event.rotation;\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `pinch` event.\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      const {startPinchRotation} = this._state;\n      newControllerState = newControllerState.rotate({\n        deltaScaleX: -(rotation - startPinchRotation) / 180\n      });\n    }\n\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `pinchend` event.\n  _onPinchEnd(event) {\n    const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n    this._state.startPinchRotation = 0;\n    return this.updateViewport(newControllerState, null, {isDragging: false});\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    return this.updateViewport(newControllerState, this._getTransitionProps());\n  }\n\n  /* eslint-disable complexity */\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {controllerState} = this;\n    let newControllerState;\n\n    switch (event.srcEvent.keyCode) {\n      case 189: // -\n        newControllerState = funcKey\n          ? controllerState.zoomOut().zoomOut()\n          : controllerState.zoomOut();\n        break;\n      case 187: // +\n        newControllerState = funcKey ? controllerState.zoomIn().zoomIn() : controllerState.zoomIn();\n        break;\n      case 37: // left\n        newControllerState = funcKey ? controllerState.rotateLeft() : controllerState.moveLeft();\n        break;\n      case 39: // right\n        newControllerState = funcKey ? controllerState.rotateRight() : controllerState.moveRight();\n        break;\n      case 38: // up\n        newControllerState = funcKey ? controllerState.rotateUp() : controllerState.moveUp();\n        break;\n      case 40: // down\n        newControllerState = funcKey ? controllerState.rotateDown() : controllerState.moveDown();\n        break;\n      default:\n        return false;\n    }\n    return this.updateViewport(newControllerState, this._getTransitionProps());\n  }\n  /* eslint-enable complexity */\n\n  _getTransitionProps() {\n    // Transitions on double-tap and key-down are only supported by MapController\n    return NO_TRANSITION_PROPS;\n  }\n}\n"],"file":"controller.js"}