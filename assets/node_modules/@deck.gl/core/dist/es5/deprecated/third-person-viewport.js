"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _viewport = _interopRequireDefault(require("../viewports/viewport"));

var _log = _interopRequireDefault(require("../utils/log"));

var _math = require("math.gl");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } _setPrototypeOf(subClass.prototype, superClass && superClass.prototype); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var SphericalCoordinates = _math.experimental.SphericalCoordinates;

function getDirectionFromBearingAndPitch(_ref) {
  var bearing = _ref.bearing,
      pitch = _ref.pitch;
  var spherical = new SphericalCoordinates({
    bearing: bearing,
    pitch: pitch
  });
  return spherical.toVector3().normalize();
}

var ThirdPersonViewport =
/*#__PURE__*/
function (_Viewport) {
  _inherits(ThirdPersonViewport, _Viewport);

  function ThirdPersonViewport(opts) {
    _classCallCheck(this, ThirdPersonViewport);

    _log.default.deprecated('ThirdPersonViewport', 'ThirdPersonView')();

    var bearing = opts.bearing,
        pitch = opts.pitch,
        position = opts.position,
        up = opts.up,
        zoom = opts.zoom;
    var direction = getDirectionFromBearingAndPitch({
      bearing: bearing,
      pitch: pitch
    });
    var distance = zoom * 50; // TODO somehow need to flip z to make it work
    // check if the position offset is done in the base viewport

    var eye = direction.scale(-distance).multiply(new _math.Vector3(1, 1, -1));
    var viewMatrix = new _math.Matrix4().multiplyRight(new _math.Matrix4().lookAt({
      eye: eye,
      center: position,
      up: up
    }));
    return _possibleConstructorReturn(this, (ThirdPersonViewport.__proto__ || Object.getPrototypeOf(ThirdPersonViewport)).call(this, Object.assign({}, opts, {
      // use meter level
      zoom: null,
      viewMatrix: viewMatrix
    })));
  }

  return ThirdPersonViewport;
}(_viewport.default);

exports.default = ThirdPersonViewport;
//# sourceMappingURL=third-person-viewport.js.map