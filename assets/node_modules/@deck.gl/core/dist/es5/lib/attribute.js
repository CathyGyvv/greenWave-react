"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.glArrayFromType = glArrayFromType;
exports.default = void 0;

var _assert = _interopRequireDefault(require("../utils/assert"));

var _luma = require("luma.gl");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } _setPrototypeOf(subClass.prototype, superClass && superClass.prototype); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Attribute = _luma.experimental.Attribute;
var DEFAULT_STATE = {
  isExternalBuffer: false,
  needsAlloc: false,
  needsUpdate: false,
  needsRedraw: false,
  allocedInstances: -1
};

var LayerAttribute =
/*#__PURE__*/
function (_Attribute) {
  _inherits(LayerAttribute, _Attribute);

  function LayerAttribute(gl) {
    var _this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, LayerAttribute);

    _this = _possibleConstructorReturn(this, (LayerAttribute.__proto__ || Object.getPrototypeOf(LayerAttribute)).call(this, gl, opts));
    var _opts$transition = opts.transition,
        transition = _opts$transition === void 0 ? false : _opts$transition,
        _opts$noAlloc = opts.noAlloc,
        noAlloc = _opts$noAlloc === void 0 ? false : _opts$noAlloc,
        _opts$update = opts.update,
        update = _opts$update === void 0 ? null : _opts$update,
        _opts$accessor = opts.accessor,
        accessor = _opts$accessor === void 0 ? null : _opts$accessor;
    var _opts$defaultValue = opts.defaultValue,
        defaultValue = _opts$defaultValue === void 0 ? [0, 0, 0, 0] : _opts$defaultValue;
    defaultValue = Array.isArray(defaultValue) ? defaultValue : [defaultValue];
    Object.assign(_this.userData, DEFAULT_STATE, opts, {
      transition: transition,
      noAlloc: noAlloc,
      update: update,
      accessor: accessor,
      defaultValue: defaultValue
    });
    Object.seal(_this.userData); // Check all fields and generate helpful error messages

    _this._validateAttributeUpdaters();

    return _this;
  }

  _createClass(LayerAttribute, [{
    key: "needsUpdate",
    value: function needsUpdate() {
      return this.userData.needsUpdate;
    }
  }, {
    key: "needsRedraw",
    value: function needsRedraw() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$clearChangedFlag = _ref.clearChangedFlags,
          clearChangedFlags = _ref$clearChangedFlag === void 0 ? false : _ref$clearChangedFlag;

      var needsRedraw = this.userData.needsRedraw;
      this.userData.needsRedraw = this.userData.needsRedraw && !clearChangedFlags;
      return needsRedraw;
    }
  }, {
    key: "getInstanceCount",
    value: function getInstanceCount() {
      return this.value !== null ? this.value.length / this.size : 0;
    }
  }, {
    key: "getUpdateTriggers",
    value: function getUpdateTriggers() {
      var accessor = this.userData.accessor; // Backards compatibility: allow attribute name to be used as update trigger key

      return [this.id].concat(accessor || []);
    }
  }, {
    key: "supportsTransition",
    value: function supportsTransition() {
      return this.userData.transition;
    } // Checks that typed arrays for attributes are big enough
    // sets alloc flag if not
    // @return {Boolean} whether any updates are needed

  }, {
    key: "setNeedsUpdate",
    value: function setNeedsUpdate() {
      var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.id;
      this.userData.needsUpdate = this.userData.needsUpdate || reason;
    }
  }, {
    key: "setNeedsRedraw",
    value: function setNeedsRedraw() {
      var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.id;
      this.userData.needsRedraw = this.userData.needsRedraw || reason;
    }
  }, {
    key: "setNumInstances",
    value: function setNumInstances(numInstances) {
      var state = this.userData;

      if (state.isExternalBuffer || state.noAlloc) {
        // Data is provided through a Buffer object.
        return;
      } // Do we need to reallocate the attribute's typed array?


      var instanceCount = this.getInstanceCount();
      var needsAlloc = instanceCount === 0 || instanceCount < numInstances;

      if (needsAlloc && (state.update || state.accessor)) {
        state.needsAlloc = true;
        this.setNeedsUpdate(this.id);
      }
    }
  }, {
    key: "allocate",
    value: function allocate(numInstances) {
      this.setNumInstances(numInstances);
      var state = this.userData; // Allocate a new typed array if needed

      if (state.needsAlloc) {
        // Allocate at least one element to ensure a valid buffer
        var allocCount = Math.max(numInstances, 1);
        var ArrayType = glArrayFromType(this.type || _luma.GL.FLOAT);
        this.isGeneric = false;
        this.value = new ArrayType(this.size * allocCount);
        state.needsAlloc = false;
        state.needsUpdate = true;
        state.allocedInstances = allocCount;
        return true;
      }

      return false;
    }
  }, {
    key: "updateBuffer",
    value: function updateBuffer(_ref2) {
      var numInstances = _ref2.numInstances,
          data = _ref2.data,
          props = _ref2.props,
          context = _ref2.context;

      if (!this.needsUpdate()) {
        return false;
      }

      var state = this.userData;
      var update = state.update,
          accessor = state.accessor;
      var updated = true;

      if (update) {
        // Custom updater - typically for non-instanced layers
        update.call(context, this, {
          data: data,
          props: props,
          numInstances: numInstances
        });
        this.update({
          value: this.value,
          isGeneric: this.isGeneric
        });

        this._checkAttributeArray();
      } else if (accessor) {
        // Standard updater
        this._updateBufferViaStandardAccessor(data, props);

        this._checkAttributeArray();
      } else {
        updated = false;
      }

      state.needsUpdate = false;
      state.needsRedraw = true;
      return updated;
    }
  }, {
    key: "setGenericValue",
    value: function setGenericValue(_ref3) {
      var props = _ref3.props;
      var state = this.userData;
      var value = props[state.accessor];

      if (value === undefined || typeof value === 'function') {
        // ignore if this attribute has no accessor
        // ignore if accessor is function, will be used in updateBuffer
        return;
      }

      value = this._normalizeValue(value);
      var hasChanged = !this.isGeneric || !this._areValuesEqual(value, this.value);

      if (hasChanged) {
        this.update({
          isGeneric: true,
          value: value
        });
      }

      state.needsRedraw = state.needsUpdate || hasChanged;
      state.needsUpdate = false;
      state.isExternalBuffer = true;
    }
  }, {
    key: "setExternalBuffer",
    value: function setExternalBuffer(buffer, numInstances) {
      var state = this.userData;

      if (buffer) {
        state.isExternalBuffer = true;
        state.needsUpdate = false;

        if (_instanceof(buffer, _luma.Buffer)) {
          if (this.externalBuffer !== buffer) {
            this.update({
              isGeneric: false,
              buffer: buffer
            });
            state.needsRedraw = true;
          }
        } else {
          var ArrayType = glArrayFromType(this.type || _luma.GL.FLOAT);

          if (!_instanceof(buffer, ArrayType)) {
            throw new Error("Attribute ".concat(this.id, " must be of type ").concat(ArrayType.name));
          }

          if (state.auto && buffer.length <= numInstances * this.size) {
            throw new Error('Attribute prop array must match length and size');
          }

          if (this.value !== buffer) {
            this.update({
              value: buffer
            });
            state.needsRedraw = true;
          }
        }
      } else {
        state.isExternalBuffer = false;
      }
    } // PRIVATE HELPER METHODS

    /* check user supplied values and apply fallback */

  }, {
    key: "_normalizeValue",
    value: function _normalizeValue(value) {
      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.size;
      var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.userData.defaultValue;

      if (!Array.isArray(value) && !ArrayBuffer.isView(value)) {
        value = [value];
      }
      /* eslint-disable no-fallthrough, default-case */


      switch (size) {
        case 4:
          value[3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];

        case 3:
          value[2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];

        case 2:
          value[1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];

        case 1:
          value[0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];
      }

      return value;
    }
  }, {
    key: "_areValuesEqual",
    value: function _areValuesEqual(value1, value2) {
      var size = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.size;

      for (var i = 0; i < size; i++) {
        if (value1[i] !== value2[i]) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "_updateBufferViaStandardAccessor",
    value: function _updateBufferViaStandardAccessor(data, props) {
      var state = this.userData;
      var accessor = state.accessor,
          defaultValue = state.defaultValue;
      var value = this.value,
          size = this.size;
      var accessorFunc = props[accessor];
      (0, _assert.default)(typeof accessorFunc === 'function', "accessor \"".concat(accessor, "\" is not a function"));
      var i = 0;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var object = _step.value;
          var objectValue = accessorFunc(object);
          objectValue = this._normalizeValue(objectValue, size, defaultValue);

          for (var j = 0; j < size; j++) {
            value[i++] = objectValue[j];
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.update({
        value: value
      });
    } // Validate deck.gl level fields

  }, {
    key: "_validateAttributeUpdaters",
    value: function _validateAttributeUpdaters() {
      var state = this.userData; // Check that either 'accessor' or 'update' is a valid function

      var hasUpdater = state.noAlloc || typeof state.update === 'function' || typeof state.accessor === 'string';

      if (!hasUpdater) {
        throw new Error("Attribute ".concat(this.id, " missing update or accessor"));
      }
    }
  }, {
    key: "_checkAttributeArray",
    value: function _checkAttributeArray() {
      var value = this.value;

      if (value && value.length >= 4) {
        var valid = Number.isFinite(value[0]) && Number.isFinite(value[1]) && Number.isFinite(value[2]) && Number.isFinite(value[3]);

        if (!valid) {
          throw new Error("Illegal attribute generated for ".concat(this.id));
        }
      }
    }
  }]);

  return LayerAttribute;
}(Attribute);
/* eslint-disable complexity */


exports.default = LayerAttribute;

function glArrayFromType(glType) {
  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref4$clamped = _ref4.clamped,
      clamped = _ref4$clamped === void 0 ? true : _ref4$clamped;

  // Sorted in some order of likelihood to reduce amount of comparisons
  switch (glType) {
    case _luma.GL.FLOAT:
      return Float32Array;

    case _luma.GL.UNSIGNED_SHORT:
    case _luma.GL.UNSIGNED_SHORT_5_6_5:
    case _luma.GL.UNSIGNED_SHORT_4_4_4_4:
    case _luma.GL.UNSIGNED_SHORT_5_5_5_1:
      return Uint16Array;

    case _luma.GL.UNSIGNED_INT:
      return Uint32Array;

    case _luma.GL.UNSIGNED_BYTE:
      return clamped ? Uint8ClampedArray : Uint8Array;

    case _luma.GL.BYTE:
      return Int8Array;

    case _luma.GL.SHORT:
      return Int16Array;

    case _luma.GL.INT:
      return Int32Array;

    default:
      throw new Error('Failed to deduce type from array');
  }
}
/* eslint-enable complexity */
//# sourceMappingURL=attribute.js.map