{"version":3,"sources":["../../../src/lib/attribute-transition-manager.js"],"names":["Transform","experimental","noop","AttributeTransitionManager","gl","id","attributeTransitions","needsRedraw","transform","numInstances","isSupported","log","warn","delete","attributeName","_removeTransition","attributes","transitions","opts","changedTransitions","hasChanged","_updateAttribute","attribute","supportsTransition","_createModel","sourceBuffers","destinationBuffers","update","elementCount","animatedAttributes","transition","buffer","currentTime","uniforms","updated","time","run","Transition","name","_invalidateModel","_swapBuffer","settings","_getTransitionSettings","_createTransition","_triggerTransition","Object","keys","length","assign","size","toState","isGeneric","value","getBuffer","fromState","toLength","fromLength","data","Buffer","Float32Array","usage","GL","DYNAMIC_COPY","setData","userData","accessor","Array","isArray","map","a","find","Boolean","Number","isFinite","duration","easing","t","onStart","onEnd","onInterrupt","transitionSettings","_normalizeTransitionSettings","start","_getNextTransitionStates"],"mappings":"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","sourcesContent":["import {GL, Buffer, experimental} from 'luma.gl';\nimport {getShaders, getBuffers, padBuffer} from './attribute-transition-utils';\nimport Transition from '../transitions/transition';\nimport log from '../utils/log';\nimport assert from '../utils/assert';\n\nconst {Transform} = experimental;\n\nconst noop = () => {};\n\nexport default class AttributeTransitionManager {\n  constructor(gl, {id}) {\n    this.id = id;\n    this.gl = gl;\n\n    this.attributeTransitions = {};\n    this.needsRedraw = false;\n    this.transform = null;\n    this.numInstances = 0;\n\n    if (Transform.isSupported(gl)) {\n      this.isSupported = true;\n    } else {\n      log.warn('WebGL2 not supported by this browser. Transition animation is disabled.')();\n    }\n  }\n\n  finalize() {\n    if (this.transform) {\n      this.transform.delete();\n    }\n    for (const attributeName in this.attributeTransitions) {\n      this._removeTransition(attributeName);\n    }\n  }\n\n  /* Public methods */\n\n  // Called when attribute manager updates\n  // Check the latest attributes for updates.\n  update({attributes, transitions = {}, numInstances}) {\n    this.opts = transitions;\n    this.numInstances = numInstances;\n\n    if (!this.isSupported) {\n      return;\n    }\n\n    const {attributeTransitions} = this;\n    const changedTransitions = {};\n\n    for (const attributeName in attributes) {\n      const hasChanged = this._updateAttribute(attributeName, attributes[attributeName]);\n\n      if (hasChanged) {\n        changedTransitions[attributeName] = attributeTransitions[attributeName];\n      }\n    }\n\n    for (const attributeName in attributeTransitions) {\n      const attribute = attributes[attributeName];\n\n      if (!attribute || !attribute.supportsTransition()) {\n        // Animated attribute has been removed\n        this._removeTransition(attributeName);\n      }\n    }\n\n    if (!this.transform) {\n      this._createModel();\n    } else if (this.transform) {\n      const {sourceBuffers, destinationBuffers} = getBuffers(changedTransitions);\n      this.transform.update({\n        elementCount: this.numInstances,\n        sourceBuffers,\n        destinationBuffers\n      });\n    }\n  }\n\n  // Returns `true` if attribute is transition-enabled\n  hasAttribute(attributeName) {\n    return attributeName in this.attributeTransitions;\n  }\n\n  // Get all the animated attributes\n  getAttributes() {\n    const animatedAttributes = {};\n\n    for (const attributeName in this.attributeTransitions) {\n      const transition = this.attributeTransitions[attributeName];\n\n      if (transition.buffer) {\n        animatedAttributes[attributeName] = transition.buffer;\n      }\n    }\n\n    return animatedAttributes;\n  }\n\n  /* eslint-disable max-statements */\n  // Called every render cycle, run transform feedback\n  // Returns `true` if anything changes\n  setCurrentTime(currentTime) {\n    if (!this.transform) {\n      return false;\n    }\n\n    const uniforms = {};\n\n    let needsRedraw = this.needsRedraw;\n    this.needsRedraw = false;\n\n    for (const attributeName in this.attributeTransitions) {\n      const transition = this.attributeTransitions[attributeName];\n      const updated = transition.update(currentTime);\n      if (updated) {\n        uniforms[`${attributeName}Time`] = transition.time;\n        needsRedraw = true;\n      }\n    }\n\n    if (needsRedraw) {\n      this.transform.run({uniforms});\n    }\n\n    return needsRedraw;\n  }\n  /* eslint-enable max-statements */\n\n  /* Private methods */\n  _createTransition(attributeName, attribute) {\n    let transition = this.attributeTransitions[attributeName];\n    if (!transition) {\n      transition = new Transition({name: attributeName, attribute});\n      this.attributeTransitions[attributeName] = transition;\n      this._invalidateModel();\n      return transition;\n    }\n    return null;\n  }\n\n  _removeTransition(attributeName) {\n    const transition = this.attributeTransitions[attributeName];\n    if (transition) {\n      if (transition.buffer) {\n        transition.buffer.delete();\n      }\n      if (transition._swapBuffer) {\n        transition._swapBuffer.delete();\n      }\n      delete this.attributeTransitions[attributeName];\n      this._invalidateModel();\n    }\n  }\n\n  // Check an attributes for updates\n  // Returns a transition object if a new transition is triggered.\n  _updateAttribute(attributeName, attribute) {\n    const settings = this._getTransitionSettings(attribute);\n\n    if (settings) {\n      let hasChanged;\n      let transition = this.attributeTransitions[attributeName];\n      if (transition) {\n        hasChanged = attribute.needsRedraw();\n      } else {\n        // New animated attributes have been added\n        transition = this._createTransition(attributeName, attribute);\n        hasChanged = true;\n      }\n\n      if (hasChanged) {\n        this._triggerTransition(transition, settings);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // Invalidates the current model\n  _invalidateModel() {\n    if (this.transform) {\n      this.transform.delete();\n      this.transform = null;\n    }\n  }\n\n  // Create a model for the transform feedback\n  _createModel() {\n    if (Object.keys(this.attributeTransitions).length === 0) {\n      // no transitions\n      return;\n    }\n    this.transform = new Transform(\n      this.gl,\n      Object.assign(\n        {\n          elementCount: this.numInstances\n        },\n        getBuffers(this.attributeTransitions),\n        getShaders(this.attributeTransitions)\n      )\n    );\n  }\n\n  // get current values of an attribute, clipped/padded to the size of the new buffer\n  _getNextTransitionStates(transition) {\n    const {attribute} = transition;\n    const {size} = attribute;\n\n    let toState;\n    if (attribute.isGeneric) {\n      toState = {isGeneric: true, value: attribute.value, size};\n    } else {\n      toState = {isGeneric: false, buffer: attribute.getBuffer(), size};\n    }\n    const fromState = transition.buffer || toState;\n    const toLength = this.numInstances * size;\n    const fromLength = (fromState.data && fromState.data.length) || toLength;\n\n    // Alternate between two buffers when new transitions start.\n    // Last destination buffer is used as an attribute (from state),\n    // And the other buffer is now the destination buffer.\n    let buffer = transition._swapBuffer;\n    transition._swapBuffer = transition.buffer;\n\n    if (!buffer) {\n      buffer = new Buffer(this.gl, {\n        size,\n        data: new Float32Array(toLength),\n        usage: GL.DYNAMIC_COPY\n      });\n    }\n\n    // Pad buffers to be the same length\n    if (buffer.data.length < toLength) {\n      buffer.setData({\n        data: new Float32Array(toLength)\n      });\n    }\n    padBuffer({fromState, toState, fromLength, toLength});\n\n    return {fromState, toState, buffer};\n  }\n\n  // Returns transition settings object if transition is enabled, otherwise `null`\n  _getTransitionSettings(attribute) {\n    const {opts} = this;\n    const {transition, accessor} = attribute.userData;\n\n    if (!transition) {\n      return null;\n    }\n\n    return Array.isArray(accessor) ? accessor.map(a => opts[a]).find(Boolean) : opts[accessor];\n  }\n\n  // Normalizes transition settings object, merge with default settings\n  _normalizeTransitionSettings(settings) {\n    // Shorthand: use duration instead of parameter object\n    if (Number.isFinite(settings)) {\n      settings = {duration: settings};\n    }\n\n    // Check if settings is valid\n    assert(settings && settings.duration > 0);\n\n    return {\n      duration: settings.duration,\n      easing: settings.easing || (t => t),\n      onStart: settings.onStart || noop,\n      onEnd: settings.onEnd || noop,\n      onInterrupt: settings.onInterrupt || noop\n    };\n  }\n\n  // Start a new transition using the current settings\n  // Updates transition state and from/to buffer\n  _triggerTransition(transition, settings) {\n    this.needsRedraw = true;\n\n    const transitionSettings = this._normalizeTransitionSettings(settings);\n\n    // Attribute descriptor to transition from\n    transition.start(\n      Object.assign({}, this._getNextTransitionStates(transition), transitionSettings)\n    );\n  }\n}\n"],"file":"attribute-transition-manager.js"}