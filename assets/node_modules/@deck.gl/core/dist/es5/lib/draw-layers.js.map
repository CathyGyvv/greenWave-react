{"version":3,"sources":["../../../src/lib/draw-layers.js"],"names":["LOG_PRIORITY_DRAW","renderCount","getPixelRatio","useDevicePixels","window","devicePixelRatio","getGLViewport","gl","viewport","pixelRatio","height","canvas","clientHeight","dimensions","x","y","width","clearCanvas","drawingBufferWidth","drawingBufferHeight","clear","GL","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","drawLayers","layers","viewports","onViewportActive","drawPickingColors","deviceRect","parameters","layerFilter","pass","redrawReason","stats","forEach","viewportOrDescriptor","i","getViewportFromDescriptor","drawLayersInViewport","drawPickingBuffer","pickingFBO","framebuffer","scissorTest","scissor","clearColor","blend","blendFunc","ONE","ZERO","CONSTANT_ALPHA","blendEquation","FUNC_ADD","blendColor","glViewport","renderStats","totalCount","length","visibleCount","compositeCount","pickableCount","layer","layerIndex","shouldDrawLayer","props","visible","pickable","isPicking","isComposite","drawLayerInViewport","logRenderStats","moduleParameters","Object","assign","create","context","pickingActive","uniforms","layerParameters","getObjectHighlightParameters","drawLayer","log","priority","primitiveCount","hiddenCount","message","increment","Number","isInteger","highlightedObjectIndex","pickingSelectedColor","encodePickingColor"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global window */\nimport {GL, withParameters, setParameters} from 'luma.gl';\nimport log from '../utils/log';\nimport assert from '../utils/assert';\n\nconst LOG_PRIORITY_DRAW = 2;\n\nlet renderCount = 0;\n\n// TODO - Exported for pick-layers.js - Move to util?\nexport const getPixelRatio = ({useDevicePixels}) => {\n  assert(typeof useDevicePixels === 'boolean', 'Invalid useDevicePixels');\n  return useDevicePixels && typeof window !== 'undefined' ? window.devicePixelRatio : 1;\n};\n\n// Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\nconst getGLViewport = (gl, {viewport, pixelRatio}) => {\n  // TODO - dummy default for node\n  const height = gl.canvas ? gl.canvas.clientHeight : 100;\n  // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\n  const dimensions = viewport;\n  return [\n    dimensions.x * pixelRatio,\n    (height - dimensions.y - dimensions.height) * pixelRatio,\n    dimensions.width * pixelRatio,\n    dimensions.height * pixelRatio\n  ];\n};\n\n// Helper functions\n\nfunction clearCanvas(gl, {useDevicePixels}) {\n  // const pixelRatio = getPixelRatio({useDevicePixels});\n  const width = gl.drawingBufferWidth;\n  const height = gl.drawingBufferHeight;\n  // clear depth and color buffers, restoring transparency\n  withParameters(gl, {viewport: [0, 0, width, height]}, () => {\n    gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n  });\n}\n\n// Draw a list of layers in a list of viewports\nexport function drawLayers(\n  gl,\n  {\n    layers,\n    viewports,\n    onViewportActive,\n    useDevicePixels,\n    drawPickingColors = false,\n    deviceRect = null,\n    parameters = {},\n    layerFilter = null,\n    pass = 'draw',\n    redrawReason = '',\n    stats\n  }\n) {\n  clearCanvas(gl, {useDevicePixels});\n\n  // effectManager.preDraw();\n\n  viewports.forEach((viewportOrDescriptor, i) => {\n    const viewport = getViewportFromDescriptor(viewportOrDescriptor);\n\n    // Update context to point to this viewport\n    onViewportActive(viewport);\n\n    // render this viewport\n    drawLayersInViewport(gl, {\n      layers,\n      viewport,\n      useDevicePixels,\n      drawPickingColors,\n      deviceRect,\n      parameters,\n      layerFilter,\n      pass,\n      redrawReason,\n      stats\n    });\n  });\n\n  // effectManager.draw();\n}\n\n// Draws list of layers and viewports into the picking buffer\n// Note: does not sample the buffer, that has to be done by the caller\nexport function drawPickingBuffer(\n  gl,\n  {\n    layers,\n    viewports,\n    onViewportActive,\n    useDevicePixels,\n    pickingFBO,\n    deviceRect: {x, y, width, height},\n    layerFilter = null,\n    redrawReason = ''\n  }\n) {\n  // Make sure we clear scissor test and fbo bindings in case of exceptions\n  // We are only interested in one pixel, no need to render anything else\n  // Note that the callback here is called synchronously.\n  // Set blend mode for picking\n  // always overwrite existing pixel with [r,g,b,layerIndex]\n  return withParameters(\n    gl,\n    {\n      framebuffer: pickingFBO,\n      scissorTest: true,\n      scissor: [x, y, width, height],\n      clearColor: [0, 0, 0, 0]\n    },\n    () => {\n      drawLayers(gl, {\n        layers,\n        viewports,\n        onViewportActive,\n        useDevicePixels,\n        drawPickingColors: true,\n        layerFilter,\n        pass: 'picking',\n        redrawReason,\n        parameters: {\n          blend: true,\n          blendFunc: [gl.ONE, gl.ZERO, gl.CONSTANT_ALPHA, gl.ZERO],\n          blendEquation: gl.FUNC_ADD,\n          blendColor: [0, 0, 0, 0]\n        }\n      });\n    }\n  );\n}\n\n// Draws a list of layers in one viewport\n// TODO - when picking we could completely skip rendering viewports that dont\n// intersect with the picking rect\nfunction drawLayersInViewport(\n  gl,\n  {\n    layers,\n    viewport,\n    useDevicePixels,\n    drawPickingColors = false,\n    deviceRect = null,\n    parameters = {},\n    layerFilter,\n    pass = 'draw',\n    redrawReason = '',\n    stats\n  }\n) {\n  const pixelRatio = getPixelRatio({useDevicePixels});\n  const glViewport = getGLViewport(gl, {viewport, pixelRatio});\n\n  // render layers in normal colors\n  const renderStats = {\n    totalCount: layers.length,\n    visibleCount: 0,\n    compositeCount: 0,\n    pickableCount: 0\n  };\n\n  // const {x, y, width, height} = deviceRect || [];\n\n  setParameters(gl, parameters || {});\n\n  // render layers in normal colors\n  layers.forEach((layer, layerIndex) => {\n    // Check if we should draw layer\n    let shouldDrawLayer = layer.props.visible;\n    if (drawPickingColors) {\n      shouldDrawLayer = shouldDrawLayer && layer.props.pickable;\n    }\n    if (shouldDrawLayer && layerFilter) {\n      shouldDrawLayer = layerFilter({layer, viewport, isPicking: drawPickingColors});\n    }\n\n    // Calculate stats\n    if (shouldDrawLayer && layer.props.pickable) {\n      renderStats.pickableCount++;\n    }\n    if (layer.isComposite) {\n      renderStats.compositeCount++;\n    }\n\n    // Draw the layer\n    if (shouldDrawLayer) {\n      if (!layer.isComposite) {\n        renderStats.visibleCount++;\n      }\n\n      drawLayerInViewport({\n        gl,\n        layer,\n        layerIndex,\n        drawPickingColors,\n        pixelRatio,\n        glViewport,\n        parameters\n      });\n    }\n  });\n\n  renderCount++;\n\n  logRenderStats({renderStats, pass, redrawReason, stats});\n}\n\nfunction drawLayerInViewport({\n  gl,\n  layer,\n  layerIndex,\n  drawPickingColors,\n  pixelRatio,\n  glViewport,\n  parameters\n}) {\n  const moduleParameters = Object.assign(Object.create(layer.props), {\n    viewport: layer.context.viewport,\n    pickingActive: drawPickingColors ? 1 : 0,\n    devicePixelRatio: pixelRatio\n  });\n\n  const uniforms = Object.assign({}, layer.context.uniforms, {layerIndex});\n\n  // All parameter resolving is done here instead of the layer\n  // Blend parameters must not be overriden\n  const layerParameters = Object.assign({}, layer.props.parameters || {}, parameters);\n\n  Object.assign(layerParameters, {\n    viewport: glViewport\n  });\n\n  if (drawPickingColors) {\n    Object.assign(layerParameters, {\n      blendColor: [0, 0, 0, (layerIndex + 1) / 255]\n    });\n  } else {\n    Object.assign(moduleParameters, getObjectHighlightParameters(layer));\n  }\n\n  layer.drawLayer({\n    moduleParameters,\n    uniforms,\n    parameters: layerParameters\n  });\n}\n\nfunction logRenderStats({renderStats, pass, redrawReason, stats}) {\n  if (log.priority >= LOG_PRIORITY_DRAW) {\n    const {totalCount, visibleCount, compositeCount, pickableCount} = renderStats;\n    const primitiveCount = totalCount - compositeCount;\n    const hiddenCount = primitiveCount - visibleCount;\n\n    let message = '';\n    message += `RENDER #${renderCount} \\\n${visibleCount} (of ${totalCount} layers) to ${pass} because ${redrawReason} `;\n    if (log.priority > LOG_PRIORITY_DRAW) {\n      message += `\\\n(${hiddenCount} hidden, ${compositeCount} composite ${pickableCount} pickable)`;\n    }\n\n    log.log(LOG_PRIORITY_DRAW, message)();\n\n    if (stats) {\n      stats.increment('redraw layers', visibleCount);\n    }\n  }\n}\n\n// Get a viewport from a viewport descriptor (which can be a plain viewport)\nfunction getViewportFromDescriptor(viewportOrDescriptor) {\n  return viewportOrDescriptor.viewport ? viewportOrDescriptor.viewport : viewportOrDescriptor;\n}\n\n/**\n * Returns the picking color of currenlty selected object of the given 'layer'.\n * @return {Array} - the picking color or null if layers selected object is invalid.\n */\nfunction getObjectHighlightParameters(layer) {\n  // TODO - inefficient to update settings every render?\n  // TODO: Add warning if 'highlightedObjectIndex' is > numberOfInstances of the model.\n\n  // Update picking module settings if highlightedObjectIndex is set.\n  // This will overwrite any settings from auto highlighting.\n  if (Number.isInteger(layer.props.highlightedObjectIndex)) {\n    const pickingSelectedColor =\n      layer.props.highlightedObjectIndex >= 0\n        ? layer.encodePickingColor(layer.props.highlightedObjectIndex)\n        : null;\n\n    return {\n      pickingSelectedColor\n    };\n  }\n  return null;\n}\n"],"file":"draw-layers.js"}