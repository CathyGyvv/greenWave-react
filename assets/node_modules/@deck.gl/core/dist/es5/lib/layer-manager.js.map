{"version":3,"sources":["../../../src/lib/layer-manager.js"],"names":["LOG_PRIORITY_LIFECYCLE","LOG_PRIORITY_LIFECYCLE_MINOR","INITIAL_CONTEXT","Object","seal","layerManager","gl","useDevicePixels","stats","viewport","shaderCache","pickingFBO","lastPickedInfo","index","layerId","userData","layerName","Layer","layer","LayerManager","eventManager","lastRenderedLayers","layers","context","assign","ShaderCache","_cachePrograms","Stats","id","viewManager","ViewManager","layerFilter","drawPickingColors","_needsRedraw","_needsUpdate","_pickingRadius","_eventManager","_onLayerClick","_onLayerHover","_onClick","bind","_onPointerMove","_onPointerLeave","_pickAndCallback","_initSeer","_editSeer","width","height","_initEventHandling","setViews","seer","removeListener","clearRedrawFlags","_checkIfNeedsRedraw","reason","layerIds","filter","find","indexOf","views","viewports","getViewports","length","_activateViewport","props","_setEventHandlingParameters","setSize","setViewState","viewState","setLayers","setNeedsRedraw","MapView","newLayers","log","Boolean","_updateLayers","oldLayers","error","generatedLayers","needsUpdate","pass","redrawReason","onViewportActive","x","y","mode","radius","depth","getLayers","_getPickingBuffer","parameters","setProps","deprecated","redraw","needsRedraw","layerNeedsRedraw","getNeedsRedraw","on","click","pointermove","pointerleave","pickingRadius","onLayerClick","onLayerHover","isNaN","_validateEventHandling","oldViewport","viewportChanged","equals","setChangeFlags","_updateLayer","Framebuffer","resize","canvas","oldLayerMap","oldLayer","warn","_updateSublayersRecursively","error2","_finalizeOldLayers","firstError","newLayer","sublayers","_initializeLayer","_transferLayerState","push","isComposite","getSubLayers","err","_finalizeLayer","_initialize","lifecycle","LIFECYCLE","INITIALIZED","internalState","getModels","model","_transferState","MATCHED","AWAITING_GC","printChangeFlags","_update","AWAITING_FINALIZATION","_finalize","FINALIZED","some","pickable","event","offsetCenter","callback","leftButton","rightButton","pickObject","options","pos","selectedInfos","firstInfo","info","srcEvent","forEach","payload","type","valuePath","itemKey","slice","value","map","constructor","updateLayers"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {Framebuffer, ShaderCache} from 'luma.gl';\nimport seer from 'seer';\nimport Layer from './layer';\nimport {drawLayers} from './draw-layers';\nimport {pickObject, pickVisibleObjects} from './pick-layers';\nimport {LIFECYCLE} from '../lifecycle/constants';\nimport ViewManager from '../views/view-manager';\nimport MapView from '../views/map-view';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\nimport {Stats} from 'probe.gl';\n\nimport {\n  setPropOverrides,\n  layerEditListener,\n  seerInitListener,\n  initLayerInSeer,\n  updateLayerInSeer\n} from './seer-integration';\n\nconst LOG_PRIORITY_LIFECYCLE = 2;\nconst LOG_PRIORITY_LIFECYCLE_MINOR = 4;\n\n// CONTEXT IS EXPOSED TO LAYERS\nconst INITIAL_CONTEXT = Object.seal({\n  layerManager: null,\n  gl: null,\n\n  // Settings\n  useDevicePixels: true, // Exposed in case custom layers need to adjust sizes\n\n  // General resources\n  stats: null, // for tracking lifecycle performance\n  viewport: null, // Current viewport, exposed to layers for project* function\n\n  // GL Resources\n  shaderCache: null,\n  pickingFBO: null, // Screen-size framebuffer that layers can reuse\n\n  // State\n  lastPickedInfo: {\n    // For callback tracking and autohighlight\n    index: -1,\n    layerId: null\n  },\n\n  userData: {} // Place for any custom app `context`\n});\n\nconst layerName = layer => (layer instanceof Layer ? `${layer}` : !layer ? 'null' : 'invalid');\n\nexport default class LayerManager {\n  // eslint-disable-next-line\n  constructor(gl, {eventManager, stats} = {}) {\n    // Currently deck.gl expects the DeckGL.layers array to be different\n    // whenever React rerenders. If the same layers array is used, the\n    // LayerManager's diffing algorithm will generate a fatal error and\n    // break the rendering.\n\n    // `this.lastRenderedLayers` stores the UNFILTERED layers sent\n    // down to LayerManager, so that `layers` reference can be compared.\n    // If it's the same across two React render calls, the diffing logic\n    // will be skipped.\n    this.lastRenderedLayers = [];\n    this.layers = [];\n\n    this.context = Object.assign({}, INITIAL_CONTEXT, {\n      layerManager: this,\n\n      gl,\n      // Enabling luma.gl Program caching using private API (_cachePrograms)\n      shaderCache: new ShaderCache({gl, _cachePrograms: true}),\n      stats: stats || new Stats({id: 'deck.gl'})\n    });\n\n    // Maps view descriptors to vieports, rebuilds when width/height/viewState/views change\n    this.viewManager = new ViewManager();\n\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = false;\n\n    // Event handling\n    this._pickingRadius = 0;\n\n    this._eventManager = null;\n    this._onLayerClick = null;\n    this._onLayerHover = null;\n    this._onClick = this._onClick.bind(this);\n    this._onPointerMove = this._onPointerMove.bind(this);\n    this._onPointerLeave = this._onPointerLeave.bind(this);\n    this._pickAndCallback = this._pickAndCallback.bind(this);\n\n    // Seer integration\n    this._initSeer = this._initSeer.bind(this);\n    this._editSeer = this._editSeer.bind(this);\n\n    // DEPRECATED\n    this.width = 100;\n    this.height = 100;\n\n    Object.seal(this);\n\n    seerInitListener(this._initSeer);\n    layerEditListener(this._editSeer);\n\n    if (eventManager) {\n      this._initEventHandling(eventManager);\n    }\n\n    // Init with default map viewport\n    this.setViews();\n  }\n\n  // Method to call when the layer manager is not needed anymore.\n  // Currently used in the <DeckGL> componentWillUnmount lifecycle to unbind Seer listeners.\n  finalize() {\n    seer.removeListener(this._initSeer);\n    seer.removeListener(this._editSeer);\n  }\n\n  // Check if a redraw is needed\n  needsRedraw({clearRedrawFlags = true} = {}) {\n    return this._checkIfNeedsRedraw(clearRedrawFlags);\n  }\n\n  // Check if a deep update of all layers is needed\n  needsUpdate() {\n    return this._needsUpdate;\n  }\n\n  // Layers will be redrawn (in next animation frame)\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n\n  // Gets an (optionally) filtered list of layers\n  getLayers({layerIds = null} = {}) {\n    // Filtering by layerId compares beginning of strings, so that sublayers will be included\n    // Dependes on the convention of adding suffixes to the parent's layer name\n    return layerIds\n      ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0))\n      : this.layers;\n  }\n\n  getViews() {\n    return this.viewManager.views;\n  }\n\n  // Get a set of viewports for a given width and height\n  getViewports() {\n    const viewports = this.viewManager.getViewports();\n    if (viewports.length) {\n      this._activateViewport(viewports[0]);\n    }\n    return viewports;\n  }\n\n  /**\n   * Set props needed for layer rendering and picking.\n   * Parameters are to be passed as a single object, with the following values:\n   * @param {Boolean} useDevicePixels\n   */\n  /* eslint-disable complexity, max-statements */\n  setProps(props) {\n    if ('eventManager' in props) {\n      this._initEventHandling(props.eventManager);\n    }\n\n    if ('pickingRadius' in props || 'onLayerClick' in props || 'onLayerHover' in props) {\n      this._setEventHandlingParameters(props);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this.viewManager.setSize(props.width, props.height);\n      this.width = props.width;\n      this.height = props.height;\n    }\n\n    if ('views' in props) {\n      this.setViews(props.views);\n    }\n\n    // TODO - support multiple view states\n    if ('viewState' in props) {\n      this.viewManager.setViewState(props.viewState);\n    }\n\n    // TODO - For now we set layers before viewports to preserve changeFlags\n    if ('layers' in props) {\n      this.setLayers(props.layers);\n    }\n\n    if ('layerFilter' in props) {\n      if (this.layerFilter !== props.layerFilter) {\n        this.layerFilter = props.layerFilter;\n        this.setNeedsRedraw('layerFilter changed');\n      }\n    }\n\n    if ('drawPickingColors' in props) {\n      if (props.drawPickingColors !== this.drawPickingColors) {\n        this.drawPickingColors = props.drawPickingColors;\n        this.setNeedsRedraw('drawPickingColors changed');\n      }\n    }\n\n    // A way for apps to add data to context that can be accessed in layers\n    if ('userData' in props) {\n      this.context.userData = props.userData;\n    }\n\n    if ('useDevicePixels' in props) {\n      this.context.useDevicePixels = props.useDevicePixels;\n    }\n  }\n  /* eslint-enable complexity, max-statements */\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  setViews(views) {\n    // For now, we default to a full screen map view port\n    // TODO - apps may want to specify an empty view list...\n    if (!views || views.length === 0) {\n      views = [new MapView({id: 'default-view'})];\n    }\n\n    this.viewManager.setViews(views);\n  }\n\n  // Supply a new layer list, initiating sublayer generation and layer matching\n  setLayers(newLayers) {\n    this.getViewports();\n    assert(this.context.viewport, 'LayerManager.updateLayers: viewport not set');\n\n    // TODO - something is generating state updates that cause rerender of the same\n    if (newLayers === this.lastRenderedLayers) {\n      log.log(3, 'Ignoring layer update due to layer array not changed')();\n      return this;\n    }\n    this.lastRenderedLayers = newLayers;\n\n    newLayers = flatten(newLayers, {filter: Boolean});\n\n    for (const layer of newLayers) {\n      layer.context = this.context;\n    }\n\n    const {error, generatedLayers} = this._updateLayers({\n      oldLayers: this.layers,\n      newLayers\n    });\n\n    this.layers = generatedLayers;\n\n    // Throw first error found, if any\n    if (error) {\n      throw error;\n    }\n    return this;\n  }\n\n  // Update layers from last cycle if `setNeedsUpdate()` has been called\n  updateLayers() {\n    // NOTE: For now, even if only some layer has changed, we update all layers\n    // to ensure that layer id maps etc remain consistent even if different\n    // sublayers are rendered\n    const reason = this.needsUpdate();\n    if (reason) {\n      this.setNeedsRedraw(`updating layers: ${reason}`);\n      // HACK - Call with a copy of lastRenderedLayers to trigger a full update\n      this.setLayers([...this.lastRenderedLayers]);\n    }\n  }\n\n  //\n  // METHODS FOR LAYERS\n  //\n\n  // Draw all layers in all views\n  drawLayers({pass = 'render to screen', redrawReason = 'unknown reason'} = {}) {\n    const {drawPickingColors} = this;\n    const {gl, useDevicePixels} = this.context;\n\n    // render this viewport\n    drawLayers(gl, {\n      layers: this.layers,\n      viewports: this.getViewports(),\n      onViewportActive: this._activateViewport.bind(this),\n      useDevicePixels,\n      drawPickingColors,\n      pass,\n      layerFilter: this.layerFilter,\n      redrawReason\n    });\n  }\n\n  // Pick the closest info at given coordinate\n  pickObject({x, y, mode, radius = 0, layerIds, layerFilter, depth = 1}) {\n    const {gl, useDevicePixels} = this.context;\n\n    const layers = this.getLayers({layerIds});\n\n    return pickObject(gl, {\n      // User params\n      x,\n      y,\n      radius,\n      layers,\n      mode,\n      layerFilter,\n      depth,\n      // Injected params\n      viewports: this.getViewports(),\n      onViewportActive: this._activateViewport.bind(this),\n      pickingFBO: this._getPickingBuffer(),\n      lastPickedInfo: this.context.lastPickedInfo,\n      useDevicePixels\n    });\n  }\n\n  // Get all unique infos within a bounding box\n  pickObjects({x, y, width, height, layerIds, layerFilter}) {\n    const {gl, useDevicePixels} = this.context;\n\n    const layers = this.getLayers({layerIds});\n\n    return pickVisibleObjects(gl, {\n      x,\n      y,\n      width,\n      height,\n      layers,\n      layerFilter,\n      mode: 'pickObjects',\n      viewports: this.getViewports(),\n      onViewportActive: this._activateViewport.bind(this),\n      pickingFBO: this._getPickingBuffer(),\n      useDevicePixels\n    });\n  }\n\n  //\n  // DEPRECATED METHODS in V5.3\n  //\n\n  setParameters(parameters) {\n    return this.setProps(parameters);\n  }\n\n  setSize(width, height) {\n    this.setProps({width, height});\n  }\n\n  setViewState(viewState) {\n    this.setProps({viewState});\n  }\n\n  //\n  // DEPRECATED METHODS in V5.1\n  //\n\n  setViewports(viewports) {\n    log.deprecated('setViewport', 'setViews')();\n    this.setViews(viewports);\n    return this;\n  }\n\n  //\n  // DEPRECATED METHODS in V5\n  //\n\n  setViewport(viewport) {\n    log.deprecated('setViewport', 'setViews')();\n    this.setViews([viewport]);\n    return this;\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _checkIfNeedsRedraw(clearRedrawFlags) {\n    let redraw = this._needsRedraw;\n    if (clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    redraw = redraw || this.viewManager.needsRedraw();\n\n    // This layers list doesn't include sublayers, relying on composite layers\n    for (const layer of this.layers) {\n      // Call every layer to clear their flags\n      const layerNeedsRedraw = layer.getNeedsRedraw({clearRedrawFlags});\n      redraw = redraw || layerNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  /**\n   * @param {Object} eventManager   A source of DOM input events\n   */\n  _initEventHandling(eventManager) {\n    this._eventManager = eventManager;\n\n    // TODO: add/remove handlers on demand at runtime, not all at once on init.\n    // Consider both top-level handlers like onLayerClick/Hover\n    // and per-layer handlers attached to individual layers.\n    // https://github.com/uber/deck.gl/issues/634\n    this._eventManager.on({\n      click: this._onClick,\n      pointermove: this._onPointerMove,\n      pointerleave: this._onPointerLeave\n    });\n  }\n\n  // Set parameters for input event handling.\n  _setEventHandlingParameters({pickingRadius, onLayerClick, onLayerHover}) {\n    if (!isNaN(pickingRadius)) {\n      this._pickingRadius = pickingRadius;\n    }\n    if (typeof onLayerClick !== 'undefined') {\n      this._onLayerClick = onLayerClick;\n    }\n    if (typeof onLayerHover !== 'undefined') {\n      this._onLayerHover = onLayerHover;\n    }\n    this._validateEventHandling();\n  }\n\n  // Make a viewport \"current\" in layer context, updating viewportChanged flags\n  _activateViewport(viewport) {\n    const oldViewport = this.context.viewport;\n    const viewportChanged = !oldViewport || !viewport.equals(oldViewport);\n\n    if (viewportChanged) {\n      log.log(4, 'Viewport changed', viewport)();\n\n      this.context.viewport = viewport;\n\n      // Update layers states\n      // Let screen space layers update their state based on viewport\n      for (const layer of this.layers) {\n        layer.setChangeFlags({viewportChanged: 'Viewport changed'});\n        this._updateLayer(layer);\n      }\n    }\n\n    assert(this.context.viewport, 'LayerManager: viewport not set');\n\n    return this;\n  }\n\n  _getPickingBuffer() {\n    const {gl} = this.context;\n    // Create a frame buffer if not already available\n    this.context.pickingFBO = this.context.pickingFBO || new Framebuffer(gl);\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.context.pickingFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    return this.context.pickingFBO;\n  }\n\n  // Match all layers, checking for caught errors\n  // To avoid having an exception in one layer disrupt other layers\n  // TODO - mark layers with exceptions as bad and remove from rendering cycle?\n  _updateLayers({oldLayers, newLayers}) {\n    // Create old layer map\n    const oldLayerMap = {};\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log.warn(`Multiple old layers with same id ${layerName(oldLayer)}`)();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n\n    // Allocate array for generated layers\n    const generatedLayers = [];\n\n    // Match sublayers\n    const error = this._updateSublayersRecursively({\n      newLayers,\n      oldLayerMap,\n      generatedLayers\n    });\n\n    // Finalize unmatched layers\n    const error2 = this._finalizeOldLayers(oldLayerMap);\n\n    this._needsUpdate = false;\n\n    const firstError = error || error2;\n    return {error: firstError, generatedLayers};\n  }\n\n  // Note: adds generated layers to `generatedLayers` array parameter\n  _updateSublayersRecursively({newLayers, oldLayerMap, generatedLayers}) {\n    let error = null;\n\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n\n      // Given a new coming layer, find its matching old layer (if any)\n      const oldLayer = oldLayerMap[newLayer.id];\n      if (oldLayer === null) {\n        // null, rather than undefined, means this id was originally there\n        log.warn(`Multiple new layers with same id ${layerName(newLayer)}`)();\n      }\n      // Remove the old layer from candidates, as it has been matched with this layer\n      oldLayerMap[newLayer.id] = null;\n\n      let sublayers = null;\n\n      // We must not generate exceptions until after layer matching is complete\n      try {\n        if (!oldLayer) {\n          this._initializeLayer(newLayer);\n          initLayerInSeer(newLayer); // Initializes layer in seer chrome extension (if connected)\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n          this._updateLayer(newLayer);\n          updateLayerInSeer(newLayer); // Updates layer in seer chrome extension (if connected)\n        }\n        generatedLayers.push(newLayer);\n\n        // Call layer lifecycle method: render sublayers\n        sublayers = newLayer.isComposite && newLayer.getSubLayers();\n        // End layer lifecycle method: render sublayers\n      } catch (err) {\n        log.warn(`error during matching of ${layerName(newLayer)}`, err);\n        error = error || err; // Record first exception\n      }\n\n      if (sublayers) {\n        this._updateSublayersRecursively({\n          newLayers: sublayers,\n          oldLayerMap,\n          generatedLayers\n        });\n      }\n    }\n\n    return error;\n  }\n\n  // Finalize any old layers that were not matched\n  _finalizeOldLayers(oldLayerMap) {\n    let error = null;\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n      if (layer) {\n        error = error || this._finalizeLayer(layer);\n      }\n    }\n    return error;\n  }\n\n  // EXCEPTION SAFE LAYER ACCESS\n\n  // Initializes a single layer, calling layer methods\n  _initializeLayer(layer) {\n    log.log(LOG_PRIORITY_LIFECYCLE, `initializing ${layerName(layer)}`)();\n\n    let error = null;\n    try {\n      layer._initialize();\n      layer.lifecycle = LIFECYCLE.INITIALIZED;\n    } catch (err) {\n      log.warn(`error while initializing ${layerName(layer)}\\n`, err)();\n      error = error || err;\n      // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?\n    }\n\n    // Set back pointer (used in picking)\n    layer.internalState.layer = layer;\n\n    // Save layer on model for picking purposes\n    // store on model.userData rather than directly on model\n    for (const model of layer.getModels()) {\n      model.userData.layer = layer;\n    }\n\n    return error;\n  }\n\n  _transferLayerState(oldLayer, newLayer) {\n    newLayer._transferState(oldLayer);\n    newLayer.lifecycle = LIFECYCLE.MATCHED;\n\n    if (newLayer !== oldLayer) {\n      log.log(\n        LOG_PRIORITY_LIFECYCLE_MINOR,\n        `matched ${layerName(newLayer)}`,\n        oldLayer,\n        '->',\n        newLayer\n      )();\n      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n    } else {\n      log.log(LOG_PRIORITY_LIFECYCLE_MINOR, `Matching layer is unchanged ${newLayer.id}`)();\n    }\n  }\n\n  // Updates a single layer, cleaning all flags\n  _updateLayer(layer) {\n    log.log(\n      LOG_PRIORITY_LIFECYCLE_MINOR,\n      `updating ${layer} because: ${layer.printChangeFlags()}`\n    )();\n    let error = null;\n    try {\n      layer._update();\n    } catch (err) {\n      log.warn(`error during update of ${layerName(layer)}`, err)();\n      // Save first error\n      error = err;\n    }\n    return error;\n  }\n\n  // Finalizes a single layer\n  _finalizeLayer(layer) {\n    assert(layer.lifecycle !== LIFECYCLE.AWAITING_FINALIZATION);\n    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n    let error = null;\n    this.setNeedsRedraw(`finalized ${layerName(layer)}`);\n    try {\n      layer._finalize();\n    } catch (err) {\n      log.warn(`error during finalization of ${layerName(layer)}`, err)();\n      error = err;\n    }\n    layer.lifecycle = LIFECYCLE.FINALIZED;\n    log.log(LOG_PRIORITY_LIFECYCLE, `finalizing ${layerName(layer)}`);\n    return error;\n  }\n\n  /**\n   * Warn if a deck-level mouse event has been specified,\n   * but no layers are `pickable`.\n   */\n  _validateEventHandling() {\n    if (this.onLayerClick || this.onLayerHover) {\n      if (this.layers.length && !this.layers.some(layer => layer.props.pickable)) {\n        log.warn(\n          'You have supplied a top-level input event handler (e.g. `onLayerClick`), ' +\n            'but none of your layers have set the `pickable` flag.'\n        )();\n      }\n    }\n  }\n\n  /**\n   * Route click events to layers.\n   * `pickLayer` will call the `onClick` prop of any picked layer,\n   * and `onLayerClick` is called directly from here\n   * with any picking info generated by `pickLayer`.\n   * @param {Object} event  An object encapsulating an input event,\n   *                        with the following shape:\n   *                        {Object: {x, y}} offsetCenter: center of the event\n   *                        {Object} srcEvent:             native JS Event object\n   */\n  _onClick(event) {\n    if (!event.offsetCenter) {\n      // Do not trigger onHover callbacks when click position is invalid.\n      return;\n    }\n    this._pickAndCallback({\n      callback: this._onLayerClick,\n      event,\n      mode: 'click'\n    });\n  }\n\n  /**\n   * Route click events to layers.\n   * `pickLayer` will call the `onHover` prop of any picked layer,\n   * and `onLayerHover` is called directly from here\n   * with any picking info generated by `pickLayer`.\n   * @param {Object} event  An object encapsulating an input event,\n   *                        with the following shape:\n   *                        {Object: {x, y}} offsetCenter: center of the event\n   *                        {Object} srcEvent:             native JS Event object\n   */\n  _onPointerMove(event) {\n    if (event.leftButton || event.rightButton) {\n      // Do not trigger onHover callbacks if mouse button is down.\n      return;\n    }\n    this._pickAndCallback({\n      callback: this._onLayerHover,\n      event,\n      mode: 'hover'\n    });\n  }\n\n  _onPointerLeave(event) {\n    this.pickObject({\n      x: -1,\n      y: -1,\n      radius: this._pickingRadius,\n      mode: 'hover'\n    });\n  }\n\n  _pickAndCallback(options) {\n    const pos = options.event.offsetCenter;\n    const radius = this._pickingRadius;\n    const selectedInfos = this.pickObject({x: pos.x, y: pos.y, radius, mode: options.mode});\n    if (options.callback) {\n      const firstInfo = selectedInfos.find(info => info.index >= 0) || null;\n      // As per documentation, send null value when no valid object is picked.\n      options.callback(firstInfo, selectedInfos, options.event.srcEvent);\n    }\n  }\n\n  // SEER INTEGRATION\n\n  /**\n   * Called upon Seer initialization, manually sends layers data.\n   */\n  _initSeer() {\n    this.layers.forEach(layer => {\n      initLayerInSeer(layer);\n      updateLayerInSeer(layer);\n    });\n  }\n\n  /**\n   * On Seer property edition, set override and update layers.\n   */\n  _editSeer(payload) {\n    if (payload.type !== 'edit' || payload.valuePath[0] !== 'props') {\n      return;\n    }\n\n    setPropOverrides(payload.itemKey, payload.valuePath.slice(1), payload.value);\n    const newLayers = this.layers.map(layer => new layer.constructor(layer.props));\n    this.updateLayers({newLayers});\n  }\n}\n"],"file":"layer-manager.js"}