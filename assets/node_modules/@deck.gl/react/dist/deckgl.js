"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _autobind = _interopRequireDefault(require("./utils/autobind"));

var _inheritsFrom = require("./utils/inherits-from");

var _core = require("@deck.gl/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } _setPrototypeOf(subClass.prototype, superClass && superClass.prototype); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var propTypes = Object.assign({}, _core.Deck.getPropTypes(_propTypes.default), {
  viewports: _propTypes.default.array,
  // Deprecated
  viewport: _propTypes.default.object // Deprecated

});
var defaultProps = _core.Deck.defaultProps;

var DeckGL =
/*#__PURE__*/
function (_React$Component) {
  _inherits(DeckGL, _React$Component);

  function DeckGL(props) {
    var _this;

    _classCallCheck(this, DeckGL);

    _this = _possibleConstructorReturn(this, (DeckGL.__proto__ || Object.getPrototypeOf(DeckGL)).call(this, props));
    _this.state = {};
    _this.children = [];
    (0, _autobind.default)(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(DeckGL, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.deck = new _core.Deck(Object.assign({}, this.props, {
        canvas: this.deckCanvas,
        viewState: this._getViewState(this.props),
        // Note: If Deck event handling change size or view state, it calls onResize to update
        onViewStateChange: this._onViewStateChange,
        onResize: this._onResize
      }));

      this._updateFromProps(this.props);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      this._updateFromProps(nextProps);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.deck.finalize();
    } // Public API

  }, {
    key: "pickObject",
    value: function pickObject(_ref) {
      var x = _ref.x,
          y = _ref.y,
          _ref$radius = _ref.radius,
          radius = _ref$radius === void 0 ? 0 : _ref$radius,
          _ref$layerIds = _ref.layerIds,
          layerIds = _ref$layerIds === void 0 ? null : _ref$layerIds;
      return this.deck.pickObject({
        x: x,
        y: y,
        radius: radius,
        layerIds: layerIds
      });
    }
  }, {
    key: "pickMultipleObjects",
    value: function pickMultipleObjects(_ref2) {
      var x = _ref2.x,
          y = _ref2.y,
          _ref2$radius = _ref2.radius,
          radius = _ref2$radius === void 0 ? 0 : _ref2$radius,
          _ref2$layerIds = _ref2.layerIds,
          layerIds = _ref2$layerIds === void 0 ? null : _ref2$layerIds,
          _ref2$depth = _ref2.depth,
          depth = _ref2$depth === void 0 ? 10 : _ref2$depth;
      return this.deck.pickMultipleObjects({
        x: x,
        y: y,
        radius: radius,
        layerIds: layerIds,
        depth: depth
      });
    }
  }, {
    key: "pickObjects",
    value: function pickObjects(_ref3) {
      var x = _ref3.x,
          y = _ref3.y,
          _ref3$width = _ref3.width,
          width = _ref3$width === void 0 ? 1 : _ref3$width,
          _ref3$height = _ref3.height,
          height = _ref3$height === void 0 ? 1 : _ref3$height,
          _ref3$layerIds = _ref3.layerIds,
          layerIds = _ref3$layerIds === void 0 ? null : _ref3$layerIds;
      return this.deck.pickObjects({
        x: x,
        y: y,
        width: width,
        height: height,
        layerIds: layerIds
      });
    }
  }, {
    key: "queryObject",
    value: function queryObject(opts) {
      _core.log.deprecated('queryObject', 'pickObject')();

      return this.deck.pickObject(opts);
    }
  }, {
    key: "queryVisibleObjects",
    value: function queryVisibleObjects(opts) {
      _core.log.deprecated('queryVisibleObjects', 'pickObjects')();

      return this.pickObjects(opts);
    } // Callbacks
    // Forward callback and then call forceUpdate to guarantee that sub components update

  }, {
    key: "_onResize",
    value: function _onResize() {
      if (this.props.onResize) {
        var _this$props;

        (_this$props = this.props).onResize.apply(_this$props, arguments);
      }

      this.forceUpdate();
    } // Forward callback and then call forceUpdate to guarantee that sub components update

  }, {
    key: "_onViewStateChange",
    value: function _onViewStateChange() {
      if (this.props.onViewStateChange) {
        var _this$props2;

        (_this$props2 = this.props).onViewStateChange.apply(_this$props2, arguments);
      }

      this.forceUpdate();
    } // Private Helpers
    // 1. Extract any JSX layers from the react children
    // 2. Handle any backwards compatiblity props for React layer
    // Needs to be called both from initial mount, and when new props arrive

  }, {
    key: "_updateFromProps",
    value: function _updateFromProps(nextProps) {
      // extract any deck.gl layers masquerading as react elements from props.children
      var _this$_extractJSXLaye = this._extractJSXLayers(nextProps.children),
          layers = _this$_extractJSXLaye.layers,
          children = _this$_extractJSXLaye.children;

      if (this.deck) {
        this.deck.setProps(Object.assign({}, nextProps, {
          views: this._getViews(nextProps),
          viewState: this._getViewState(nextProps),
          // Avoid modifying layers array if no JSX layers were found
          layers: layers ? _toConsumableArray(layers).concat(_toConsumableArray(nextProps.layers)) : nextProps.layers
        }));
      }

      this.children = children;
    } // Support old `viewports` prop (React only!)

  }, {
    key: "_getViews",
    value: function _getViews(props) {
      if (props.viewports) {
        _core.log.deprecated('DeckGL.viewports', 'DeckGL.views')();
      }

      if (props.viewport) {
        _core.log.deprecated('DeckGL.viewport', 'DeckGL.views')();
      }

      return props.views || props.viewports || props.viewport && [props.viewport];
    } // Supports old "geospatial view state as separate props" style (React only!)

  }, {
    key: "_getViewState",
    value: function _getViewState(props) {
      var viewState = props.viewState;

      if (!viewState && 'latitude' in props && 'longitude' in props && 'zoom' in props) {
        var latitude = props.latitude,
            longitude = props.longitude,
            zoom = props.zoom,
            _props$pitch = props.pitch,
            pitch = _props$pitch === void 0 ? 0 : _props$pitch,
            _props$bearing = props.bearing,
            bearing = _props$bearing === void 0 ? 0 : _props$bearing;
        viewState = props.viewState || {
          latitude: latitude,
          longitude: longitude,
          zoom: zoom,
          pitch: pitch,
          bearing: bearing
        };
      }

      return viewState;
    } // extracts any deck.gl layers masquerading as react elements from props.children

  }, {
    key: "_extractJSXLayers",
    value: function _extractJSXLayers(children) {
      var reactChildren = []; // extract real react elements (i.e. not deck.gl layers)

      var layers = null; // extracted layer from react children, will add to deck.gl layer array

      _react.default.Children.forEach(children, function (reactElement) {
        if (reactElement) {
          // For some reason Children.forEach doesn't filter out `null`s
          var LayerType = reactElement.type;

          if ((0, _inheritsFrom.inheritsFrom)(LayerType, _core.Layer)) {
            var layer = new LayerType(reactElement.props);
            layers = layers || [];
            layers.push(layer);
          } else {
            reactChildren.push(reactElement);
          }
        }
      });

      return {
        layers: layers,
        children: reactChildren
      };
    } // Iterate over views and reposition children associated with views
    // TODO - Can we supply a similar function for the non-React case?

  }, {
    key: "_renderChildrenUnderViews",
    value: function _renderChildrenUnderViews(children) {
      var _this2 = this;

      // Flatten out nested views array
      var views = this.deck ? this.deck.getViewports() : []; // Build a view id to view index

      var viewMap = {};
      views.forEach(function (view) {
        if (view.id) {
          viewMap[view.id] = view;
        }
      });
      return children.map( // If child specifies props.viewId, position under view, otherwise render as normal
      function (child, i) {
        return child.props.viewId || child.props.viewId ? _this2._positionChild({
          child: child,
          viewMap: viewMap,
          i: i
        }) : child;
      });
    }
  }, {
    key: "_positionChild",
    value: function _positionChild(_ref4) {
      var child = _ref4.child,
          viewMap = _ref4.viewMap,
          i = _ref4.i;
      var _child$props = child.props,
          viewId = _child$props.viewId,
          viewportId = _child$props.viewportId;

      if (viewportId) {
        _core.log.deprecated('viewportId', 'viewId')();
      }

      var view = viewMap[viewId || viewportId]; // Drop (auto-hide) elements with viewId that are not matched by any current view

      if (!view) {
        return null;
      } // Resolve potentially relative dimensions using the deck.gl container size


      var x = view.x,
          y = view.y,
          width = view.width,
          height = view.height; // Clone the element with width and height set per view

      var newProps = Object.assign({}, child.props, {
        width: width,
        height: height
      }); // Inject map properties
      // TODO - this is too react-map-gl specific

      Object.assign(newProps, view.getMercatorParams(), {
        visible: view.isMapSynched()
      });
      var clone = (0, _react.cloneElement)(child, newProps); // Wrap it in an absolutely positioning div

      var style = {
        position: 'absolute',
        left: x,
        top: y,
        width: width,
        height: height
      };
      var key = "view-child-".concat(viewId, "-").concat(i);
      return (0, _react.createElement)('div', {
        key: key,
        id: key,
        style: style
      }, clone);
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      // Render the background elements (typically react-map-gl instances)
      // using the view descriptors
      var children = this._renderChildrenUnderViews(this.children); // Note that width and height are handled by deck.gl


      var id = this.props.id; // TODO - this styling is enforced for correct positioning with children
      // It can override the styling set by `Deck`, this should be consolidated.

      var style = Object.assign({}, {
        position: 'absolute',
        left: 0,
        top: 0
      }, this.props.style);
      var canvas = (0, _react.createElement)('canvas', {
        ref: function ref(c) {
          return _this3.deckCanvas = c;
        },
        key: 'deck-canvas',
        id: id,
        style: style
      }); // Render deck.gl as last child

      children.push(canvas);
      return (0, _react.createElement)('div', {
        id: 'deckgl-wrapper'
      }, children);
    }
  }]);

  return DeckGL;
}(_react.default.Component);

exports.default = DeckGL;
DeckGL.propTypes = propTypes;
DeckGL.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,