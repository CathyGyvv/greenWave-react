{"version":3,"sources":["../../../src/solid-polygon-layer/solid-polygon-layer.js"],"names":["Layer","GL","Model","Geometry","hasFeature","FEATURES","PolygonTesselator","vs","fs","defaultLineColor","defaultFillColor","defaultProps","filled","extruded","wireframe","fp64","elevationScale","getPolygon","f","polygon","getElevation","elevation","getFillColor","fillColor","getLineColor","lineColor","lightSettings","SIDE_FILL_POSITIONS","Float32Array","SIDE_WIRE_POSITIONS","ATTRIBUTE_OVERRIDES","TOP","SIDE","instanced","WIRE","ATTRIBUTE_MAPS","indices","positions","positions64xyLow","elevations","colors","pickingColors","nextPositions","nextPositions64xyLow","SolidPolygonLayer","getShaders","projectModule","is64bitEnabled","modules","initializeState","gl","context","setState","numInstances","IndexType","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","add","size","isIndexed","update","calculateIndices","accessor","calculatePositions","calculatePositionsLow","calculateNextPositions","calculateNextPositionsLow","calculateElevations","fillColors","alias","type","UNSIGNED_BYTE","calculateFillColors","defaultValue","lineColors","calculateLineColors","calculatePickingColors","draw","uniforms","props","renderUniforms","Object","assign","state","models","forEach","model","render","updateState","updateParams","updateGeometry","oldProps","regenerateModels","delete","modelsChanged","_getModels","invalidate","changeFlags","geometryConfigChanged","dataChanged","updateTriggersChanged","all","polygons","data","map","polygonTesselator","_getPolygonTesselator","invalidateAll","updatePositions","updateAttributes","buffers","ignoreUnknownAttributes","_updateAttributes","getAttributes","changedAttributes","getChangedAttributes","clearChangedFlags","attributes","modelsByName","modelName","setVertexCount","numVertex","setInstanceCount","attributeMap","attributeOverride","newAttributes","attributeName","attribute","buffer","getBuffer","setAttributes","id","geometry","drawMode","TRIANGLES","vertexPositions","isGeneric","value","isSideVertex","vertexCount","shaderCache","TRIANGLE_STRIP","isInstanced","LINE_STRIP","filter","Boolean","length","isFP64","polygonIndex","key","getColor","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport {GL, Model, Geometry, hasFeature, FEATURES} from 'luma.gl';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport {PolygonTesselator} from './polygon-tesselator';\n\nimport vs from './solid-polygon-layer-vertex.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nconst defaultLineColor = [0x0, 0x0, 0x0, 0xff];\nconst defaultFillColor = [0x0, 0x0, 0x0, 0xff];\n\nconst defaultProps = {\n  filled: true,\n  // Whether to extrude\n  extruded: false,\n  // Whether to draw a GL.LINES wireframe of the polygon\n  wireframe: false,\n  fp64: false,\n\n  // elevation multiplier\n  elevationScale: 1,\n\n  // Accessor for polygon geometry\n  getPolygon: f => f.polygon,\n  // Accessor for extrusion height\n  getElevation: f => f.elevation || 0,\n  // Accessor for colors\n  getFillColor: f => f.fillColor || defaultFillColor,\n  getLineColor: f => f.lineColor || defaultLineColor,\n\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\n// Side model attributes\nconst SIDE_FILL_POSITIONS = new Float32Array([\n  // top left corner\n  0,\n  1,\n  // bottom left corner\n  0,\n  0,\n  // top right corner\n  1,\n  1,\n  // bottom right corner\n  1,\n  0\n]);\nconst SIDE_WIRE_POSITIONS = new Float32Array([\n  // top right corner\n  1,\n  1,\n  // top left corner\n  0,\n  1,\n  // bottom left corner\n  0,\n  0,\n  // bottom right corner\n  1,\n  0\n]);\n\n// Model types\nconst ATTRIBUTE_OVERRIDES = {\n  TOP: null,\n  SIDE: {instanced: 1},\n  WIRE: {instanced: 1}\n};\n\nconst ATTRIBUTE_MAPS = {\n  TOP: {\n    indices: 'indices',\n    positions: 'positions',\n    positions64xyLow: 'positions64xyLow',\n    elevations: 'elevations',\n    colors: 'fillColors',\n    pickingColors: 'pickingColors'\n  },\n  SIDE: {\n    positions: 'positions',\n    positions64xyLow: 'positions64xyLow',\n    nextPositions: 'nextPositions',\n    nextPositions64xyLow: 'nextPositions64xyLow',\n    elevations: 'elevations',\n    colors: 'fillColors',\n    pickingColors: 'pickingColors'\n  },\n  WIRE: {\n    positions: 'positions',\n    positions64xyLow: 'positions64xyLow',\n    nextPositions: 'nextPositions',\n    nextPositions64xyLow: 'nextPositions64xyLow',\n    elevations: 'elevations',\n    colors: 'lineColors',\n    pickingColors: 'pickingColors'\n  }\n};\n\nexport default class SolidPolygonLayer extends Layer {\n  getShaders() {\n    const projectModule = this.is64bitEnabled() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    this.setState({\n      numInstances: 0,\n      IndexType: hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n    });\n\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {size: 1, isIndexed: true, update: this.calculateIndices, noAlloc},\n      positions: {\n        size: 3,\n        accessor: ['extruded', 'fp64'],\n        update: this.calculatePositions,\n        noAlloc\n      },\n      positions64xyLow: {size: 2, accessor: 'fp64', update: this.calculatePositionsLow},\n      nextPositions: {\n        size: 3,\n        accessor: ['extruded', 'fp64'],\n        update: this.calculateNextPositions,\n        noAlloc\n      },\n      nextPositions64xyLow: {size: 2, accessor: 'fp64', update: this.calculateNextPositionsLow},\n      elevations: {\n        size: 1,\n        accessor: ['extruded', 'getElevation'],\n        update: this.calculateElevations,\n        noAlloc\n      },\n      fillColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        update: this.calculateFillColors,\n        defaultValue: defaultFillColor,\n        noAlloc\n      },\n      lineColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        update: this.calculateLineColors,\n        defaultValue: defaultLineColor,\n        noAlloc\n      },\n      pickingColors: {size: 3, type: GL.UNSIGNED_BYTE, update: this.calculatePickingColors, noAlloc}\n    });\n    /* eslint-enable max-len */\n  }\n\n  draw({uniforms}) {\n    const {extruded, elevationScale} = this.props;\n\n    const renderUniforms = Object.assign({}, uniforms, {\n      extruded: extruded ? 1.0 : 0.0,\n      elevationScale\n    });\n\n    this.state.models.forEach(model => {\n      model.render(renderUniforms);\n    });\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps} = updateParams;\n\n    const regenerateModels =\n      props.fp64 !== oldProps.fp64 ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded ||\n      props.wireframe !== oldProps.wireframe;\n\n    if (regenerateModels) {\n      if (this.state.models) {\n        this.state.models.forEach(model => model.delete());\n      }\n\n      this.setState(\n        Object.assign(\n          {\n            // Set a flag to set attributes to new models\n            modelsChanged: true\n          },\n          this._getModels(this.context.gl)\n        )\n      );\n    }\n\n    if (props.extruded !== oldProps.extruded) {\n      this.state.attributeManager.invalidate('extruded');\n    }\n    if (props.fp64 !== oldProps.fp64) {\n      this.state.attributeManager.invalidate('fp64');\n    }\n  }\n\n  updateGeometry({props, oldProps, changeFlags}) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      // TODO - avoid creating a temporary array here: let the tesselator iterate\n      const polygons = props.data.map(props.getPolygon);\n\n      this.setState({\n        polygonTesselator: this._getPolygonTesselator(polygons, this.state.IndexType)\n      });\n\n      this.state.attributeManager.invalidateAll();\n    }\n\n    if (\n      geometryConfigChanged ||\n      props.extruded !== oldProps.extruded ||\n      props.fp64 !== oldProps.fp64\n    ) {\n      this.state.polygonTesselator.updatePositions({\n        fp64: props.fp64,\n        extruded: props.extruded\n      });\n    }\n  }\n\n  updateAttributes(props) {\n    const {attributeManager, modelsChanged} = this.state;\n\n    // Figure out data length\n    attributeManager.update({\n      data: props.data,\n      numInstances: 0,\n      props,\n      buffers: props,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    if (modelsChanged) {\n      this._updateAttributes(attributeManager.getAttributes());\n      // clear the flag\n      this.setState({modelsChanged: false});\n    } else {\n      const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n      this._updateAttributes(changedAttributes);\n    }\n  }\n\n  // \"Experimental\" method indended to make it easier to support non-nested arrays in subclasses\n  _getPolygonTesselator(polygons, IndexType) {\n    return new PolygonTesselator({polygons, IndexType: this.state.IndexType});\n  }\n\n  _updateAttributes(attributes) {\n    const {modelsByName} = this.state;\n\n    for (const modelName in modelsByName) {\n      const model = modelsByName[modelName];\n\n      if (modelName === 'TOP') {\n        model.setVertexCount(this.state.numVertex);\n      } else {\n        model.setInstanceCount(this.state.numInstances);\n      }\n\n      const attributeMap = ATTRIBUTE_MAPS[modelName];\n      const attributeOverride = ATTRIBUTE_OVERRIDES[modelName];\n      const newAttributes = {};\n      for (const attributeName in attributeMap) {\n        const attribute = attributes[attributeMap[attributeName]];\n\n        if (attribute) {\n          newAttributes[attributeName] = attributeOverride\n            ? Object.assign({}, attribute, attributeOverride, {buffer: attribute.getBuffer()})\n            : attribute;\n        }\n      }\n      model.setAttributes(newAttributes);\n    }\n  }\n\n  _getModels(gl) {\n    const {id, filled, extruded, wireframe} = this.props;\n\n    const models = {};\n\n    if (filled) {\n      models.TOP = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-top`,\n          geometry: new Geometry({\n            drawMode: GL.TRIANGLES,\n            attributes: {\n              vertexPositions: {size: 2, isGeneric: true, value: new Float32Array([0, 1])},\n              nextPositions: {size: 3, isGeneric: true, value: new Float32Array(3)},\n              nextPositions64xyLow: {size: 2, isGeneric: true, value: new Float32Array(2)}\n            }\n          }),\n          uniforms: {\n            isSideVertex: 0\n          },\n          vertexCount: 0,\n          isIndexed: true,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n    if (filled && extruded) {\n      models.SIDE = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-side`,\n          geometry: new Geometry({\n            drawMode: GL.TRIANGLE_STRIP,\n            vertexCount: 4,\n            attributes: {\n              vertexPositions: {size: 2, value: SIDE_FILL_POSITIONS}\n            }\n          }),\n          uniforms: {\n            isSideVertex: 1\n          },\n          isInstanced: 1,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n    if (extruded && wireframe) {\n      models.WIRE = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-wire`,\n          geometry: new Geometry({\n            drawMode: GL.LINE_STRIP,\n            vertexCount: 4,\n            attributes: {\n              vertexPositions: {size: 2, value: SIDE_WIRE_POSITIONS}\n            }\n          }),\n          uniforms: {\n            isSideVertex: 1\n          },\n          isInstanced: 1,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n\n    return {\n      models: [models.WIRE, models.SIDE, models.TOP].filter(Boolean),\n      modelsByName: models\n    };\n  }\n\n  calculateIndices(attribute) {\n    attribute.value = this.state.polygonTesselator.indices();\n    const numVertex = attribute.value.length / attribute.size;\n    this.setState({numVertex});\n  }\n\n  calculatePositions(attribute) {\n    attribute.value = this.state.polygonTesselator.positions();\n    const numInstances = attribute.value.length / attribute.size;\n    this.setState({numInstances});\n  }\n  calculatePositionsLow(attribute) {\n    const isFP64 = this.is64bitEnabled();\n    attribute.isGeneric = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    attribute.value = this.state.polygonTesselator.positions64xyLow();\n  }\n\n  calculateNextPositions(attribute) {\n    attribute.value = this.state.polygonTesselator.nextPositions();\n  }\n  calculateNextPositionsLow(attribute) {\n    const isFP64 = this.is64bitEnabled();\n    attribute.isGeneric = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    attribute.value = this.state.polygonTesselator.nextPositions64xyLow();\n  }\n\n  calculateElevations(attribute) {\n    const {extruded, getElevation} = this.props;\n    if (extruded && typeof getElevation === 'function') {\n      attribute.isGeneric = false;\n      attribute.value = this.state.polygonTesselator.elevations({\n        getElevation: polygonIndex => getElevation(this.props.data[polygonIndex])\n      });\n    } else {\n      const elevation = extruded ? getElevation : 0;\n      attribute.isGeneric = true;\n      attribute.value = new Float32Array([elevation]);\n    }\n  }\n\n  calculateFillColors(attribute) {\n    attribute.value = this.state.polygonTesselator.colors({\n      key: 'fillColors',\n      getColor: polygonIndex => this.props.getFillColor(this.props.data[polygonIndex])\n    });\n  }\n  calculateLineColors(attribute) {\n    attribute.value = this.state.polygonTesselator.colors({\n      key: 'lineColors',\n      getColor: polygonIndex => this.props.getLineColor(this.props.data[polygonIndex])\n    });\n  }\n\n  // Override the default picking colors calculation\n  calculatePickingColors(attribute) {\n    attribute.value = this.state.polygonTesselator.pickingColors();\n  }\n}\n\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;\n"],"file":"solid-polygon-layer.js"}