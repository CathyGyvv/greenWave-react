{"version":3,"sources":["../../../src/hexagon-cell-layer/hexagon-cell-layer.js"],"names":["Layer","log","GL","Model","CylinderGeometry","fp64","fp64LowPart","vs","fs","DEFAULT_COLOR","defaultProps","hexagonVertices","radius","angle","coverage","type","min","max","value","elevationScale","extruded","getCentroid","x","centroid","getColor","color","getElevation","elevation","lightSettings","HexagonCellLayer","constructor","props","missingProps","Number","isFinite","once","Array","isArray","length","getShaders","projectModule","is64bitEnabled","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","transition","accessor","instanceElevations","instancePositions64xyLow","update","calculateInstancePositions64xyLow","instanceColors","UNSIGNED_BYTE","defaultValue","updateState","oldProps","changeFlags","gl","context","state","model","delete","setState","_getModel","invalidateAll","updateRadiusAngle","vertices","vertex0","vertex3","viewport","getDistanceScales","pixelsPerMeter","spaceCoord0","projectFlat","spaceCoord3","dx","dy","dxy","Math","sqrt","acos","sign","PI","getCylinderGeometry","topRadius","bottomRadius","topCap","bottomCap","height","verticalAxis","nradial","nvertical","Object","assign","id","geometry","isInstanced","shaderCache","draw","uniforms","render","attribute","isFP64","isGeneric","Float32Array","data","i","object","position","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, log} from '@deck.gl/core';\nimport {GL, Model, CylinderGeometry, fp64} from 'luma.gl';\nconst {fp64LowPart} = fp64;\n\nimport vs from './hexagon-cell-layer-vertex.glsl';\nimport fs from './hexagon-cell-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [255, 0, 255, 255];\n\nconst defaultProps = {\n  hexagonVertices: null,\n  radius: null,\n  angle: null,\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  extruded: true,\n  fp64: false,\n\n  getCentroid: x => x.centroid,\n  getColor: x => x.color,\n  getElevation: x => x.elevation,\n\n  lightSettings: {}\n};\n\nexport default class HexagonCellLayer extends Layer {\n  constructor(props) {\n    let missingProps = false;\n    if (!props.hexagonVertices && (!props.radius || !Number.isFinite(props.angle))) {\n      log.once(\n        0,\n        'HexagonCellLayer: Either hexagonVertices or radius and angle are ' +\n          'needed to calculate primitive hexagon.'\n      )();\n      missingProps = true;\n    } else if (\n      props.hexagonVertices &&\n      (!Array.isArray(props.hexagonVertices) || props.hexagonVertices.length < 6)\n    ) {\n      log.once(0, 'HexagonCellLayer: hexagonVertices needs to be an array of 6 points')();\n\n      missingProps = true;\n    }\n\n    if (missingProps) {\n      log.once(0, 'Now using 1000 meter as default radius, 0 as default angle')();\n      props.radius = 1000;\n      props.angle = 0;\n    }\n\n    super(props);\n  }\n\n  getShaders() {\n    const projectModule = this.is64bitEnabled() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 2,\n        transition: true,\n        accessor: 'getCentroid'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instancePositions64xyLow: {\n        size: 2,\n        accessor: 'getCentroid',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.state.attributeManager.invalidateAll();\n    }\n\n    if (\n      props.hexagonVertices !== oldProps.hexagonVertices ||\n      props.radius !== oldProps.radius ||\n      props.angle !== oldProps.angle\n    ) {\n      this.updateRadiusAngle();\n    }\n  }\n\n  updateRadiusAngle() {\n    let {angle, radius} = this.props;\n    const {hexagonVertices} = this.props;\n\n    if (Array.isArray(hexagonVertices) && hexagonVertices.length >= 6) {\n      // calculate angle and vertices from hexagonVertices if provided\n      const vertices = this.props.hexagonVertices;\n\n      const vertex0 = vertices[0];\n      const vertex3 = vertices[3];\n\n      // transform to space coordinates\n      const {viewport} = this.context;\n      const {pixelsPerMeter} = viewport.getDistanceScales();\n      const spaceCoord0 = this.projectFlat(vertex0);\n      const spaceCoord3 = this.projectFlat(vertex3);\n\n      // distance between two close centroids\n      const dx = spaceCoord0[0] - spaceCoord3[0];\n      const dy = spaceCoord0[1] - spaceCoord3[1];\n      const dxy = Math.sqrt(dx * dx + dy * dy);\n\n      // Calculate angle that the perpendicular hexagon vertex axis is tilted\n      angle = Math.acos(dx / dxy) * -Math.sign(dy) + Math.PI / 2;\n      radius = dxy / 2 / pixelsPerMeter[0];\n    }\n\n    this.setState({angle, radius});\n  }\n\n  getCylinderGeometry(radius) {\n    return new CylinderGeometry({\n      radius,\n      topRadius: radius,\n      bottomRadius: radius,\n      topCap: true,\n      bottomCap: true,\n      height: 1,\n      verticalAxis: 'z',\n      nradial: 6,\n      nvertical: 1\n    });\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: this.getCylinderGeometry(1),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  draw({uniforms}) {\n    const {elevationScale, extruded, coverage} = this.props;\n    const {radius, angle} = this.state;\n\n    this.state.model.render(\n      Object.assign({}, uniforms, {\n        radius,\n        angle,\n        extruded,\n        coverage,\n        elevationScale\n      })\n    );\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = this.is64bitEnabled();\n    attribute.isGeneric = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getCentroid} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const position = getCentroid(object);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n\n  /*\n  calculateInstanceColors(attribute) {\n    const {data, getColor} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const color = getColor(object) || DEFAULT_COLOR;\n\n      value[i + 0] = color[0];\n      value[i + 1] = color[1];\n      value[i + 2] = color[2];\n      value[i + 3] = Number.isFinite(color[3]) ? color[3] : DEFAULT_COLOR[3];\n      i += size;\n    }\n  }\n  */\n}\n\nHexagonCellLayer.layerName = 'HexagonCellLayer';\nHexagonCellLayer.defaultProps = defaultProps;\n"],"file":"hexagon-cell-layer.js"}