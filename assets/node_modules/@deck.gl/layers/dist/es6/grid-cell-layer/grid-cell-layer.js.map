{"version":3,"sources":["../../../src/grid-cell-layer/grid-cell-layer.js"],"names":["Layer","GL","Model","CubeGeometry","fp64","fp64LowPart","vs","fs","DEFAULT_COLOR","defaultProps","cellSize","type","min","max","value","coverage","elevationScale","extruded","getPosition","x","position","getElevation","elevation","getColor","color","lightSettings","GridCellLayer","getShaders","projectModule","is64bitEnabled","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","transition","accessor","instanceElevations","instancePositions64xyLow","update","calculateInstancePositions64xyLow","instanceColors","UNSIGNED_BYTE","defaultValue","updateState","props","oldProps","changeFlags","gl","context","state","model","delete","setState","_getModel","invalidateAll","Object","assign","id","geometry","isInstanced","shaderCache","draw","uniforms","render","attribute","isFP64","isGeneric","Float32Array","data","i","point","layerName"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,KAAR,QAAoB,eAApB;AACA,SAAQC,EAAR,EAAYC,KAAZ,EAAmBC,YAAnB,EAAiCC,IAAjC,QAA4C,SAA5C;MACOC,W,GAAeD,I,CAAfC,W;AAEP,OAAOC,EAAP,MAAe,+BAAf;AACA,OAAOC,EAAP,MAAe,iCAAf;AAEA,MAAMC,gBAAgB,CAAC,GAAD,EAAM,CAAN,EAAS,GAAT,EAAc,GAAd,CAAtB;AAEA,MAAMC,eAAe;AACnBC,YAAU;AAACC,UAAM,QAAP;AAAiBC,SAAK,CAAtB;AAAyBC,SAAK,IAA9B;AAAoCC,WAAO;AAA3C,GADS;AAEnBC,YAAU;AAACJ,UAAM,QAAP;AAAiBC,SAAK,CAAtB;AAAyBC,SAAK,CAA9B;AAAiCC,WAAO;AAAxC,GAFS;AAGnBE,kBAAgB;AAACL,UAAM,QAAP;AAAiBC,SAAK,CAAtB;AAAyBE,WAAO;AAAhC,GAHG;AAInBG,YAAU,IAJS;AAKnBb,QAAM,KALa;AAOnBc,eAAaC,KAAKA,EAAEC,QAPD;AAQnBC,gBAAcF,KAAKA,EAAEG,SARF;AASnBC,YAAUJ,KAAKA,EAAEK,KATE;AAWnBC,iBAAe;AAXI,CAArB;AAcA,eAAe,MAAMC,aAAN,SAA4B1B,KAA5B,CAAkC;AAC/C;;;;;;;;;;;;AAaA2B,eAAa;AACX,UAAMC,gBAAgB,KAAKC,cAAL,KAAwB,WAAxB,GAAsC,WAA5D;AACA,WAAO;AAACvB,QAAD;AAAKC,QAAL;AAASuB,eAAS,CAACF,aAAD,EAAgB,UAAhB,EAA4B,SAA5B;AAAlB,KAAP;AACD;;AAEDG,oBAAkB;AAChB,UAAMC,mBAAmB,KAAKC,mBAAL,EAAzB;AACAD,qBAAiBE,YAAjB,CAA8B;AAC5BC,yBAAmB;AACjBC,cAAM,CADW;AAEjBC,oBAAY,IAFK;AAGjBC,kBAAU;AAHO,OADS;AAM5BC,0BAAoB;AAClBH,cAAM,CADY;AAElBC,oBAAY,IAFM;AAGlBC,kBAAU;AAHQ,OANQ;AAW5BE,gCAA0B;AACxBJ,cAAM,CADkB;AAExBE,kBAAU,aAFc;AAGxBG,gBAAQ,KAAKC;AAHW,OAXE;AAgB5BC,sBAAgB;AACdP,cAAM,CADQ;AAEdzB,cAAMV,GAAG2C,aAFK;AAGdP,oBAAY,IAHE;AAIdC,kBAAU,UAJI;AAKdO,sBAAcrC;AALA;AAhBY,KAA9B;AAwBD;;AAEDsC,cAAY;AAACC,SAAD;AAAQC,YAAR;AAAkBC;AAAlB,GAAZ,EAA4C;AAC1C,UAAMH,WAAN,CAAkB;AAACC,WAAD;AAAQC,cAAR;AAAkBC;AAAlB,KAAlB,EAD0C,CAE1C;;AACA,QAAIF,MAAM3C,IAAN,KAAe4C,SAAS5C,IAA5B,EAAkC;AAAA,YACzB8C,EADyB,GACnB,KAAKC,OADc,CACzBD,EADyB;;AAEhC,UAAI,KAAKE,KAAL,CAAWC,KAAf,EAAsB;AACpB,aAAKD,KAAL,CAAWC,KAAX,CAAiBC,MAAjB;AACD;;AACD,WAAKC,QAAL,CAAc;AAACF,eAAO,KAAKG,SAAL,CAAeN,EAAf;AAAR,OAAd;AACA,WAAKE,KAAL,CAAWpB,gBAAX,CAA4ByB,aAA5B;AACD;AACF;;AAEDD,YAAUN,EAAV,EAAc;AACZ,WAAO,IAAIhD,KAAJ,CACLgD,EADK,EAELQ,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKhC,UAAL,EAAlB,EAAqC;AACnCiC,UAAI,KAAKb,KAAL,CAAWa,EADoB;AAEnCC,gBAAU,IAAI1D,YAAJ,EAFyB;AAGnC2D,mBAAa,IAHsB;AAInCC,mBAAa,KAAKZ,OAAL,CAAaY;AAJS,KAArC,CAFK,CAAP;AASD;;AAEDC,OAAK;AAACC;AAAD,GAAL,EAAiB;AAAA,wBACwC,KAAKlB,KAD7C;AAAA,UACRrC,QADQ,eACRA,QADQ;AAAA,UACEO,QADF,eACEA,QADF;AAAA,UACYD,cADZ,eACYA,cADZ;AAAA,UAC4BD,QAD5B,eAC4BA,QAD5B;AAGf,SAAKqC,KAAL,CAAWC,KAAX,CAAiBa,MAAjB,CACER,OAAOC,MAAP,CAAc,EAAd,EAAkBM,QAAlB,EAA4B;AAC1BvD,cAD0B;AAE1BO,cAF0B;AAG1BD,oBAH0B;AAI1BD;AAJ0B,KAA5B,CADF;AAQD;;AAED2B,oCAAkCyB,SAAlC,EAA6C;AAC3C,UAAMC,SAAS,KAAKvC,cAAL,EAAf;AACAsC,cAAUE,SAAV,GAAsB,CAACD,MAAvB;;AAEA,QAAI,CAACA,MAAL,EAAa;AACXD,gBAAUrD,KAAV,GAAkB,IAAIwD,YAAJ,CAAiB,CAAjB,CAAlB;AACA;AACD;;AAP0C,yBASf,KAAKvB,KATU;AAAA,UASpCwB,IAToC,gBASpCA,IAToC;AAAA,UAS9BrD,WAT8B,gBAS9BA,WAT8B;AAAA,UAUpCJ,KAVoC,GAU3BqD,SAV2B,CAUpCrD,KAVoC;AAW3C,QAAI0D,IAAI,CAAR;;AACA,SAAK,MAAMC,KAAX,IAAoBF,IAApB,EAA0B;AACxB,YAAMnD,WAAWF,YAAYuD,KAAZ,CAAjB;AACA3D,YAAM0D,GAAN,IAAanE,YAAYe,SAAS,CAAT,CAAZ,CAAb;AACAN,YAAM0D,GAAN,IAAanE,YAAYe,SAAS,CAAT,CAAZ,CAAb;AACD;AACF;AAED;;;;;;;;;;;;;;;;;AAxG+C;AAyHjDM,cAAcgD,SAAd,GAA0B,eAA1B;AACAhD,cAAcjB,YAAd,GAA6BA,YAA7B","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport {GL, Model, CubeGeometry, fp64} from 'luma.gl';\nconst {fp64LowPart} = fp64;\n\nimport vs from './grid-cell-layer-vertex.glsl';\nimport fs from './grid-cell-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [255, 0, 255, 255];\n\nconst defaultProps = {\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  extruded: true,\n  fp64: false,\n\n  getPosition: x => x.position,\n  getElevation: x => x.elevation,\n  getColor: x => x.color,\n\n  lightSettings: {}\n};\n\nexport default class GridCellLayer extends Layer {\n  /**\n   * A generic GridLayer that takes latitude longitude delta of cells as a uniform\n   * and the min lat lng of cells. grid can be 3d when pass in a height\n   * and set enable3d to true\n   *\n   * @param {array} props.data -\n   * @param {boolean} props.extruded - enable grid elevation\n   * @param {number} props.cellSize - grid cell size in meters\n   * @param {function} props.getPosition - position accessor, returned as [minLng, minLat]\n   * @param {function} props.getElevation - elevation accessor\n   * @param {function} props.getColor - color accessor, returned as [r, g, b, a]\n   */\n\n  getShaders() {\n    const projectModule = this.is64bitEnabled() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instancePositions64xyLow: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    // Re-generate model if geometry changed\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.state.attributeManager.invalidateAll();\n    }\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new CubeGeometry(),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  draw({uniforms}) {\n    const {cellSize, extruded, elevationScale, coverage} = this.props;\n\n    this.state.model.render(\n      Object.assign({}, uniforms, {\n        cellSize,\n        extruded,\n        elevationScale,\n        coverage\n      })\n    );\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = this.is64bitEnabled();\n    attribute.isGeneric = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n\n  /*\n  calculateInstanceColors(attribute) {\n    const {data, getColor} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const color = getColor(object) || DEFAULT_COLOR;\n      value[i + 0] = color[0];\n      value[i + 1] = color[1];\n      value[i + 2] = color[2];\n      value[i + 3] = Number.isFinite(color[3]) ? color[3] : DEFAULT_COLOR[3];\n      i += size;\n    }\n  }\n  */\n}\n\nGridCellLayer.layerName = 'GridCellLayer';\nGridCellLayer.defaultProps = defaultProps;\n"],"file":"grid-cell-layer.js"}