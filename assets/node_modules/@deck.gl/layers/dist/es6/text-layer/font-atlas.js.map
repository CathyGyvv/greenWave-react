{"version":3,"sources":["../../../src/text-layer/font-atlas.js"],"names":["Texture2D","GL_TEXTURE_WRAP_S","GL_TEXTURE_WRAP_T","GL_CLAMP_TO_EDGE","MAX_CANVAS_WIDTH","DEFAULT_FONT_SIZE","DEFAULT_PADDING","DEFAULT_CHAR_SET","i","push","String","fromCharCode","setTextStyle","ctx","fontFamily","fontSize","useAdvancedMetrics","font","fillStyle","textBaseline","textAlign","makeFontAtlas","gl","characterSet","padding","canvas","document","createElement","getContext","row","x","measureText","fontBoundingBoxDescent","fontHeight","Boolean","mapping","Array","from","forEach","char","width","y","height","mask","fillText","scale","texture","pixels","parameters"],"mappings":"AAAA;AACA,SAAQA,SAAR,QAAwB,SAAxB;AAEA,MAAMC,oBAAoB,MAA1B;AACA,MAAMC,oBAAoB,MAA1B;AACA,MAAMC,mBAAmB,MAAzB;AACA,MAAMC,mBAAmB,IAAzB;AACA,MAAMC,oBAAoB,EAA1B;AACA,MAAMC,kBAAkB,CAAxB;AAEA,OAAO,MAAMC,mBAAmB,EAAzB;;AACP,KAAK,IAAIC,IAAI,EAAb,EAAiBA,IAAI,GAArB,EAA0BA,GAA1B,EAA+B;AAC7BD,mBAAiBE,IAAjB,CAAsBC,OAAOC,YAAP,CAAoBH,CAApB,CAAtB;AACD;;AAED,SAASI,YAAT,CAAsBC,GAAtB,EAA2BC,UAA3B,EAAuCC,QAAvC,EAAiDC,kBAAjD,EAAqE;AACnEH,MAAII,IAAJ,GAAY,GAAEF,QAAS,MAAKD,UAAW,EAAvC;AACAD,MAAIK,SAAJ,GAAgB,MAAhB;AACAL,MAAIM,YAAJ,GAAmBH,qBAAqB,KAArB,GAA6B,SAAhD;AACAH,MAAIO,SAAJ,GAAgB,MAAhB;AACD;;AAED,OAAO,SAASC,aAAT,CACLC,EADK,EAEL;AACER,YADF;AAEES,iBAAehB,gBAFjB;AAGEQ,aAAWV,iBAHb;AAIEmB,YAAUlB;AAJZ,CAFK,EAQL;AACA,QAAMmB,SAASC,SAASC,aAAT,CAAuB,QAAvB,CAAf;AACA,QAAMd,MAAMY,OAAOG,UAAP,CAAkB,IAAlB,CAAZ;AACAhB,eAAaC,GAAb,EAAkBC,UAAlB,EAA8BC,QAA9B,EAAwC,IAAxC,EAHA,CAKA;;AACA,MAAIc,MAAM,CAAV;AACA,MAAIC,IAAI,CAAR,CAPA,CAQA;AACA;AACA;;AAVA,2BAWiCjB,IAAIkB,WAAJ,CAAgBR,aAAa,CAAb,CAAhB,CAXjC;AAAA,QAWOS,sBAXP,oBAWOA,sBAXP,EAYA;;;AACA,QAAMC,aAAaD,0BAA0BjB,QAA7C;AACA,QAAMC,qBAAqBkB,QAAQF,sBAAR,CAA3B;AACA,QAAMG,UAAU,EAAhB;AAEAC,QAAMC,IAAN,CAAWd,YAAX,EAAyBe,OAAzB,CAAiCC,QAAQ;AAAA,8BACvB1B,IAAIkB,WAAJ,CAAgBQ,IAAhB,CADuB;AAAA,UAChCC,KADgC,qBAChCA,KADgC;;AAGvC,QAAIV,IAAIU,KAAJ,GAAYpC,gBAAhB,EAAkC;AAChC0B,UAAI,CAAJ;AACAD;AACD;;AACDM,YAAQI,IAAR,IAAgB;AACdT,OADc;AAEdW,SAAGZ,OAAOI,aAAaT,OAApB,CAFW;AAGdgB,WAHc;AAIdE,cAAQT,UAJM;AAKdU,YAAM;AALQ,KAAhB;AAOAb,SAAKU,QAAQhB,OAAb;AACD,GAfD;AAiBAC,SAAOe,KAAP,GAAepC,gBAAf;AACAqB,SAAOiB,MAAP,GAAgB,CAACb,MAAM,CAAP,KAAaI,aAAaT,OAA1B,CAAhB;AAEAZ,eAAaC,GAAb,EAAkBC,UAAlB,EAA8BC,QAA9B,EAAwCC,kBAAxC;;AACA,OAAK,MAAMuB,IAAX,IAAmBJ,OAAnB,EAA4B;AAC1BtB,QAAI+B,QAAJ,CAAaL,IAAb,EAAmBJ,QAAQI,IAAR,EAAcT,CAAjC,EAAoCK,QAAQI,IAAR,EAAcE,CAAlD;AACD;;AAED,SAAO;AACLI,WAAOZ,aAAalB,QADf;AAELoB,WAFK;AAGLW,aAAS,IAAI9C,SAAJ,CAAcsB,EAAd,EAAkB;AACzByB,cAAQtB,MADiB;AAEzB;AACA;AACAuB,kBAAY;AACV,SAAC/C,iBAAD,GAAqBE,gBADX;AAEV,SAACD,iBAAD,GAAqBC;AAFX;AAJa,KAAlB;AAHJ,GAAP;AAaD","sourcesContent":["/* global document */\nimport {Texture2D} from 'luma.gl';\n\nconst GL_TEXTURE_WRAP_S = 0x2802;\nconst GL_TEXTURE_WRAP_T = 0x2803;\nconst GL_CLAMP_TO_EDGE = 0x812f;\nconst MAX_CANVAS_WIDTH = 1024;\nconst DEFAULT_FONT_SIZE = 64;\nconst DEFAULT_PADDING = 4;\n\nexport const DEFAULT_CHAR_SET = [];\nfor (let i = 32; i < 128; i++) {\n  DEFAULT_CHAR_SET.push(String.fromCharCode(i));\n}\n\nfunction setTextStyle(ctx, fontFamily, fontSize, useAdvancedMetrics) {\n  ctx.font = `${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = useAdvancedMetrics ? 'top' : 'hanging';\n  ctx.textAlign = 'left';\n}\n\nexport function makeFontAtlas(\n  gl,\n  {\n    fontFamily,\n    characterSet = DEFAULT_CHAR_SET,\n    fontSize = DEFAULT_FONT_SIZE,\n    padding = DEFAULT_PADDING\n  }\n) {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  setTextStyle(ctx, fontFamily, fontSize, true);\n\n  // measure texts\n  let row = 0;\n  let x = 0;\n  // Get a sample of text metrics\n  // Advanced text metrics are only implemented in Chrome:\n  // https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics\n  const {fontBoundingBoxDescent} = ctx.measureText(characterSet[0]);\n  // Fallback to height=fontSize\n  const fontHeight = fontBoundingBoxDescent || fontSize;\n  const useAdvancedMetrics = Boolean(fontBoundingBoxDescent);\n  const mapping = {};\n\n  Array.from(characterSet).forEach(char => {\n    const {width} = ctx.measureText(char);\n\n    if (x + width > MAX_CANVAS_WIDTH) {\n      x = 0;\n      row++;\n    }\n    mapping[char] = {\n      x,\n      y: row * (fontHeight + padding),\n      width,\n      height: fontHeight,\n      mask: true\n    };\n    x += width + padding;\n  });\n\n  canvas.width = MAX_CANVAS_WIDTH;\n  canvas.height = (row + 1) * (fontHeight + padding);\n\n  setTextStyle(ctx, fontFamily, fontSize, useAdvancedMetrics);\n  for (const char in mapping) {\n    ctx.fillText(char, mapping[char].x, mapping[char].y);\n  }\n\n  return {\n    scale: fontHeight / fontSize,\n    mapping,\n    texture: new Texture2D(gl, {\n      pixels: canvas,\n      // padding is added only between the characters but not for borders\n      // enforce CLAMP_TO_EDGE to avoid any artifacts.\n      parameters: {\n        [GL_TEXTURE_WRAP_S]: GL_CLAMP_TO_EDGE,\n        [GL_TEXTURE_WRAP_T]: GL_CLAMP_TO_EDGE\n      }\n    })\n  };\n}\n"],"file":"font-atlas.js"}