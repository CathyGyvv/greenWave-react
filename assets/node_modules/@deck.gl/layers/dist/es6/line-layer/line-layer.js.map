{"version":3,"sources":["../../../src/line-layer/line-layer.js"],"names":["Layer","log","GL","Model","Geometry","fp64","fp64LowPart","vs","fs","DEFAULT_COLOR","defaultProps","getSourcePosition","x","sourcePosition","getTargetPosition","targetPosition","getColor","color","getStrokeWidth","LineLayer","constructor","props","overrideProps","Number","isFinite","strokeWidth","deprecated","getShaders","projectModule","is64bitEnabled","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instanceSourcePositions","size","transition","accessor","instanceTargetPositions","instanceSourceTargetPositions64xyLow","update","calculateInstanceSourceTargetPositions64xyLow","instanceColors","type","UNSIGNED_BYTE","defaultValue","instanceWidths","updateState","oldProps","changeFlags","gl","context","state","model","delete","setState","_getModel","invalidateAll","positions","Object","assign","id","geometry","drawMode","TRIANGLE_STRIP","attributes","Float32Array","isInstanced","shaderCache","attribute","isFP64","isGeneric","value","data","i","object","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, log} from '@deck.gl/core';\nimport {GL, Model, Geometry, fp64} from 'luma.gl';\nconst {fp64LowPart} = fp64;\n\nimport vs from './line-layer-vertex.glsl';\nimport fs from './line-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  fp64: false,\n\n  getSourcePosition: x => x.sourcePosition,\n  getTargetPosition: x => x.targetPosition,\n  getColor: x => x.color || DEFAULT_COLOR,\n  getStrokeWidth: 1\n};\n\nexport default class LineLayer extends Layer {\n  constructor(props) {\n    let overrideProps = null;\n    if (Number.isFinite(props.strokeWidth)) {\n      log.deprecated('LineLayer: `strokeWidth`', '`getStrokeWidth`');\n      overrideProps = {\n        getStrokeWidth: props.strokeWidth\n      };\n    }\n    super(props, overrideProps);\n  }\n\n  getShaders() {\n    const projectModule = this.is64bitEnabled() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'picking']};\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceSourceTargetPositions64xyLow: {\n        size: 4,\n        accessor: ['getSourcePosition', 'getTargetPosition'],\n        update: this.calculateInstanceSourceTargetPositions64xyLow\n      },\n      instanceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getStrokeWidth',\n        defaultValue: 1\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.state.attributeManager.invalidateAll();\n    }\n  }\n\n  _getModel(gl) {\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    const positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_STRIP,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  calculateInstanceSourceTargetPositions64xyLow(attribute) {\n    const isFP64 = this.is64bitEnabled();\n    attribute.isGeneric = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(4);\n      return;\n    }\n\n    const {data, getSourcePosition, getTargetPosition} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const sourcePosition = getSourcePosition(object);\n      const targetPosition = getTargetPosition(object);\n      value[i + 0] = fp64LowPart(sourcePosition[0]);\n      value[i + 1] = fp64LowPart(sourcePosition[1]);\n      value[i + 2] = fp64LowPart(targetPosition[0]);\n      value[i + 3] = fp64LowPart(targetPosition[1]);\n      i += size;\n    }\n  }\n\n  /*\n  calculateInstanceSourcePositions(attribute) {\n    const {data, getSourcePosition} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const sourcePosition = getSourcePosition(object);\n      value[i + 0] = sourcePosition[0];\n      value[i + 1] = sourcePosition[1];\n      value[i + 2] = isNaN(sourcePosition[2]) ? 0 : sourcePosition[2];\n      i += size;\n    }\n  }\n\n  calculateInstanceTargetPositions(attribute) {\n    const {data, getTargetPosition} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const targetPosition = getTargetPosition(object);\n      value[i + 0] = targetPosition[0];\n      value[i + 1] = targetPosition[1];\n      value[i + 2] = isNaN(targetPosition[2]) ? 0 : targetPosition[2];\n      i += size;\n    }\n  }\n\n  calculateInstanceColors(attribute) {\n    const {data, getColor} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const color = getColor(object);\n      value[i + 0] = color[0];\n      value[i + 1] = color[1];\n      value[i + 2] = color[2];\n      value[i + 3] = isNaN(color[3]) ? 255 : color[3];\n      i += size;\n    }\n  }\n  */\n}\n\nLineLayer.layerName = 'LineLayer';\nLineLayer.defaultProps = defaultProps;\n"],"file":"line-layer.js"}