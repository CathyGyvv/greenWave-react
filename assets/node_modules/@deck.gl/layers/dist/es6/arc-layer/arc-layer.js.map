{"version":3,"sources":["../../../src/arc-layer/arc-layer.js"],"names":["COORDINATE_SYSTEM","Layer","log","GL","Model","Geometry","fp64","fp64LowPart","vs","vs64","fs","DEFAULT_COLOR","defaultProps","getSourcePosition","x","sourcePosition","getTargetPosition","targetPosition","getSourceColor","color","getTargetColor","getStrokeWidth","ArcLayer","constructor","props","overrideProps","Number","isFinite","strokeWidth","deprecated","getShaders","is64bitEnabled","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","transition","accessor","update","calculateInstancePositions","instanceSourceColors","type","UNSIGNED_BYTE","defaultValue","instanceTargetColors","instanceWidths","updateAttribute","oldProps","changeFlags","invalidateAll","coordinateSystem","LNGLAT","instancePositions64Low","calculateInstancePositions64Low","remove","updateState","gl","context","state","model","delete","setState","_getModel","positions","NUM_SEGMENTS","i","concat","Object","assign","id","geometry","drawMode","TRIANGLE_STRIP","attributes","Float32Array","isInstanced","shaderCache","setUniforms","numSegments","attribute","data","value","object","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {COORDINATE_SYSTEM, Layer, log} from '@deck.gl/core';\n\nimport {GL, Model, Geometry, fp64} from 'luma.gl';\nconst {fp64LowPart} = fp64;\n\nimport vs from './arc-layer-vertex.glsl';\nimport vs64 from './arc-layer-vertex-64.glsl';\nimport fs from './arc-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  fp64: false,\n\n  getSourcePosition: x => x.sourcePosition,\n  getTargetPosition: x => x.targetPosition,\n  getSourceColor: x => x.color || DEFAULT_COLOR,\n  getTargetColor: x => x.color || DEFAULT_COLOR,\n  getStrokeWidth: 1\n};\n\nexport default class ArcLayer extends Layer {\n  constructor(props) {\n    let overrideProps = null;\n    if (Number.isFinite(props.strokeWidth)) {\n      log.deprecated('ArcLayer: `strokeWidth`', '`getStrokeWidth`');\n      overrideProps = {\n        getStrokeWidth: props.strokeWidth\n      };\n    }\n    super(props, overrideProps);\n  }\n\n  getShaders() {\n    return this.is64bitEnabled()\n      ? {vs: vs64, fs, modules: ['project64', 'picking']}\n      : {vs, fs, modules: ['picking']}; // 'project' module added by default.\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 4,\n        transition: true,\n        accessor: ['getSourcePosition', 'getTargetPosition'],\n        update: this.calculateInstancePositions\n      },\n      instanceSourceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getSourceColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceTargetColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getTargetColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getStrokeWidth',\n        defaultValue: 1\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateAttribute({props, oldProps, changeFlags}) {\n    if (props.fp64 !== oldProps.fp64) {\n      const attributeManager = this.getAttributeManager();\n      attributeManager.invalidateAll();\n\n      if (props.fp64 && props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        attributeManager.addInstanced({\n          instancePositions64Low: {\n            size: 4,\n            accessor: ['getSourcePosition', 'getTargetPosition'],\n            update: this.calculateInstancePositions64Low\n          }\n        });\n      } else {\n        attributeManager.remove(['instancePositions64Low']);\n      }\n    }\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    // Re-generate model if geometry changed\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n    }\n    this.updateAttribute({props, oldProps, changeFlags});\n  }\n\n  _getModel(gl) {\n    let positions = [];\n    const NUM_SEGMENTS = 50;\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    for (let i = 0; i < NUM_SEGMENTS; i++) {\n      positions = positions.concat([i, -1, 0, i, 1, 0]);\n    }\n\n    const model = new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_STRIP,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n\n    model.setUniforms({numSegments: NUM_SEGMENTS});\n\n    return model;\n  }\n\n  calculateInstancePositions(attribute) {\n    const {data, getSourcePosition, getTargetPosition} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const sourcePosition = getSourcePosition(object);\n      const targetPosition = getTargetPosition(object);\n      value[i + 0] = sourcePosition[0];\n      value[i + 1] = sourcePosition[1];\n      value[i + 2] = targetPosition[0];\n      value[i + 3] = targetPosition[1];\n      i += size;\n    }\n  }\n\n  calculateInstancePositions64Low(attribute) {\n    const {data, getSourcePosition, getTargetPosition} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const sourcePosition = getSourcePosition(object);\n      const targetPosition = getTargetPosition(object);\n      value[i + 0] = fp64LowPart(sourcePosition[0]);\n      value[i + 1] = fp64LowPart(sourcePosition[1]);\n      value[i + 2] = fp64LowPart(targetPosition[0]);\n      value[i + 3] = fp64LowPart(targetPosition[1]);\n      i += size;\n    }\n  }\n\n  /*\n  calculateInstanceSourceColors(attribute) {\n    const {data, getSourceColor} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const color = getSourceColor(object);\n      value[i + 0] = color[0];\n      value[i + 1] = color[1];\n      value[i + 2] = color[2];\n      value[i + 3] = isNaN(color[3]) ? 255 : color[3];\n      i += size;\n    }\n  }\n\n  calculateInstanceTargetColors(attribute) {\n    const {data, getTargetColor} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const color = getTargetColor(object);\n      value[i + 0] = color[0];\n      value[i + 1] = color[1];\n      value[i + 2] = color[2];\n      value[i + 3] = isNaN(color[3]) ? 255 : color[3];\n      i += size;\n    }\n  }\n  */\n}\n\nArcLayer.layerName = 'ArcLayer';\nArcLayer.defaultProps = defaultProps;\n"],"file":"arc-layer.js"}