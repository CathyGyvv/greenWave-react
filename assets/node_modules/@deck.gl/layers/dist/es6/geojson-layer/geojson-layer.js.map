{"version":3,"sources":["../../../src/geojson-layer/geojson-layer.js"],"names":["CompositeLayer","ScatterplotLayer","PathLayer","SolidPolygonLayer","getGeojsonFeatures","separateGeojsonFeatures","defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","wireframe","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","elevationScale","pointRadiusScale","pointRadiusMinPixels","pointRadiusMaxPixels","fp64","getLineColor","f","properties","lineColor","getFillColor","fillColor","getRadius","radius","size","getLineWidth","lineWidth","getElevation","elevation","subLayers","PointLayer","LineLayer","PolygonLayer","lightSettings","getCoordinates","geometry","coordinates","GeoJsonLayer","initializeState","state","features","updateState","oldProps","props","changeFlags","dataChanged","data","getPickingInfo","info","Object","assign","object","feature","renderLayers","pointFeatures","lineFeatures","polygonFeatures","polygonOutlineFeatures","updateTriggers","drawPoints","length","drawLines","hasPolygonLines","hasPolygon","polygonFillLayer","getSubLayerProps","id","getPolygon","polygonLineLayer","getColor","getWidth","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","getPath","pathLayer","pointLayer","radiusScale","radiusMinPixels","radiusMaxPixels","getPosition","layerName"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,cAAR,QAA6B,eAA7B;AACA,OAAOC,gBAAP,MAA6B,wCAA7B;AACA,OAAOC,SAAP,MAAsB,0BAAtB,C,CACA;;AACA,OAAOC,iBAAP,MAA8B,4CAA9B;AAEA,SAAQC,kBAAR,EAA4BC,uBAA5B,QAA0D,WAA1D;AAEA,MAAMC,mBAAmB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,IAAhB,CAAzB;AACA,MAAMC,mBAAmB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,IAAhB,CAAzB;AAEA,MAAMC,eAAe;AACnBC,WAAS,IADU;AAEnBC,UAAQ,IAFW;AAGnBC,YAAU,KAHS;AAInBC,aAAW,KAJQ;AAMnBC,kBAAgB,CANG;AAOnBC,sBAAoB,CAPD;AAQnBC,sBAAoBC,OAAOC,gBARR;AASnBC,oBAAkB,KATC;AAUnBC,kBAAgB,CAVG;AAYnBC,kBAAgB,CAZG;AAcnBC,oBAAkB,CAdC;AAenBC,wBAAsB,CAfH;AAeM;AACzBC,wBAAsBP,OAAOC,gBAhBV;AAgB4B;AAE/CO,QAAM,KAlBa;AAoBnB;AACAC,gBAAcC,KAAMA,EAAEC,UAAF,IAAgBD,EAAEC,UAAF,CAAaC,SAA9B,IAA4CtB,gBArB5C;AAsBnB;AACAuB,gBAAcH,KAAMA,EAAEC,UAAF,IAAgBD,EAAEC,UAAF,CAAaG,SAA9B,IAA4CvB,gBAvB5C;AAwBnB;AACAwB,aAAWL,KAAMA,EAAEC,UAAF,KAAiBD,EAAEC,UAAF,CAAaK,MAAb,IAAuBN,EAAEC,UAAF,CAAaM,IAArD,CAAD,IAAgE,CAzB7D;AA0BnB;AACAC,gBAAcR,KAAMA,EAAEC,UAAF,IAAgBD,EAAEC,UAAF,CAAaQ,SAA9B,IAA4C,CA3B5C;AA4BnB;AACAC,gBAAcV,KAAMA,EAAEC,UAAF,IAAgBD,EAAEC,UAAF,CAAaU,SAA9B,IAA4C,IA7B5C;AA+BnBC,aAAW;AACTC,gBAAYtC,gBADH;AAETuC,eAAWtC,SAFF;AAGTuC,kBAActC;AAHL,GA/BQ;AAqCnB;AACAuC,iBAAe;AAtCI,CAArB;;AAyCA,MAAMC,iBAAiBjB,KAAKA,EAAEkB,QAAF,CAAWC,WAAvC;;AAEA,eAAe,MAAMC,YAAN,SAA2B9C,cAA3B,CAA0C;AACvD+C,oBAAkB;AAChB,SAAKC,KAAL,GAAa;AACXC,gBAAU;AADC,KAAb;AAGD;;AAEDC,cAAY;AAACC,YAAD;AAAWC,SAAX;AAAkBC;AAAlB,GAAZ,EAA4C;AAC1C,QAAIA,YAAYC,WAAhB,EAA6B;AAAA,YACpBC,IADoB,GACZH,KADY,CACpBG,IADoB;AAE3B,YAAMN,WAAW7C,mBAAmBmD,IAAnB,CAAjB;AACA,WAAKP,KAAL,CAAWC,QAAX,GAAsB5C,wBAAwB4C,QAAxB,CAAtB;AACD;AACF;;AAEDO,iBAAe;AAACC;AAAD,GAAf,EAAuB;AACrB,WAAOC,OAAOC,MAAP,CAAcF,IAAd,EAAoB;AACzB;AACAG,cAASH,KAAKG,MAAL,IAAeH,KAAKG,MAAL,CAAYC,OAA5B,IAAwCJ,KAAKG;AAF5B,KAApB,CAAP;AAID;AAED;;;AACAE,iBAAe;AAAA,UACNb,QADM,GACM,KAAKD,KADX,CACNC,QADM;AAAA,UAENc,aAFM,GAEkEd,QAFlE,CAENc,aAFM;AAAA,UAESC,YAFT,GAEkEf,QAFlE,CAESe,YAFT;AAAA,UAEuBC,eAFvB,GAEkEhB,QAFlE,CAEuBgB,eAFvB;AAAA,UAEwCC,sBAFxC,GAEkEjB,QAFlE,CAEwCiB,sBAFxC,EAIb;;AAJa,wBAK4D,KAAKd,KALjE;AAAA,UAKN3C,OALM,eAKNA,OALM;AAAA,UAKGC,MALH,eAKGA,MALH;AAAA,UAKWC,QALX,eAKWA,QALX;AAAA,UAKqBC,SALrB,eAKqBA,SALrB;AAAA,UAKgC0B,SALhC,eAKgCA,SALhC;AAAA,UAK2CI,aAL3C,eAK2CA,aAL3C,EAOb;;AAPa,yBAmBT,KAAKU,KAnBI;AAAA,UASXvC,cATW,gBASXA,cATW;AAAA,UAUXC,kBAVW,gBAUXA,kBAVW;AAAA,UAWXC,kBAXW,gBAWXA,kBAXW;AAAA,UAYXG,gBAZW,gBAYXA,gBAZW;AAAA,UAaXC,cAbW,gBAaXA,cAbW;AAAA,UAcXE,gBAdW,gBAcXA,gBAdW;AAAA,UAeXC,oBAfW,gBAeXA,oBAfW;AAAA,UAgBXC,oBAhBW,gBAgBXA,oBAhBW;AAAA,UAiBXH,cAjBW,gBAiBXA,cAjBW;AAAA,UAkBXI,IAlBW,gBAkBXA,IAlBW,EAqBb;;AArBa,yBA6BT,KAAK4B,KA7BI;AAAA,UAuBX3B,YAvBW,gBAuBXA,YAvBW;AAAA,UAwBXI,YAxBW,gBAwBXA,YAxBW;AAAA,UAyBXE,SAzBW,gBAyBXA,SAzBW;AAAA,UA0BXG,YA1BW,gBA0BXA,YA1BW;AAAA,UA2BXE,YA3BW,gBA2BXA,YA3BW;AAAA,UA4BX+B,cA5BW,gBA4BXA,cA5BW;AA+Bb,UAAMC,aAAaL,iBAAiBA,cAAcM,MAAd,GAAuB,CAA3D;AACA,UAAMC,YAAYN,gBAAgBA,aAAaK,MAAb,GAAsB,CAAxD;AACA,UAAME,kBAAkBL,0BAA0BA,uBAAuBG,MAAvB,GAAgC,CAAlF;AACA,UAAMG,aAAaP,mBAAmBA,gBAAgBI,MAAhB,GAAyB,CAA/D,CAlCa,CAoCb;;AACA,UAAMI,mBACJD,cACA,IAAIlC,UAAUG,YAAd,CACE,KAAKiC,gBAAL,CAAsB;AACpBC,UAAI,cADgB;AAEpBR,sBAAgB;AACd/B,sBAAc+B,eAAe/B,YADf;AAEdP,sBAAcsC,eAAetC,YAFf;AAGdJ,sBAAc0C,eAAe1C;AAHf;AAFI,KAAtB,CADF,EASE;AACE8B,YAAMU,eADR;AAEEzC,UAFF;AAGEb,cAHF;AAIES,oBAJF;AAKEV,YALF;AAMEE,eANF;AAOE8B,mBAPF;AAQEkC,kBAAYjC,cARd;AASEP,kBATF;AAUEP,kBAVF;AAWEJ;AAXF,KATF,CAFF;AA0BA,UAAMoD,mBACJ,CAAClE,QAAD,IACAF,OADA,IAEA8D,eAFA,IAGA,IAAIjC,UAAUE,SAAd,CACE,KAAKkC,gBAAL,CAAsB;AACpBC,UAAI,iBADgB;AAEpBR,sBAAgB;AACdW,kBAAUX,eAAe1C,YADX;AAEdsD,kBAAUZ,eAAejC;AAFX;AAFI,KAAtB,CADF,EAQE;AACEqB,YAAMW,sBADR;AAGE1C,UAHF;AAIEwD,kBAAYnE,cAJd;AAKEoE,sBAAgBnE,kBALlB;AAMEoE,sBAAgBnE,kBANlB;AAOEoE,eAASjE,gBAPX;AAQEkE,kBAAYjE,cARd;AAUEkE,eAAS1C,cAVX;AAWEmC,gBAAUrD,YAXZ;AAYEsD,gBAAU7C;AAZZ,KARF,CAJF;AA4BA,UAAMoD,YACJhB,aACA,IAAIhC,UAAUE,SAAd,CACE,KAAKkC,gBAAL,CAAsB;AACpBC,UAAI,YADgB;AAEpBR,sBAAgB;AACdW,kBAAUX,eAAe1C,YADX;AAEdsD,kBAAUZ,eAAejC;AAFX;AAFI,KAAtB,CADF,EAQE;AACEqB,YAAMS,YADR;AAGExC,UAHF;AAIEwD,kBAAYnE,cAJd;AAKEoE,sBAAgBnE,kBALlB;AAMEoE,sBAAgBnE,kBANlB;AAOEoE,eAASjE,gBAPX;AAQEkE,kBAAYjE,cARd;AAUEkE,eAAS1C,cAVX;AAWEmC,gBAAUrD,YAXZ;AAYEsD,gBAAU7C;AAZZ,KARF,CAFF;AA0BA,UAAMqD,aACJnB,cACA,IAAI9B,UAAUC,UAAd,CACE,KAAKmC,gBAAL,CAAsB;AACpBC,UAAI,QADgB;AAEpBR,sBAAgB;AACdW,kBAAUX,eAAetC,YADX;AAEdE,mBAAWoC,eAAepC;AAFZ;AAFI,KAAtB,CADF,EAQE;AACEwB,YAAMQ,aADR;AAGEvC,UAHF;AAIEgE,mBAAanE,gBAJf;AAKEoE,uBAAiBnE,oBALnB;AAMEoE,uBAAiBnE,oBANnB;AAQEoE,mBAAahD,cARf;AASEmC,gBAAUjD,YATZ;AAUEE;AAVF,KARF,CAFF;AAwBA,WAAO,CACL;AACA,KAACpB,QAAD,IAAa8D,gBAFR,EAGLI,gBAHK,EAILS,SAJK,EAKLC,UALK,EAML;AACA5E,gBAAY8D,gBAPP,CAAP;AASD;AACD;;;AA9KuD;AAiLzD3B,aAAa8C,SAAb,GAAyB,cAAzB;AACA9C,aAAatC,YAAb,GAA4BA,YAA5B","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer} from '@deck.gl/core';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport PathLayer from '../path-layer/path-layer';\n// Use primitive layer to avoid \"Composite Composite\" layers for now\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\n\nimport {getGeojsonFeatures, separateGeojsonFeatures} from './geojson';\n\nconst defaultLineColor = [0x0, 0x0, 0x0, 0xff];\nconst defaultFillColor = [0x0, 0x0, 0x0, 0xff];\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  elevationScale: 1,\n\n  pointRadiusScale: 1,\n  pointRadiusMinPixels: 0, //  min point radius in pixels\n  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER, // max point radius in pixels\n\n  fp64: false,\n\n  // Line and polygon outline color\n  getLineColor: f => (f.properties && f.properties.lineColor) || defaultLineColor,\n  // Point and polygon fill color\n  getFillColor: f => (f.properties && f.properties.fillColor) || defaultFillColor,\n  // Point radius\n  getRadius: f => (f.properties && (f.properties.radius || f.properties.size)) || 1,\n  // Line and polygon outline accessors\n  getLineWidth: f => (f.properties && f.properties.lineWidth) || 1,\n  // Polygon extrusion accessor\n  getElevation: f => (f.properties && f.properties.elevation) || 1000,\n\n  subLayers: {\n    PointLayer: ScatterplotLayer,\n    LineLayer: PathLayer,\n    PolygonLayer: SolidPolygonLayer\n  },\n\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\nconst getCoordinates = f => f.geometry.coordinates;\n\nexport default class GeoJsonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      features: {}\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    if (changeFlags.dataChanged) {\n      const {data} = props;\n      const features = getGeojsonFeatures(data);\n      this.state.features = separateGeojsonFeatures(features);\n    }\n  }\n\n  getPickingInfo({info}) {\n    return Object.assign(info, {\n      // override object with picked feature\n      object: (info.object && info.object.feature) || info.object\n    });\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    const {features} = this.state;\n    const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = features;\n\n    // Layer composition props\n    const {stroked, filled, extruded, wireframe, subLayers, lightSettings} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      pointRadiusScale,\n      pointRadiusMinPixels,\n      pointRadiusMaxPixels,\n      elevationScale,\n      fp64\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getLineColor,\n      getFillColor,\n      getRadius,\n      getLineWidth,\n      getElevation,\n      updateTriggers\n    } = this.props;\n\n    const drawPoints = pointFeatures && pointFeatures.length > 0;\n    const drawLines = lineFeatures && lineFeatures.length > 0;\n    const hasPolygonLines = polygonOutlineFeatures && polygonOutlineFeatures.length > 0;\n    const hasPolygon = polygonFeatures && polygonFeatures.length > 0;\n\n    // Filled Polygon Layer\n    const polygonFillLayer =\n      hasPolygon &&\n      new subLayers.PolygonLayer(\n        this.getSubLayerProps({\n          id: 'polygon-fill',\n          updateTriggers: {\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data: polygonFeatures,\n          fp64,\n          extruded,\n          elevationScale,\n          filled,\n          wireframe,\n          lightSettings,\n          getPolygon: getCoordinates,\n          getElevation,\n          getFillColor,\n          getLineColor\n        }\n      );\n\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      hasPolygonLines &&\n      new subLayers.LineLayer(\n        this.getSubLayerProps({\n          id: 'polygon-outline',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth\n          }\n        }),\n        {\n          data: polygonOutlineFeatures,\n\n          fp64,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n\n          getPath: getCoordinates,\n          getColor: getLineColor,\n          getWidth: getLineWidth\n        }\n      );\n\n    const pathLayer =\n      drawLines &&\n      new subLayers.LineLayer(\n        this.getSubLayerProps({\n          id: 'line-paths',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth\n          }\n        }),\n        {\n          data: lineFeatures,\n\n          fp64,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n\n          getPath: getCoordinates,\n          getColor: getLineColor,\n          getWidth: getLineWidth\n        }\n      );\n\n    const pointLayer =\n      drawPoints &&\n      new subLayers.PointLayer(\n        this.getSubLayerProps({\n          id: 'points',\n          updateTriggers: {\n            getColor: updateTriggers.getFillColor,\n            getRadius: updateTriggers.getRadius\n          }\n        }),\n        {\n          data: pointFeatures,\n\n          fp64,\n          radiusScale: pointRadiusScale,\n          radiusMinPixels: pointRadiusMinPixels,\n          radiusMaxPixels: pointRadiusMaxPixels,\n\n          getPosition: getCoordinates,\n          getColor: getFillColor,\n          getRadius\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      polygonLineLayer,\n      pathLayer,\n      pointLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;\n"],"file":"geojson-layer.js"}