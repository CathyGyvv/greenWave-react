{"version":3,"sources":["../../../src/screen-grid-layer/screen-grid-layer.js"],"names":["Layer","experimental","defaultColorRange","quantizeScale","GL","Model","Geometry","lerp","vs","fs","DEFAULT_MINCOLOR","DEFAULT_MAXCOLOR","defaultProps","cellSizePixels","colorDomain","colorRange","getPosition","d","position","getWeight","ScreenGridLayer","getShaders","modules","initializeState","attributeManager","getAttributeManager","gl","context","addInstanced","instancePositions","size","update","calculateInstancePositions","instanceColors","type","UNSIGNED_BYTE","transition","accessor","calculateInstanceColors","setState","model","_getModel","shouldUpdateState","changeFlags","somethingChanged","updateState","oldProps","props","cellSizeChanged","viewportChanged","updateCell","draw","uniforms","parameters","state","cellScale","Object","assign","depthTest","depthMask","id","geometry","drawMode","TRIANGLE_FAN","attributes","vertices","Float32Array","isInstanced","shaderCache","viewport","width","height","MARGIN","numCol","Math","ceil","numRow","numInstances","invalidateAll","attribute","value","i","x","y","floor","data","weights","Array","maxCount","fill","point","pixel","project","colId","rowId","color","_getColor","index","weight","minColor","maxColor","_shouldUseMinMax","step","Number","isFinite","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, experimental} from '@deck.gl/core';\nconst {defaultColorRange, quantizeScale} = experimental;\n\nimport {GL, Model, Geometry} from 'luma.gl';\nimport {lerp} from 'math.gl';\nimport vs from './screen-grid-layer-vertex.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\nconst DEFAULT_MINCOLOR = [0, 0, 0, 255];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\n\nconst defaultProps = {\n  cellSizePixels: 100,\n\n  colorDomain: null,\n  colorRange: defaultColorRange,\n\n  getPosition: d => d.position,\n  getWeight: d => 1\n};\n\nexport default class ScreenGridLayer extends Layer {\n  getShaders() {\n    return {vs, fs, modules: ['picking']}; // 'project' module added by default.\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    const {gl} = this.context;\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {size: 3, update: this.calculateInstancePositions},\n      instanceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: ['getPosition', 'getWeight'],\n        update: this.calculateInstanceColors\n      }\n    });\n    /* eslint-disable max-len */\n\n    this.setState({model: this._getModel(gl)});\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    const cellSizeChanged = props.cellSizePixels !== oldProps.cellSizePixels;\n\n    if (cellSizeChanged || changeFlags.viewportChanged) {\n      this.updateCell();\n    }\n  }\n\n  draw({uniforms}) {\n    const {parameters = {}} = this.props;\n    const {model, cellScale} = this.state;\n    uniforms = Object.assign({}, uniforms, {cellScale});\n    model.draw({\n      uniforms,\n      parameters: Object.assign(\n        {\n          depthTest: false,\n          depthMask: false\n        },\n        parameters\n      )\n    });\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            vertices: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  updateCell() {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n\n    const MARGIN = 2;\n    const cellScale = new Float32Array([\n      (cellSizePixels - MARGIN) / width * 2,\n      -(cellSizePixels - MARGIN) / height * 2,\n      1\n    ]);\n    const numCol = Math.ceil(width / cellSizePixels);\n    const numRow = Math.ceil(height / cellSizePixels);\n\n    this.setState({\n      cellScale,\n      numCol,\n      numRow,\n      numInstances: numCol * numRow\n    });\n\n    const attributeManager = this.getAttributeManager();\n    attributeManager.invalidateAll();\n  }\n\n  calculateInstancePositions(attribute, {numInstances}) {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const {numCol} = this.state;\n    const {value, size} = attribute;\n\n    for (let i = 0; i < numInstances; i++) {\n      const x = i % numCol;\n      const y = Math.floor(i / numCol);\n      value[i * size + 0] = x * cellSizePixels / width * 2 - 1;\n      value[i * size + 1] = 1 - y * cellSizePixels / height * 2;\n      value[i * size + 2] = 0;\n    }\n  }\n\n  calculateInstanceColors(attribute) {\n    const {data, cellSizePixels, getPosition, getWeight} = this.props;\n    const {numCol, numRow, numInstances} = this.state;\n    const {value, size} = attribute;\n    const weights = new Array(numInstances);\n    let maxCount = 0;\n\n    weights.fill(0.0);\n\n    // aggregate weights\n    for (const point of data) {\n      const pixel = this.project(getPosition(point));\n      const colId = Math.floor(pixel[0] / cellSizePixels);\n      const rowId = Math.floor(pixel[1] / cellSizePixels);\n      if (colId >= 0 && colId < numCol && rowId >= 0 && rowId < numRow) {\n        const i = colId + rowId * numCol;\n        weights[i] += getWeight(point);\n        if (weights[i] > maxCount) {\n          maxCount = weights[i];\n        }\n      }\n    }\n    this.setState({maxCount});\n\n    // Convert weights to colors.\n    for (let i = 0; i < numInstances; i++) {\n      const color = this._getColor(weights[i], maxCount);\n      const index = i * size;\n      value[index + 0] = color[0];\n      value[index + 1] = color[1];\n      value[index + 2] = color[2];\n      value[index + 3] = color[3];\n    }\n  }\n\n  _getColor(weight, maxCount) {\n    let color;\n    const {minColor, maxColor, colorRange} = this.props;\n    if (this._shouldUseMinMax()) {\n      const step = weight / maxCount;\n      // We are supporting optional props as deprecated, set default value if not provided\n      color = lerp(minColor || DEFAULT_MINCOLOR, maxColor || DEFAULT_MAXCOLOR, step);\n      return color;\n    }\n    // if colorDomain not set , use default domain [1, maxCount]\n    const colorDomain = this.props.colorDomain || [1, maxCount];\n    if (weight < colorDomain[0] || weight > colorDomain[1]) {\n      // wight outside the domain, set color alpha to 0.\n      return [0, 0, 0, 0];\n    }\n    color = quantizeScale(colorDomain, colorRange, weight);\n    // add alpha to color if not defined in colorRange\n    color[3] = Number.isFinite(color[3]) ? color[3] : 255;\n    return color;\n  }\n\n  _shouldUseMinMax() {\n    const {minColor, maxColor, colorDomain, colorRange} = this.props;\n    if (minColor || maxColor) {\n      return true;\n    }\n    // minColor and maxColor not supplied, check if colorRange or colorDomain supplied.\n    // NOTE: colorDomain and colorRange are experimental features, use them only when supplied.\n    if (colorDomain || colorRange) {\n      return false;\n    }\n    // None specified, use default minColor and maxColor\n    return true;\n  }\n}\n\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;\n"],"file":"screen-grid-layer.js"}