{"version":3,"sources":["../../../src/hexagon-layer/hexagon-aggregator.js"],"names":["hexbin","pointToHexbin","viewport","data","radius","getPosition","radiusInPixel","getRadiusInPixel","screenPoints","map","Object","assign","screenCoord","projectFlat","pt","newHexbin","x","d","y","hexagonBins","hexagons","hex","index","centroid","unprojectFlat","points","getDistanceScales","pixelsPerMeter"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,MAAR,QAAqB,WAArB;AAEA;;;;;;;;;;AASA,OAAO,SAASC,aAAT,OAAoDC,QAApD,EAA8D;AAAA,MAAtCC,IAAsC,QAAtCA,IAAsC;AAAA,MAAhCC,MAAgC,QAAhCA,MAAgC;AAAA,MAAxBC,WAAwB,QAAxBA,WAAwB;AACnE;AACA,MAAMC,gBAAgBC,iBAAiBH,MAAjB,EAAyBF,QAAzB,CAAtB,CAFmE,CAInE;;AACA,MAAMM,eAAeL,KAAKM,GAAL,CAAS;AAAA,WAC5BC,OAAOC,MAAP,CACE;AACEC,mBAAaV,SAASW,WAAT,CAAqBR,YAAYS,EAAZ,CAArB;AADf,KADF,EAIEA,EAJF,CAD4B;AAAA,GAAT,CAArB;AASA,MAAMC,YAAYf,SACfI,MADe,CACRE,aADQ,EAEfU,CAFe,CAEb;AAAA,WAAKC,EAAEL,WAAF,CAAc,CAAd,CAAL;AAAA,GAFa,EAGfM,CAHe,CAGb;AAAA,WAAKD,EAAEL,WAAF,CAAc,CAAd,CAAL;AAAA,GAHa,CAAlB;AAKA,MAAMO,cAAcJ,UAAUP,YAAV,CAApB;AAEA,SAAO;AACLY,cAAUD,YAAYV,GAAZ,CAAgB,UAACY,GAAD,EAAMC,KAAN;AAAA,aAAiB;AACzCC,kBAAUrB,SAASsB,aAAT,CAAuB,CAACH,IAAIL,CAAL,EAAQK,IAAIH,CAAZ,CAAvB,CAD+B;AAEzCO,gBAAQJ,GAFiC;AAGzCC;AAHyC,OAAjB;AAAA,KAAhB;AADL,GAAP;AAOD;AAED;;;;;;;;AAOA,OAAO,SAASf,gBAAT,CAA0BH,MAA1B,EAAkCF,QAAlC,EAA4C;AAAA,8BACxBA,SAASwB,iBAAT,EADwB;AAAA,MAC1CC,cAD0C,yBAC1CA,cAD0C,EAGjD;;;AACA,SAAOvB,SAASuB,eAAe,CAAf,CAAhB;AACD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {hexbin} from 'd3-hexbin';\n\n/**\n * Use d3-hexbin to performs hexagonal binning from geo points to hexagons\n * @param {Array} data - array of points\n * @param {Number} radius - hexagon radius in meter\n * @param {function} getPosition - get points lon lat\n * @param {Object} viewport - current viewport object\n\n * @return {Object} - hexagons and countRange\n */\nexport function pointToHexbin({data, radius, getPosition}, viewport) {\n  // get hexagon radius in mercator world unit\n  const radiusInPixel = getRadiusInPixel(radius, viewport);\n\n  // add world space coordinates to points\n  const screenPoints = data.map(pt =>\n    Object.assign(\n      {\n        screenCoord: viewport.projectFlat(getPosition(pt))\n      },\n      pt\n    )\n  );\n\n  const newHexbin = hexbin()\n    .radius(radiusInPixel)\n    .x(d => d.screenCoord[0])\n    .y(d => d.screenCoord[1]);\n\n  const hexagonBins = newHexbin(screenPoints);\n\n  return {\n    hexagons: hexagonBins.map((hex, index) => ({\n      centroid: viewport.unprojectFlat([hex.x, hex.y]),\n      points: hex,\n      index\n    }))\n  };\n}\n\n/**\n * Get radius in mercator world space coordinates from meter\n * @param {Number} radius - in meter\n * @param {Object} viewport - current viewport object\n\n * @return {Number} radius in mercator world spcae coordinates\n */\nexport function getRadiusInPixel(radius, viewport) {\n  const {pixelsPerMeter} = viewport.getDistanceScales();\n\n  // x, y distance should be the same\n  return radius * pixelsPerMeter[0];\n}\n"],"file":"hexagon-aggregator.js"}