{"version":3,"sources":["../../../src/geojson-layer/geojson.js"],"names":["assert","condition","message","Error","getGeojsonFeatures","geojson","Array","isArray","type","geometries","map","geometry","features","separateGeojsonFeatures","pointFeatures","lineFeatures","polygonFeatures","polygonOutlineFeatures","forEach","feature","coordinates","properties","checkCoordinates","push","point","path","polygon","COORDINATE_NEST_LEVEL","Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","nestLevel","Number","isFinite"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Replacement for the external assert method to reduce bundle size\n// Since GeoJSON format issues are common to users we do show messages in\n// this case\nexport default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(`deck.gl: ${message}`);\n  }\n}\n\n/**\n * \"Normalizes\" complete or partial GeoJSON data into iterable list of features\n * Can accept GeoJSON geometry or \"Feature\", \"FeatureCollection\" in addition\n * to plain arrays and iterables.\n * Works by extracting the feature array or wrapping single objects in an array,\n * so that subsequent code can simply iterate over features.\n *\n * @param {object} geojson - geojson data\n * @param {Object|Array} data - geojson object (FeatureCollection, Feature or\n *  Geometry) or array of features\n * @return {Array|\"iteratable\"} - iterable list of features\n */\nexport function getGeojsonFeatures(geojson) {\n  // If array, assume this is a list of features\n  if (Array.isArray(geojson)) {\n    return geojson;\n  }\n\n  assert(geojson.type, 'GeoJSON does not have type');\n\n  switch (geojson.type) {\n    case 'GeometryCollection':\n      assert(Array.isArray(geojson.geometries), 'GeoJSON does not have geometries array');\n      return geojson.geometries.map(geometry => ({geometry}));\n    case 'Feature':\n      // Wrap the feature in a 'Features' array\n      return [geojson];\n    case 'FeatureCollection':\n      // Just return the 'Features' array from the collection\n      assert(Array.isArray(geojson.features), 'GeoJSON does not have features array');\n      return geojson.features;\n    default:\n      // Assume it's a geometry, we'll check type in separateGeojsonFeatures\n      // Wrap the geometry object in a 'Feature' object and wrap in an array\n      return [{geometry: geojson}];\n  }\n}\n\n// Linearize\nexport function separateGeojsonFeatures(features) {\n  const pointFeatures = [];\n  const lineFeatures = [];\n  const polygonFeatures = [];\n  const polygonOutlineFeatures = [];\n\n  features.forEach(feature => {\n    assert(feature && feature.geometry, 'GeoJSON does not have geometry');\n\n    const {\n      geometry: {type, coordinates},\n      properties\n    } = feature;\n    checkCoordinates(type, coordinates);\n\n    switch (type) {\n      case 'Point':\n        pointFeatures.push(feature);\n        break;\n      case 'MultiPoint':\n        // TODO - split multipoints\n        coordinates.forEach(point => {\n          pointFeatures.push({geometry: {coordinates: point}, properties, feature});\n        });\n        break;\n      case 'LineString':\n        lineFeatures.push(feature);\n        break;\n      case 'MultiLineString':\n        // Break multilinestrings into multiple lines with same properties\n        coordinates.forEach(path => {\n          lineFeatures.push({geometry: {coordinates: path}, properties, feature});\n        });\n        break;\n      case 'Polygon':\n        polygonFeatures.push(feature);\n        // Break polygon into multiple lines with same properties\n        coordinates.forEach(path => {\n          polygonOutlineFeatures.push({geometry: {coordinates: path}, properties, feature});\n        });\n        break;\n      case 'MultiPolygon':\n        // Break multipolygons into multiple polygons with same properties\n        coordinates.forEach(polygon => {\n          polygonFeatures.push({geometry: {coordinates: polygon}, properties, feature});\n          // Break polygon into multiple lines with same properties\n          polygon.forEach(path => {\n            polygonOutlineFeatures.push({geometry: {coordinates: path}, properties, feature});\n          });\n        });\n        break;\n      default:\n    }\n  });\n\n  return {\n    pointFeatures,\n    lineFeatures,\n    polygonFeatures,\n    polygonOutlineFeatures\n  };\n}\n\n/**\n * Simple GeoJSON validation util. For perf reasons we do not validate against the full spec,\n * only the following:\n   - geometry.type is supported\n   - geometry.coordinate has correct nesting level\n */\nconst COORDINATE_NEST_LEVEL = {\n  Point: 1,\n  MultiPoint: 2,\n  LineString: 2,\n  MultiLineString: 3,\n  Polygon: 3,\n  MultiPolygon: 4\n};\n\nfunction checkCoordinates(type, coordinates) {\n  let nestLevel = COORDINATE_NEST_LEVEL[type];\n\n  assert(nestLevel, `Unknown GeoJSON type ${type}`);\n\n  while (coordinates && --nestLevel > 0) {\n    coordinates = coordinates[0];\n  }\n  assert(coordinates && Number.isFinite(coordinates[0]), `${type} coordinates are malformed`);\n}\n"],"file":"geojson.js"}