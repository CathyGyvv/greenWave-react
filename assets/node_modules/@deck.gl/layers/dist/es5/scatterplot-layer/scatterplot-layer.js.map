{"version":3,"sources":["../../../src/scatterplot-layer/scatterplot-layer.js"],"names":["fp64LowPart","fp64","DEFAULT_COLOR","defaultProps","radiusScale","radiusMinPixels","radiusMaxPixels","Number","MAX_SAFE_INTEGER","strokeWidth","outline","getPosition","x","position","getRadius","radius","getColor","color","ScatterplotLayer","id","projectModule","is64bitEnabled","vs","fs","modules","state","attributeManager","addInstanced","instancePositions","size","transition","accessor","instancePositions64xyLow","update","calculateInstancePositions64xyLow","instanceRadius","defaultValue","instanceColors","type","GL","UNSIGNED_BYTE","props","oldProps","changeFlags","gl","context","model","delete","setState","_getModel","invalidateAll","uniforms","render","Object","assign","positions","Model","getShaders","geometry","Geometry","drawMode","TRIANGLE_FAN","attributes","Float32Array","isInstanced","shaderCache","attribute","isFP64","isGeneric","value","data","i","point","Layer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport {GL, Model, Geometry, fp64} from 'luma.gl';\nconst {fp64LowPart} = fp64;\n\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  radiusScale: 1,\n  radiusMinPixels: 0, //  min point radius in pixels\n  radiusMaxPixels: Number.MAX_SAFE_INTEGER, // max point radius in pixels\n  strokeWidth: 1,\n  outline: false,\n  fp64: false,\n\n  getPosition: x => x.position,\n  getRadius: x => x.radius || 1,\n  getColor: x => x.color || DEFAULT_COLOR\n};\n\nexport default class ScatterplotLayer extends Layer {\n  getShaders(id) {\n    const projectModule = this.is64bitEnabled() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'picking']};\n  }\n\n  initializeState() {\n    this.state.attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instancePositions64xyLow: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: 4,\n        transition: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.state.attributeManager.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {radiusScale, radiusMinPixels, radiusMaxPixels, outline, strokeWidth} = this.props;\n    this.state.model.render(\n      Object.assign({}, uniforms, {\n        outline: outline ? 1 : 0,\n        strokeWidth,\n        radiusScale,\n        radiusMinPixels,\n        radiusMaxPixels\n      })\n    );\n  }\n\n  _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [-1, -1, 0, -1, 1, 0, 1, 1, 0, 1, -1, 0];\n\n    return new Model(\n      gl,\n      Object.assign(this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = this.is64bitEnabled();\n    attribute.isGeneric = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n\n  /*\n  calculateInstancePositions(attribute) {\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i++] = position[0];\n      value[i++] = position[1];\n      value[i++] = position[2] || 0;\n    }\n  }\n\n  calculateInstanceRadius(attribute) {\n    const {data, getRadius} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const radius = getRadius(point);\n      value[i++] = isNaN(radius) ? 1 : radius;\n    }\n  }\n\n  calculateInstanceColors(attribute) {\n    const {data, getColor} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const color = getColor(point) || DEFAULT_COLOR;\n      value[i++] = color[0];\n      value[i++] = color[1];\n      value[i++] = color[2];\n      value[i++] = isNaN(color[3]) ? 255 : color[3];\n    }\n  }\n  */\n}\n\nScatterplotLayer.layerName = 'ScatterplotLayer';\nScatterplotLayer.defaultProps = defaultProps;\n"],"file":"scatterplot-layer.js"}