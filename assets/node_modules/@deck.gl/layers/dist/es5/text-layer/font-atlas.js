"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeFontAtlas = makeFontAtlas;
exports.DEFAULT_CHAR_SET = void 0;

var _luma = require("luma.gl");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var GL_TEXTURE_WRAP_S = 0x2802;
var GL_TEXTURE_WRAP_T = 0x2803;
var GL_CLAMP_TO_EDGE = 0x812f;
var MAX_CANVAS_WIDTH = 1024;
var DEFAULT_FONT_SIZE = 64;
var DEFAULT_PADDING = 4;
var DEFAULT_CHAR_SET = [];
exports.DEFAULT_CHAR_SET = DEFAULT_CHAR_SET;

for (var i = 32; i < 128; i++) {
  DEFAULT_CHAR_SET.push(String.fromCharCode(i));
}

function setTextStyle(ctx, fontFamily, fontSize, useAdvancedMetrics) {
  ctx.font = "".concat(fontSize, "px ").concat(fontFamily);
  ctx.fillStyle = '#000';
  ctx.textBaseline = useAdvancedMetrics ? 'top' : 'hanging';
  ctx.textAlign = 'left';
}

function makeFontAtlas(gl, _ref) {
  var _parameters;

  var fontFamily = _ref.fontFamily,
      _ref$characterSet = _ref.characterSet,
      characterSet = _ref$characterSet === void 0 ? DEFAULT_CHAR_SET : _ref$characterSet,
      _ref$fontSize = _ref.fontSize,
      fontSize = _ref$fontSize === void 0 ? DEFAULT_FONT_SIZE : _ref$fontSize,
      _ref$padding = _ref.padding,
      padding = _ref$padding === void 0 ? DEFAULT_PADDING : _ref$padding;
  var canvas = document.createElement('canvas');
  var ctx = canvas.getContext('2d');
  setTextStyle(ctx, fontFamily, fontSize, true); // measure texts

  var row = 0;
  var x = 0; // Get a sample of text metrics
  // Advanced text metrics are only implemented in Chrome:
  // https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics

  var _ctx$measureText = ctx.measureText(characterSet[0]),
      fontBoundingBoxDescent = _ctx$measureText.fontBoundingBoxDescent; // Fallback to height=fontSize


  var fontHeight = fontBoundingBoxDescent || fontSize;
  var useAdvancedMetrics = Boolean(fontBoundingBoxDescent);
  var mapping = {};
  Array.from(characterSet).forEach(function (char) {
    var _ctx$measureText2 = ctx.measureText(char),
        width = _ctx$measureText2.width;

    if (x + width > MAX_CANVAS_WIDTH) {
      x = 0;
      row++;
    }

    mapping[char] = {
      x: x,
      y: row * (fontHeight + padding),
      width: width,
      height: fontHeight,
      mask: true
    };
    x += width + padding;
  });
  canvas.width = MAX_CANVAS_WIDTH;
  canvas.height = (row + 1) * (fontHeight + padding);
  setTextStyle(ctx, fontFamily, fontSize, useAdvancedMetrics);

  for (var char in mapping) {
    ctx.fillText(char, mapping[char].x, mapping[char].y);
  }

  return {
    scale: fontHeight / fontSize,
    mapping: mapping,
    texture: new _luma.Texture2D(gl, {
      pixels: canvas,
      // padding is added only between the characters but not for borders
      // enforce CLAMP_TO_EDGE to avoid any artifacts.
      parameters: (_parameters = {}, _defineProperty(_parameters, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE), _defineProperty(_parameters, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE), _parameters)
    })
  };
}
//# sourceMappingURL=font-atlas.js.map