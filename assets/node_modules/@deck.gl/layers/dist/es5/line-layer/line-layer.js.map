{"version":3,"sources":["../../../src/line-layer/line-layer.js"],"names":["fp64LowPart","fp64","DEFAULT_COLOR","defaultProps","getSourcePosition","x","sourcePosition","getTargetPosition","targetPosition","getColor","color","getStrokeWidth","LineLayer","props","overrideProps","Number","isFinite","strokeWidth","log","deprecated","projectModule","is64bitEnabled","vs","fs","modules","attributeManager","getAttributeManager","addInstanced","instanceSourcePositions","size","transition","accessor","instanceTargetPositions","instanceSourceTargetPositions64xyLow","update","calculateInstanceSourceTargetPositions64xyLow","instanceColors","type","GL","UNSIGNED_BYTE","defaultValue","instanceWidths","oldProps","changeFlags","gl","context","state","model","delete","setState","_getModel","invalidateAll","positions","Model","Object","assign","getShaders","id","geometry","Geometry","drawMode","TRIANGLE_STRIP","attributes","Float32Array","isInstanced","shaderCache","attribute","isFP64","isGeneric","value","data","i","object","Layer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, log} from '@deck.gl/core';\nimport {GL, Model, Geometry, fp64} from 'luma.gl';\nconst {fp64LowPart} = fp64;\n\nimport vs from './line-layer-vertex.glsl';\nimport fs from './line-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  fp64: false,\n\n  getSourcePosition: x => x.sourcePosition,\n  getTargetPosition: x => x.targetPosition,\n  getColor: x => x.color || DEFAULT_COLOR,\n  getStrokeWidth: 1\n};\n\nexport default class LineLayer extends Layer {\n  constructor(props) {\n    let overrideProps = null;\n    if (Number.isFinite(props.strokeWidth)) {\n      log.deprecated('LineLayer: `strokeWidth`', '`getStrokeWidth`');\n      overrideProps = {\n        getStrokeWidth: props.strokeWidth\n      };\n    }\n    super(props, overrideProps);\n  }\n\n  getShaders() {\n    const projectModule = this.is64bitEnabled() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'picking']};\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceSourceTargetPositions64xyLow: {\n        size: 4,\n        accessor: ['getSourcePosition', 'getTargetPosition'],\n        update: this.calculateInstanceSourceTargetPositions64xyLow\n      },\n      instanceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getStrokeWidth',\n        defaultValue: 1\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.state.attributeManager.invalidateAll();\n    }\n  }\n\n  _getModel(gl) {\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    const positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_STRIP,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  calculateInstanceSourceTargetPositions64xyLow(attribute) {\n    const isFP64 = this.is64bitEnabled();\n    attribute.isGeneric = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(4);\n      return;\n    }\n\n    const {data, getSourcePosition, getTargetPosition} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const sourcePosition = getSourcePosition(object);\n      const targetPosition = getTargetPosition(object);\n      value[i + 0] = fp64LowPart(sourcePosition[0]);\n      value[i + 1] = fp64LowPart(sourcePosition[1]);\n      value[i + 2] = fp64LowPart(targetPosition[0]);\n      value[i + 3] = fp64LowPart(targetPosition[1]);\n      i += size;\n    }\n  }\n\n  /*\n  calculateInstanceSourcePositions(attribute) {\n    const {data, getSourcePosition} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const sourcePosition = getSourcePosition(object);\n      value[i + 0] = sourcePosition[0];\n      value[i + 1] = sourcePosition[1];\n      value[i + 2] = isNaN(sourcePosition[2]) ? 0 : sourcePosition[2];\n      i += size;\n    }\n  }\n\n  calculateInstanceTargetPositions(attribute) {\n    const {data, getTargetPosition} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const targetPosition = getTargetPosition(object);\n      value[i + 0] = targetPosition[0];\n      value[i + 1] = targetPosition[1];\n      value[i + 2] = isNaN(targetPosition[2]) ? 0 : targetPosition[2];\n      i += size;\n    }\n  }\n\n  calculateInstanceColors(attribute) {\n    const {data, getColor} = this.props;\n    const {value, size} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const color = getColor(object);\n      value[i + 0] = color[0];\n      value[i + 1] = color[1];\n      value[i + 2] = color[2];\n      value[i + 3] = isNaN(color[3]) ? 255 : color[3];\n      i += size;\n    }\n  }\n  */\n}\n\nLineLayer.layerName = 'LineLayer';\nLineLayer.defaultProps = defaultProps;\n"],"file":"line-layer.js"}