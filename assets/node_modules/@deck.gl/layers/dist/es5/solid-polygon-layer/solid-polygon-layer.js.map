{"version":3,"sources":["../../../src/solid-polygon-layer/solid-polygon-layer.js"],"names":["defaultLineColor","defaultFillColor","defaultProps","filled","extruded","wireframe","fp64","elevationScale","getPolygon","f","polygon","getElevation","elevation","getFillColor","fillColor","getLineColor","lineColor","lightSettings","SIDE_FILL_POSITIONS","Float32Array","SIDE_WIRE_POSITIONS","ATTRIBUTE_OVERRIDES","TOP","SIDE","instanced","WIRE","ATTRIBUTE_MAPS","indices","positions","positions64xyLow","elevations","colors","pickingColors","nextPositions","nextPositions64xyLow","SolidPolygonLayer","projectModule","is64bitEnabled","vs","fs","modules","gl","context","setState","numInstances","IndexType","FEATURES","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","add","size","isIndexed","update","calculateIndices","accessor","calculatePositions","calculatePositionsLow","calculateNextPositions","calculateNextPositionsLow","calculateElevations","fillColors","alias","type","GL","UNSIGNED_BYTE","calculateFillColors","defaultValue","lineColors","calculateLineColors","calculatePickingColors","uniforms","props","renderUniforms","Object","assign","state","models","forEach","model","render","updateParams","updateGeometry","oldProps","regenerateModels","delete","modelsChanged","_getModels","invalidate","changeFlags","geometryConfigChanged","dataChanged","updateTriggersChanged","all","polygons","data","map","polygonTesselator","_getPolygonTesselator","invalidateAll","updatePositions","buffers","ignoreUnknownAttributes","_updateAttributes","getAttributes","changedAttributes","getChangedAttributes","clearChangedFlags","PolygonTesselator","attributes","modelsByName","modelName","setVertexCount","numVertex","setInstanceCount","attributeMap","attributeOverride","newAttributes","attributeName","attribute","buffer","getBuffer","setAttributes","id","Model","getShaders","geometry","Geometry","drawMode","TRIANGLES","vertexPositions","isGeneric","value","isSideVertex","vertexCount","shaderCache","TRIANGLE_STRIP","isInstanced","LINE_STRIP","filter","Boolean","length","isFP64","polygonIndex","key","getColor","Layer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport {GL, Model, Geometry, hasFeature, FEATURES} from 'luma.gl';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport {PolygonTesselator} from './polygon-tesselator';\n\nimport vs from './solid-polygon-layer-vertex.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nconst defaultLineColor = [0x0, 0x0, 0x0, 0xff];\nconst defaultFillColor = [0x0, 0x0, 0x0, 0xff];\n\nconst defaultProps = {\n  filled: true,\n  // Whether to extrude\n  extruded: false,\n  // Whether to draw a GL.LINES wireframe of the polygon\n  wireframe: false,\n  fp64: false,\n\n  // elevation multiplier\n  elevationScale: 1,\n\n  // Accessor for polygon geometry\n  getPolygon: f => f.polygon,\n  // Accessor for extrusion height\n  getElevation: f => f.elevation || 0,\n  // Accessor for colors\n  getFillColor: f => f.fillColor || defaultFillColor,\n  getLineColor: f => f.lineColor || defaultLineColor,\n\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\n// Side model attributes\nconst SIDE_FILL_POSITIONS = new Float32Array([\n  // top left corner\n  0,\n  1,\n  // bottom left corner\n  0,\n  0,\n  // top right corner\n  1,\n  1,\n  // bottom right corner\n  1,\n  0\n]);\nconst SIDE_WIRE_POSITIONS = new Float32Array([\n  // top right corner\n  1,\n  1,\n  // top left corner\n  0,\n  1,\n  // bottom left corner\n  0,\n  0,\n  // bottom right corner\n  1,\n  0\n]);\n\n// Model types\nconst ATTRIBUTE_OVERRIDES = {\n  TOP: null,\n  SIDE: {instanced: 1},\n  WIRE: {instanced: 1}\n};\n\nconst ATTRIBUTE_MAPS = {\n  TOP: {\n    indices: 'indices',\n    positions: 'positions',\n    positions64xyLow: 'positions64xyLow',\n    elevations: 'elevations',\n    colors: 'fillColors',\n    pickingColors: 'pickingColors'\n  },\n  SIDE: {\n    positions: 'positions',\n    positions64xyLow: 'positions64xyLow',\n    nextPositions: 'nextPositions',\n    nextPositions64xyLow: 'nextPositions64xyLow',\n    elevations: 'elevations',\n    colors: 'fillColors',\n    pickingColors: 'pickingColors'\n  },\n  WIRE: {\n    positions: 'positions',\n    positions64xyLow: 'positions64xyLow',\n    nextPositions: 'nextPositions',\n    nextPositions64xyLow: 'nextPositions64xyLow',\n    elevations: 'elevations',\n    colors: 'lineColors',\n    pickingColors: 'pickingColors'\n  }\n};\n\nexport default class SolidPolygonLayer extends Layer {\n  getShaders() {\n    const projectModule = this.is64bitEnabled() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    this.setState({\n      numInstances: 0,\n      IndexType: hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n    });\n\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {size: 1, isIndexed: true, update: this.calculateIndices, noAlloc},\n      positions: {\n        size: 3,\n        accessor: ['extruded', 'fp64'],\n        update: this.calculatePositions,\n        noAlloc\n      },\n      positions64xyLow: {size: 2, accessor: 'fp64', update: this.calculatePositionsLow},\n      nextPositions: {\n        size: 3,\n        accessor: ['extruded', 'fp64'],\n        update: this.calculateNextPositions,\n        noAlloc\n      },\n      nextPositions64xyLow: {size: 2, accessor: 'fp64', update: this.calculateNextPositionsLow},\n      elevations: {\n        size: 1,\n        accessor: ['extruded', 'getElevation'],\n        update: this.calculateElevations,\n        noAlloc\n      },\n      fillColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        update: this.calculateFillColors,\n        defaultValue: defaultFillColor,\n        noAlloc\n      },\n      lineColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        update: this.calculateLineColors,\n        defaultValue: defaultLineColor,\n        noAlloc\n      },\n      pickingColors: {size: 3, type: GL.UNSIGNED_BYTE, update: this.calculatePickingColors, noAlloc}\n    });\n    /* eslint-enable max-len */\n  }\n\n  draw({uniforms}) {\n    const {extruded, elevationScale} = this.props;\n\n    const renderUniforms = Object.assign({}, uniforms, {\n      extruded: extruded ? 1.0 : 0.0,\n      elevationScale\n    });\n\n    this.state.models.forEach(model => {\n      model.render(renderUniforms);\n    });\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps} = updateParams;\n\n    const regenerateModels =\n      props.fp64 !== oldProps.fp64 ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded ||\n      props.wireframe !== oldProps.wireframe;\n\n    if (regenerateModels) {\n      if (this.state.models) {\n        this.state.models.forEach(model => model.delete());\n      }\n\n      this.setState(\n        Object.assign(\n          {\n            // Set a flag to set attributes to new models\n            modelsChanged: true\n          },\n          this._getModels(this.context.gl)\n        )\n      );\n    }\n\n    if (props.extruded !== oldProps.extruded) {\n      this.state.attributeManager.invalidate('extruded');\n    }\n    if (props.fp64 !== oldProps.fp64) {\n      this.state.attributeManager.invalidate('fp64');\n    }\n  }\n\n  updateGeometry({props, oldProps, changeFlags}) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      // TODO - avoid creating a temporary array here: let the tesselator iterate\n      const polygons = props.data.map(props.getPolygon);\n\n      this.setState({\n        polygonTesselator: this._getPolygonTesselator(polygons, this.state.IndexType)\n      });\n\n      this.state.attributeManager.invalidateAll();\n    }\n\n    if (\n      geometryConfigChanged ||\n      props.extruded !== oldProps.extruded ||\n      props.fp64 !== oldProps.fp64\n    ) {\n      this.state.polygonTesselator.updatePositions({\n        fp64: props.fp64,\n        extruded: props.extruded\n      });\n    }\n  }\n\n  updateAttributes(props) {\n    const {attributeManager, modelsChanged} = this.state;\n\n    // Figure out data length\n    attributeManager.update({\n      data: props.data,\n      numInstances: 0,\n      props,\n      buffers: props,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    if (modelsChanged) {\n      this._updateAttributes(attributeManager.getAttributes());\n      // clear the flag\n      this.setState({modelsChanged: false});\n    } else {\n      const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n      this._updateAttributes(changedAttributes);\n    }\n  }\n\n  // \"Experimental\" method indended to make it easier to support non-nested arrays in subclasses\n  _getPolygonTesselator(polygons, IndexType) {\n    return new PolygonTesselator({polygons, IndexType: this.state.IndexType});\n  }\n\n  _updateAttributes(attributes) {\n    const {modelsByName} = this.state;\n\n    for (const modelName in modelsByName) {\n      const model = modelsByName[modelName];\n\n      if (modelName === 'TOP') {\n        model.setVertexCount(this.state.numVertex);\n      } else {\n        model.setInstanceCount(this.state.numInstances);\n      }\n\n      const attributeMap = ATTRIBUTE_MAPS[modelName];\n      const attributeOverride = ATTRIBUTE_OVERRIDES[modelName];\n      const newAttributes = {};\n      for (const attributeName in attributeMap) {\n        const attribute = attributes[attributeMap[attributeName]];\n\n        if (attribute) {\n          newAttributes[attributeName] = attributeOverride\n            ? Object.assign({}, attribute, attributeOverride, {buffer: attribute.getBuffer()})\n            : attribute;\n        }\n      }\n      model.setAttributes(newAttributes);\n    }\n  }\n\n  _getModels(gl) {\n    const {id, filled, extruded, wireframe} = this.props;\n\n    const models = {};\n\n    if (filled) {\n      models.TOP = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-top`,\n          geometry: new Geometry({\n            drawMode: GL.TRIANGLES,\n            attributes: {\n              vertexPositions: {size: 2, isGeneric: true, value: new Float32Array([0, 1])},\n              nextPositions: {size: 3, isGeneric: true, value: new Float32Array(3)},\n              nextPositions64xyLow: {size: 2, isGeneric: true, value: new Float32Array(2)}\n            }\n          }),\n          uniforms: {\n            isSideVertex: 0\n          },\n          vertexCount: 0,\n          isIndexed: true,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n    if (filled && extruded) {\n      models.SIDE = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-side`,\n          geometry: new Geometry({\n            drawMode: GL.TRIANGLE_STRIP,\n            vertexCount: 4,\n            attributes: {\n              vertexPositions: {size: 2, value: SIDE_FILL_POSITIONS}\n            }\n          }),\n          uniforms: {\n            isSideVertex: 1\n          },\n          isInstanced: 1,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n    if (extruded && wireframe) {\n      models.WIRE = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-wire`,\n          geometry: new Geometry({\n            drawMode: GL.LINE_STRIP,\n            vertexCount: 4,\n            attributes: {\n              vertexPositions: {size: 2, value: SIDE_WIRE_POSITIONS}\n            }\n          }),\n          uniforms: {\n            isSideVertex: 1\n          },\n          isInstanced: 1,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n\n    return {\n      models: [models.WIRE, models.SIDE, models.TOP].filter(Boolean),\n      modelsByName: models\n    };\n  }\n\n  calculateIndices(attribute) {\n    attribute.value = this.state.polygonTesselator.indices();\n    const numVertex = attribute.value.length / attribute.size;\n    this.setState({numVertex});\n  }\n\n  calculatePositions(attribute) {\n    attribute.value = this.state.polygonTesselator.positions();\n    const numInstances = attribute.value.length / attribute.size;\n    this.setState({numInstances});\n  }\n  calculatePositionsLow(attribute) {\n    const isFP64 = this.is64bitEnabled();\n    attribute.isGeneric = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    attribute.value = this.state.polygonTesselator.positions64xyLow();\n  }\n\n  calculateNextPositions(attribute) {\n    attribute.value = this.state.polygonTesselator.nextPositions();\n  }\n  calculateNextPositionsLow(attribute) {\n    const isFP64 = this.is64bitEnabled();\n    attribute.isGeneric = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    attribute.value = this.state.polygonTesselator.nextPositions64xyLow();\n  }\n\n  calculateElevations(attribute) {\n    const {extruded, getElevation} = this.props;\n    if (extruded && typeof getElevation === 'function') {\n      attribute.isGeneric = false;\n      attribute.value = this.state.polygonTesselator.elevations({\n        getElevation: polygonIndex => getElevation(this.props.data[polygonIndex])\n      });\n    } else {\n      const elevation = extruded ? getElevation : 0;\n      attribute.isGeneric = true;\n      attribute.value = new Float32Array([elevation]);\n    }\n  }\n\n  calculateFillColors(attribute) {\n    attribute.value = this.state.polygonTesselator.colors({\n      key: 'fillColors',\n      getColor: polygonIndex => this.props.getFillColor(this.props.data[polygonIndex])\n    });\n  }\n  calculateLineColors(attribute) {\n    attribute.value = this.state.polygonTesselator.colors({\n      key: 'lineColors',\n      getColor: polygonIndex => this.props.getLineColor(this.props.data[polygonIndex])\n    });\n  }\n\n  // Override the default picking colors calculation\n  calculatePickingColors(attribute) {\n    attribute.value = this.state.polygonTesselator.pickingColors();\n  }\n}\n\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;\n"],"file":"solid-polygon-layer.js"}