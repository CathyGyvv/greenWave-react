{"version":3,"sources":["../../../src/icon-layer/icon-layer.js"],"names":["fp64LowPart","fp64","DEFAULT_COLOR","DEFAULT_TEXTURE_MIN_FILTER","GL","LINEAR_MIPMAP_LINEAR","DEFAULT_TEXTURE_MAG_FILTER","LINEAR","defaultProps","iconAtlas","iconMapping","sizeScale","getPosition","x","position","getIcon","icon","getColor","color","getSize","size","getAngle","angle","IconLayer","projectModule","is64bitEnabled","vs","fs","modules","attributeManager","getAttributeManager","addInstanced","instancePositions","transition","accessor","instancePositions64xyLow","update","calculateInstancePositions64xyLow","instanceSizes","defaultValue","instanceOffsets","calculateInstanceOffsets","instanceIconFrames","calculateInstanceIconFrames","instanceColorModes","type","UNSIGNED_BYTE","calculateInstanceColorMode","instanceColors","instanceAngles","oldProps","props","changeFlags","invalidate","Texture2D","setParameters","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","setState","iconsTexture","context","gl","urls","then","texture","state","model","delete","_getModel","invalidateAll","uniforms","render","Object","assign","iconsTextureDim","width","height","positions","Model","getShaders","id","geometry","Geometry","drawMode","TRIANGLE_FAN","attributes","Float32Array","isInstanced","shaderCache","attribute","isFP64","isGeneric","value","data","i","point","object","rect","anchorX","anchorY","colorMode","mask","y","Layer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Layer} from '@deck.gl/core';\nimport {GL, Model, Geometry, Texture2D, loadTextures, fp64} from 'luma.gl';\nconst {fp64LowPart} = fp64;\n\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_TEXTURE_MIN_FILTER = GL.LINEAR_MIPMAP_LINEAR;\n// GL.LINEAR is the default value but explicitly set it here\nconst DEFAULT_TEXTURE_MAG_FILTER = GL.LINEAR;\n\n/*\n * @param {object} props\n * @param {Texture2D | string} props.iconAtlas - atlas image url or texture\n * @param {object} props.iconMapping - icon names mapped to icon definitions\n * @param {object} props.iconMapping[icon_name].x - x position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].y - y position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].width - width of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].height - height of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].anchorX - x anchor of icon on the atlas image,\n *   default to width / 2\n * @param {object} props.iconMapping[icon_name].anchorY - y anchor of icon on the atlas image,\n *   default to height / 2\n * @param {object} props.iconMapping[icon_name].mask - whether icon is treated as a transparency\n *   mask. If true, user defined color is applied. If false, original color from the image is\n *   applied. Default to false.\n * @param {number} props.size - icon size in pixels\n * @param {func} props.getPosition - returns anchor position of the icon, in [lng, lat, z]\n * @param {func} props.getIcon - returns icon name as a string\n * @param {func} props.getSize - returns icon size multiplier as a number\n * @param {func} props.getColor - returns color of the icon in [r, g, b, a]. Only works on icons\n *   with mask: true.\n * @param {func} props.getAngle - returns rotating angle (in degree) of the icon.\n */\nconst defaultProps = {\n  iconAtlas: null,\n  iconMapping: {},\n  sizeScale: 1,\n  fp64: false,\n\n  getPosition: x => x.position,\n  getIcon: x => x.icon,\n  getColor: x => x.color || DEFAULT_COLOR,\n  getSize: x => x.size || 1,\n  getAngle: x => x.angle || 0\n};\n\nexport default class IconLayer extends Layer {\n  getShaders() {\n    const projectModule = this.is64bitEnabled() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'picking']};\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instancePositions64xyLow: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {size: 2, accessor: 'getIcon', update: this.calculateInstanceOffsets},\n      instanceIconFrames: {size: 4, accessor: 'getIcon', update: this.calculateInstanceIconFrames},\n      instanceColorModes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getIcon',\n        update: this.calculateInstanceColorMode\n      },\n      instanceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const {iconAtlas, iconMapping} = props;\n\n    if (oldProps.iconMapping !== iconMapping) {\n      const attributeManager = this.getAttributeManager();\n      attributeManager.invalidate('instanceOffsets');\n      attributeManager.invalidate('instanceIconFrames');\n      attributeManager.invalidate('instanceColorModes');\n    }\n\n    if (oldProps.iconAtlas !== iconAtlas) {\n      if (iconAtlas instanceof Texture2D) {\n        iconAtlas.setParameters({\n          [GL.TEXTURE_MIN_FILTER]: DEFAULT_TEXTURE_MIN_FILTER,\n          [GL.TEXTURE_MAG_FILTER]: DEFAULT_TEXTURE_MAG_FILTER\n        });\n        this.setState({iconsTexture: iconAtlas});\n      } else if (typeof iconAtlas === 'string') {\n        loadTextures(this.context.gl, {\n          urls: [iconAtlas]\n        }).then(([texture]) => {\n          texture.setParameters({\n            [GL.TEXTURE_MIN_FILTER]: DEFAULT_TEXTURE_MIN_FILTER,\n            [GL.TEXTURE_MAG_FILTER]: DEFAULT_TEXTURE_MAG_FILTER\n          });\n          this.setState({iconsTexture: texture});\n        });\n      }\n    }\n\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.state.attributeManager.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {sizeScale} = this.props;\n    const {iconsTexture} = this.state;\n\n    if (iconsTexture) {\n      this.state.model.render(\n        Object.assign({}, uniforms, {\n          iconsTexture,\n          iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n          sizeScale\n        })\n      );\n    }\n  }\n\n  _getModel(gl) {\n    const positions = [-1, -1, 0, -1, 1, 0, 1, 1, 0, 1, -1, 0];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  /*\n  calculateInstancePositions(attribute) {\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const position = getPosition(object);\n      value[i++] = position[0];\n      value[i++] = position[1];\n      value[i++] = position[2] || 0;\n    }\n  }\n\n  calculateInstanceSizes(attribute) {\n    const {data, getSize} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      value[i++] = getSize(object);\n    }\n  }\n\n  calculateInstanceAngles(attribute) {\n    const {data, getAngle} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      value[i++] = getAngle(object);\n    }\n  }\n\n  calculateInstanceColors(attribute) {\n    const {data, getColor} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const color = getColor(object);\n\n      value[i++] = color[0];\n      value[i++] = color[1];\n      value[i++] = color[2];\n      value[i++] = isNaN(color[3]) ? 255 : color[3];\n    }\n  }\n  */\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = this.is64bitEnabled();\n    attribute.isGeneric = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n\n  calculateInstanceOffsets(attribute) {\n    const {data, iconMapping, getIcon} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const icon = getIcon(object);\n      const rect = iconMapping[icon] || {};\n      value[i++] = rect.width / 2 - rect.anchorX || 0;\n      value[i++] = rect.height / 2 - rect.anchorY || 0;\n    }\n  }\n\n  calculateInstanceColorMode(attribute) {\n    const {data, iconMapping, getIcon} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const icon = getIcon(object);\n      const colorMode = iconMapping[icon] && iconMapping[icon].mask;\n      value[i++] = colorMode ? 1 : 0;\n    }\n  }\n\n  calculateInstanceIconFrames(attribute) {\n    const {data, iconMapping, getIcon} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const icon = getIcon(object);\n      const rect = iconMapping[icon] || {};\n      value[i++] = rect.x || 0;\n      value[i++] = rect.y || 0;\n      value[i++] = rect.width || 0;\n      value[i++] = rect.height || 0;\n    }\n  }\n}\n\nIconLayer.layerName = 'IconLayer';\nIconLayer.defaultProps = defaultProps;\n"],"file":"icon-layer.js"}